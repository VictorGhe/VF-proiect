Configurations:

general:
  device: cpu
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: out.txt
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  no_batchdim_buffers: false
  save_output: false
  output_file: out.pkl
model:
  name: resnet2b
  path: models/cifar10_resnet/resnet2b.pth
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: none
  onnx_vnnlib_joint_optimization_flags: none
  check_optmized: false
  flatten_final_output: false
  optimize_graph: null
data:
  start: 0
  end: 100
  select_instance: null
  num_outputs: 10
  mean: [0.4914, 0.4822, 0.4465]
  std: [0.2471, 0.2435, 0.2616]
  pkl_path: null
  dataset: CIFAR
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725490196
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 2048
  auto_enlarge_batch_size: false
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    apply_output_constraints_to: []
    disable_optimization: []
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    dynamic: false
    max_dim: 10000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
bab:
  initial_max_domains: 1
  max_domains: .inf
  decision_thresh: 0
  timeout: 120
  timeout_scale: 1
  override_timeout: null
  get_upper_bound: false
  dfs_percent: 0.0
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: true
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  cut:
    enabled: false
    implication: false
    bab_cut: false
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 1.0
    iteration: 100
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.02
    number_cuts: 50
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
  branching:
    method: kfsb
    candidates: 3
    reduceop: min
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    sb_coeff_thresh: 0.001
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      branching_point_refinement: false
      filter: false
      filter_beta: false
      filter_batch_size: 10000
      filter_iterations: 25
      shortlist_size: 500
      loose_tanh_threshold: null
    new_input_split:
      enable: false
      batch_size: 2
      rounds: 1
      init_alpha_batch_size: 8192
      full_alpha: false
    input_split:
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_primary_spec: null
      sb_primary_spec_iter: 1
      sb_sum: false
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_zero_crossing_score: false
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: before
  pgd_steps: 100
  pgd_restarts: 30
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_loss_mode: null
  enable_mip_attack: false
  adv_saver: default_adv_saver
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0

Experiments at Thu Dec 21 10:52:44 2023 on mikeVM
CResNet5(
  (conv1): Conv2d(3, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (layer1): Sequential(
    (0): BasicBlock(
      (conv1): Conv2d(8, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (shortcut): Sequential(
        (0): Conv2d(8, 16, kernel_size=(1, 1), stride=(2, 2))
      )
    )
    (1): BasicBlock(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (shortcut): Sequential()
    )
  )
  (linear1): Linear(in_features=1024, out_features=100, bias=True)
  (linear2): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  conv1.weight: shape torch.Size([8, 3, 3, 3])
  conv1.bias: shape torch.Size([8])
  layer1.0.conv1.weight: shape torch.Size([16, 8, 3, 3])
  layer1.0.conv1.bias: shape torch.Size([16])
  layer1.0.conv2.weight: shape torch.Size([16, 16, 3, 3])
  layer1.0.conv2.bias: shape torch.Size([16])
  layer1.0.shortcut.0.weight: shape torch.Size([16, 8, 1, 1])
  layer1.0.shortcut.0.bias: shape torch.Size([16])
  layer1.1.conv1.weight: shape torch.Size([16, 16, 3, 3])
  layer1.1.conv1.bias: shape torch.Size([16])
  layer1.1.conv2.weight: shape torch.Size([16, 16, 3, 3])
  layer1.1.conv2.bias: shape torch.Size([16])
  linear1.weight: shape torch.Size([100, 1024])
  linear1.bias: shape torch.Size([100])
  linear2.weight: shape torch.Size([10, 100])
  linear2.bias: shape torch.Size([10])
Trying generic MNIST/CIFAR data loader.
Files already downloaded and verified
Internal results will be saved to out.txt.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.19091558, -0.50774616, -0.05718238,  2.23404956, -0.64370054,
          2.38971519,  1.96902382, -1.46069169, -0.98059338, -1.75199282]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.19091547, -0.50774592, -0.05718319,  2.23405004, -0.64370078,
           2.38971567,  1.96902335, -1.46069157, -0.98059326, -1.75199282],
         [-1.19091547, -0.50774592, -0.05718319,  2.23405004, -0.64370078,
           2.38971567,  1.96902335, -1.46069157, -0.98059326, -1.75199282]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.42496538,  2.74179602,  2.29123330,  2.87775087, -0.15566564,
           0.26502669,  3.69474173,  3.21464324,  3.98604226]]])
number of violation:  1
Result: unsafe-pgd in 0.0515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.02953815,  4.21952534, -2.03169966, -1.62848067, -1.60506845,
         -4.36937809, -2.96140265, -3.56549168,  6.42298174,  2.48937225]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.94738817,  4.78012323, -2.14865780, -1.69613338, -1.80961871,
          -4.40058184, -3.01473784, -3.61580968,  6.10779095,  2.85013866],
         [ 2.94738817,  4.78012323, -2.14865780, -1.69613338, -1.80961871,
          -4.40058184, -3.01473784, -3.61580968,  6.10779095,  2.85013866]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.16040277,  1.32766771,  8.25644875,  7.80392456,  7.91740990,
          10.50837326,  9.12252903,  9.72360039,  3.25765181]]])
number of violation:  0
Attack finished in 2.0560 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 3.02953815,  4.21952534, -2.03169966, -1.62848067, -1.60506845,
         -4.36937809, -2.96140265, -3.56549168,  6.42298174,  2.48937225]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 168, 1, 158] with unstable size 167 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 102, 1, 158] with unstable size 101 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 121, 1, 158] with unstable size 120 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 248, 1, 158] with unstable size 247 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 33, 1, 158] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [167]; unstable size 167; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 102, 1, 167] with unstable size 101 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 121, 1, 167] with unstable size 120 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 248, 1, 167] with unstable size 247 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 33, 1, 167] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [101]; unstable size 101; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 121, 1, 101] with unstable size 120 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 248, 1, 101] with unstable size 247 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 33, 1, 101] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 101] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [120]; unstable size 120; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 248, 1, 120] with unstable size 247 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 33, 1, 120] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 120] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [247]; unstable size 247; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 33, 1, 247] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [32]; unstable size 32; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 32] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.45695758, -0.51258272,  6.35851622,  6.13861847,  6.03921032,
          8.38362408,  7.31514835,  7.53226233,  1.30834162]]) None
best_l after optimization: 45.46355056762695
alpha/beta optimization time: 89.95295929908752
initial alpha-crown bounds: tensor([[ 1.62279320, -0.32243806,  6.51509953,  6.26511812,  6.18413639,
          8.56207848,  7.44295025,  7.70945883,  1.48435569]])
Worst class: (+ rhs) -0.3224380612373352
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 27.618646144866943
##### Instance 1 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.622793197631836.

Properties batch 1, size 1
Remaining timeout: 27.538065671920776
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.32243806]]) need to verify.
Model prediction is: tensor([ 3.02953815,  4.21952534, -2.03169966, -1.62848067, -1.60506845,
        -4.36937809, -2.96140265, -3.56549168,  6.42298174,  2.48937225])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32243806]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 158
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 165
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 99
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 113
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 240
Node /39 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 806
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 54] 
split level 1: [/38, 77] 
split level 2: [/38, 51] 
split level 3: [/38, 58] 
split level 4: [/38, 48] 
split level 5: [/38, 63] 
split level 6: [/38, 95] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 5.173683166503906e-05
Time: prepare 0.0024    bound 0.0294    transfer 0.0001    finalize 0.0053    func 0.0372    
Accumulated time: func 0.0372    prepare 0.0030    bound 0.0294    transfer 0.0001    finalize 0.0053    
length of domains: 0
Time: pickout 0.0004    decision 0.0779    set_bounds 0.0181    solve 0.0373    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0779    set_bounds 0.0181    solve 0.0373    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.14051032066345215


Properties batch 2, size 1
Remaining timeout: 27.29621458053589
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.51509952545166.

Properties batch 3, size 1
Remaining timeout: 27.231181383132935
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.26511812210083.

Properties batch 4, size 1
Remaining timeout: 27.16463017463684
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.184136390686035.

Properties batch 5, size 1
Remaining timeout: 27.098421573638916
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 8.562078475952148.

Properties batch 6, size 1
Remaining timeout: 27.03279161453247
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 7.442950248718262.

Properties batch 7, size 1
Remaining timeout: 26.965487241744995
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 7.709458827972412.

Properties batch 8, size 1
Remaining timeout: 26.900868892669678
##### Instance 1 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.4843556880950928.
Result: safe in 93.1649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.39994097,  2.80351830, -1.48902440, -0.93684304, -1.69659591,
         -1.44825745, -3.80596042, -2.09725142,  4.45986938,  1.81048477]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.15870976,  3.37940598, -1.70684350, -0.88814008, -1.98072433,
          -1.37440753, -3.74592662, -2.08528280,  4.09977865,  2.14332128],
         [ 2.15870976,  3.37940598, -1.70684350, -0.88814008, -1.98072433,
          -1.37440753, -3.74592662, -2.08528280,  4.09977865,  2.14332128]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.94106889, 0.72037268, 5.80662203, 4.98791885, 6.08050299,
          5.47418594, 7.84570551, 6.18506193, 1.95645809]]])
number of violation:  0
Attack finished in 1.8060 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 2.39994097,  2.80351830, -1.48902440, -0.93684304, -1.69659591,
         -1.44825745, -3.80596042, -2.09725142,  4.45986938,  1.81048477]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 171, 1, 182] with unstable size 170 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 145, 1, 182] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 173, 1, 182] with unstable size 172 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 314, 1, 182] with unstable size 313 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 52, 1, 182] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [170]; unstable size 170; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 145, 1, 170] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 173, 1, 170] with unstable size 172 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 314, 1, 170] with unstable size 313 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 52, 1, 170] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [144]; unstable size 144; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 173, 1, 144] with unstable size 172 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 314, 1, 144] with unstable size 313 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 52, 1, 144] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [172]; unstable size 172; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 314, 1, 172] with unstable size 313 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 52, 1, 172] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [313]; unstable size 313; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 52, 1, 313] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 313] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 51] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.60418105, -1.50814581,  2.75813770,  2.59598780,  2.89429402,
          2.73601484,  5.08332253,  2.66345406, -1.22261190]]) None
best_l after optimization: 18.683177947998047
alpha/beta optimization time: 119.15055108070374
initial alpha-crown bounds: tensor([[-0.25503564, -1.12503791,  3.14601803,  2.87504196,  3.24895048,
          3.06256270,  5.41594791,  3.12028027, -0.80555117]])
Worst class: (+ rhs) -1.1250379085540771
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -1.2571043968200684
##### Instance 2 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.25503564]]) need to verify.
Model prediction is: tensor([ 2.39994097,  2.80351830, -1.48902440, -0.93684304, -1.69659591,
        -1.44825745, -3.80596042, -2.09725142,  4.45986938,  1.81048477])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25503564]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 182
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 169
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 139
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 167
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 301
Node /39 input 0: size torch.Size([100]) unstable 46
-----------------
# of unstable neurons: 1004
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 27] 
split level 1: [/38, 18] 
split level 2: [/38, 22] 
split level 3: [/38, 36] 
split level 4: [/38, 48] 
split level 5: [/38, 61] 
split level 6: [/38, 64] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.863739013671875e-05
Time: prepare 0.0025    bound 0.0296    transfer 0.0001    finalize 0.0035    func 0.0357    
Accumulated time: func 0.0357    prepare 0.0033    bound 0.0296    transfer 0.0001    finalize 0.0035    
length of domains: 0
Time: pickout 0.0004    decision 0.0672    set_bounds 0.0198    solve 0.0358    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0672    set_bounds 0.0198    solve 0.0358    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 121.4969 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.08267546,  0.40561098,  1.58225298, -1.47285354,  1.30824971,
         -2.65734053, -3.33492136, -1.34458375,  2.85269475, -1.42187500]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.82961798,  0.55085534,  1.38260448, -1.41572845,  1.14654827,
          -2.65933871, -3.33188748, -1.49047816,  3.31567311, -1.32795906],
         [ 3.82961798,  0.55085534,  1.38260448, -1.41572845,  1.14654827,
          -2.65933871, -3.33188748, -1.49047816,  3.31567311, -1.32795906]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.27876258, 2.44701338, 5.24534655, 2.68306971, 6.48895645,
          7.16150570, 5.32009649, 0.51394534, 5.15757751]]])
number of violation:  0
Attack finished in 2.0509 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 4.08267546,  0.40561098,  1.58225298, -1.47285354,  1.30824971,
         -2.65734053, -3.33492136, -1.34458375,  2.85269475, -1.42187500]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 198, 1, 250] with unstable size 197 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 138, 1, 250] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 118, 1, 250] with unstable size 117 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 262, 1, 250] with unstable size 261 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 250] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [197]; unstable size 197; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 138, 1, 197] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 118, 1, 197] with unstable size 117 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 262, 1, 197] with unstable size 261 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 197] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [137]; unstable size 137; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 118, 1, 137] with unstable size 117 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 262, 1, 137] with unstable size 261 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 137] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [117]; unstable size 117; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 262, 1, 117] with unstable size 261 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 117] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [261]; unstable size 261; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 261] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 261] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.87832463,  0.65500546,  3.32003522,  0.92129576,  4.17499495,
          4.71479082,  3.10001826, -0.97930479,  2.84794664]]) None
best_l after optimization: 21.501779556274414
alpha/beta optimization time: 105.319091796875
initial alpha-crown bounds: tensor([[ 1.14033890,  0.83304584,  3.51125431,  1.06435072,  4.38795567,
          4.94344568,  3.29919171, -0.76076341,  3.08295941]])
Worst class: (+ rhs) -0.76076340675354
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 12.265937566757202
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.1403388977050781.

Properties batch 1, size 1
Remaining timeout: 12.19642448425293
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.8330458402633667.

Properties batch 2, size 1
Remaining timeout: 12.130534648895264
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.51125431060791.

Properties batch 3, size 1
Remaining timeout: 12.06296682357788
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.0643507242202759.

Properties batch 4, size 1
Remaining timeout: 11.994264602661133
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.387955665588379.

Properties batch 5, size 1
Remaining timeout: 11.928292274475098
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.943445682525635.

Properties batch 6, size 1
Remaining timeout: 11.86266303062439
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.29919171333313.

Properties batch 7, size 1
Remaining timeout: 11.796618461608887
##### Instance 3 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.76076341]]) need to verify.
Model prediction is: tensor([ 4.08267546,  0.40561098,  1.58225298, -1.47285354,  1.30824971,
        -2.65734053, -3.33492136, -1.34458375,  2.85269475, -1.42187500])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.76076341]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 250
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 195
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 135
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 113
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 247
Node /39 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 971
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 65] 
split level 1: [/38, 62] 
split level 2: [/38, 87] 
split level 3: [/38, 3] 
split level 4: [/38, 67] 
split level 5: [/38, 91] 
split level 6: [/38, 34] 
pruning_in_iteration open status: True
ratio of positive domain = 120 / 128 = 0.9375
pruning-in-iteration extra time: 0.010450363159179688
Time: prepare 0.0025    bound 0.4348    transfer 0.0004    finalize 0.0031    func 0.4408    
Accumulated time: func 0.4408    prepare 0.0032    bound 0.4348    transfer 0.0004    finalize 0.0031    
Current worst splitting domains lb-rhs (depth):
-0.36965 (7), -0.25170 (7), -0.24326 (7), -0.17142 (7), -0.11088 (7), -0.09022 (7), -0.07014 (7), -0.03528 (7), 
length of domains: 8
Time: pickout 0.0006    decision 0.0629    set_bounds 0.0186    solve 0.4409    add 0.0439    
Accumulated time: pickout 0.0006    decision 0.0629    set_bounds 0.0186    solve 0.4409    add 0.0439    
Current (lb-rhs): -0.36965131759643555
8 domains visited
Cumulative time: 0.5739269256591797

BaB round 2
batch: 8
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/38, 46] [/38, 95] [/38, 95] [/38, 95] [/38, 46] [/38, 95] [/38, 95] [/38, 46] 
split level 1: [/38, 95] [/38, 28] [/38, 46] [/38, 46] [/38, 95] [/38, 46] [/38, 46] [/38, 95] 
split level 2: [/38, 28] [/38, 46] [/38, 28] [/38, 28] [/38, 28] [/38, 28] [/38, 28] [/38, 28] 
split level 3: [/38, 97] [/38, 97] [/38, 97] [/38, 97] [/38, 97] [/38, 97] [/38, 97] [/38, 97] 
pruning_in_iteration open status: True
ratio of positive domain = 116 / 128 = 0.90625
pruning-in-iteration extra time: 0.01265716552734375
Time: prepare 0.0101    bound 0.5043    transfer 0.0005    finalize 0.0039    func 0.5188    
Accumulated time: func 0.9595    prepare 0.0138    bound 0.9390    transfer 0.0009    finalize 0.0070    
Current worst splitting domains lb-rhs (depth):
-0.25440 (11), -0.21968 (11), -0.16367 (11), -0.13470 (11), -0.12812 (11), -0.10760 (11), -0.07812 (11), -0.05453 (11), -0.02137 (11), -0.01756 (11), -0.01333 (11), -0.00454 (11), 
length of domains: 12
Time: pickout 0.0008    decision 0.0584    set_bounds 0.0159    solve 0.5188    add 0.0019    
Accumulated time: pickout 0.0014    decision 0.1213    set_bounds 0.0345    solve 0.9597    add 0.0458    
Current (lb-rhs): -0.254396915435791
20 domains visited
Cumulative time: 1.1711235046386719

BaB round 3
batch: 12
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/38, 6] [/38, 6] [/38, 6] [/38, 6] [/38, 6] [/38, 6] [/38, 6] [/38, 6] [/38, 6] [/38, 6] 
split level 1: [/38, 98] [/38, 98] [/38, 98] [/38, 98] [/38, 98] [/38, 98] [/38, 98] [/38, 98] [/38, 98] [/38, 98] 
split level 2: [/28, 83] [/28, 694] [/28, 83] [/28, 694] [/28, 83] [/28, 694] [/28, 604] [/28, 83] [/28, 694] [/28, 604] 
split level 3: [/28, 37] [/28, 332] [/38, 2] [/28, 747] [/38, 2] [/28, 332] [/28, 605] [/38, 2] [/28, 747] [/28, 81] 
pruning_in_iteration open status: True
ratio of positive domain = 164 / 192 = 0.8541666666666666
pruning-in-iteration extra time: 0.01949763298034668
Time: prepare 0.0183    bound 0.6625    transfer 0.0006    finalize 0.0059    func 0.6874    
Accumulated time: func 1.6470    prepare 0.0327    bound 1.6015    transfer 0.0015    finalize 0.0129    
Current worst splitting domains lb-rhs (depth):
-0.19038 (15), -0.18254 (15), -0.16646 (15), -0.16034 (15), -0.14816 (15), -0.14091 (15), -0.14068 (15), -0.13232 (15), -0.09471 (15), -0.09304 (15), -0.06799 (15), -0.06014 (15), -0.05724 (15), -0.05174 (15), -0.04949 (15), -0.04817 (15), -0.04486 (15), -0.04378 (15), -0.02908 (15), -0.02799 (15), 
length of domains: 28
Time: pickout 0.0009    decision 0.0856    set_bounds 0.0231    solve 0.6875    add 0.0018    
Accumulated time: pickout 0.0024    decision 0.2069    set_bounds 0.0576    solve 1.6472    add 0.0476    
Current (lb-rhs): -0.19037771224975586
48 domains visited
Cumulative time: 1.9714550971984863

BaB round 4
batch: 28
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/28, 340] [/38, 53] [/38, 53] [/38, 53] [/28, 604] [/28, 331] [/38, 53] [/38, 53] [/38, 53] [/38, 53] 
split level 1: [/28, 84] [/28, 331] [/28, 84] [/28, 331] [/28, 1005] [/38, 53] [/28, 340] [/28, 331] [/28, 331] [/28, 331] 
pruning_in_iteration open status: True
ratio of positive domain = 46 / 112 = 0.4107142857142857
pruning-in-iteration extra time: 0.028928279876708984
Time: prepare 0.0111    bound 0.6914    transfer 0.0005    finalize 0.0032    func 0.7062    
Accumulated time: func 2.3532    prepare 0.0442    bound 2.2929    transfer 0.0021    finalize 0.0161    
Current worst splitting domains lb-rhs (depth):
-0.16233 (17), -0.16187 (17), -0.15907 (17), -0.15876 (17), -0.15316 (17), -0.15203 (17), -0.15162 (17), -0.15060 (17), -0.13604 (17), -0.13537 (17), -0.13155 (17), -0.13029 (17), -0.12951 (17), -0.12917 (17), -0.12684 (17), -0.12647 (17), -0.11622 (17), -0.11616 (17), -0.11607 (17), -0.11587 (17), 
length of domains: 66
Time: pickout 0.0013    decision 0.0833    set_bounds 0.0121    solve 0.7063    add 0.0023    
Accumulated time: pickout 0.0037    decision 0.2902    set_bounds 0.0697    solve 2.3536    add 0.0499    
Current (lb-rhs): -0.16232728958129883
114 domains visited
Cumulative time: 2.777465343475342

BaB round 5
batch: 66
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/28, 1005] [/28, 340] [/28, 484] [/38, 53] [/28, 484] [/28, 1005] [/28, 340] [/28, 484] [/28, 1005] [/28, 340] 
pruning_in_iteration open status: True
ratio of positive domain = 30 / 132 = 0.2272727272727273
pruning-in-iteration extra time: 0.0018389225006103516
Time: prepare 0.0123    bound 0.8902    transfer 0.0007    finalize 0.0037    func 0.9070    
Accumulated time: func 3.2602    prepare 0.0569    bound 3.1831    transfer 0.0028    finalize 0.0198    
Current worst splitting domains lb-rhs (depth):
-0.14906 (18), -0.14883 (18), -0.14865 (18), -0.14830 (18), -0.14519 (18), -0.14514 (18), -0.14480 (18), -0.14471 (18), -0.14032 (18), -0.13946 (18), -0.13906 (18), -0.13850 (18), -0.13798 (18), -0.13781 (18), -0.13735 (18), -0.13664 (18), -0.12249 (18), -0.12158 (18), -0.11849 (18), -0.11755 (18), 
length of domains: 102
Time: pickout 0.0013    decision 0.1478    set_bounds 0.0101    solve 0.9071    add 0.0030    
Accumulated time: pickout 0.0050    decision 0.4380    set_bounds 0.0798    solve 3.2607    add 0.0529    
Current (lb-rhs): -0.1490614414215088
216 domains visited
Cumulative time: 3.847567319869995

BaB round 6
batch: 102
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/25, 364] [/28, 331] [/28, 1005] [/28, 83] [/25, 364] [/28, 332] [/28, 332] [/28, 331] [/28, 1005] [/28, 694] 
pruning_in_iteration open status: True
ratio of positive domain = 75 / 204 = 0.36764705882352944
pruning-in-iteration extra time: 0.04607367515563965
Time: prepare 0.0206    bound 1.0774    transfer 0.0009    finalize 0.0063    func 1.1052    
Accumulated time: func 4.3655    prepare 0.0780    bound 4.2605    transfer 0.0037    finalize 0.0261    
Current worst splitting domains lb-rhs (depth):
-0.14113 (19), -0.13865 (19), -0.13828 (19), -0.13792 (19), -0.13421 (19), -0.13408 (19), -0.13235 (19), -0.13157 (19), -0.13154 (19), -0.13141 (19), -0.13093 (19), -0.13034 (19), -0.13017 (19), -0.12726 (19), -0.12692 (19), -0.12634 (19), -0.12598 (19), -0.12512 (19), -0.11368 (19), -0.11213 (19), 
length of domains: 129
Time: pickout 0.0015    decision 0.2378    set_bounds 0.0156    solve 1.1054    add 0.0034    
Accumulated time: pickout 0.0066    decision 0.6758    set_bounds 0.0954    solve 4.3661    add 0.0563    
Current (lb-rhs): -0.14112520217895508
345 domains visited
Cumulative time: 5.212369680404663

BaB round 7
batch: 129
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/28, 332] [/25, 364] [/28, 694] [/28, 1005] [/25, 364] [/28, 747] [/28, 1005] [/28, 332] [/28, 84] [/28, 694] 
pruning_in_iteration open status: True
ratio of positive domain = 97 / 258 = 0.375968992248062
pruning-in-iteration extra time: 0.06319761276245117
Time: prepare 0.0267    bound 1.4112    transfer 0.0011    finalize 0.0073    func 1.4463    
Accumulated time: func 5.8118    prepare 0.1051    bound 5.6717    transfer 0.0048    finalize 0.0334    
Current worst splitting domains lb-rhs (depth):
-0.13130 (20), -0.13068 (20), -0.13042 (20), -0.12996 (20), -0.12188 (20), -0.12107 (20), -0.12106 (20), -0.12106 (20), -0.12096 (20), -0.12087 (20), -0.12025 (20), -0.11994 (20), -0.11991 (20), -0.11962 (20), -0.11958 (20), -0.11902 (20), -0.11829 (20), -0.11430 (20), -0.11307 (20), -0.11298 (20), 
length of domains: 161
Time: pickout 0.0018    decision 0.2924    set_bounds 0.0198    solve 1.4465    add 0.0040    
Accumulated time: pickout 0.0083    decision 0.9682    set_bounds 0.1152    solve 5.8126    add 0.0603    
Current (lb-rhs): -0.13130497932434082
506 domains visited
Cumulative time: 6.978314638137817

BaB round 8
batch: 161
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/28, 747] [/25, 364] [/28, 83] [/28, 1005] [/28, 747] [/25, 364] [/28, 747] [/25, 364] [/25, 364] [/28, 1005] 
pruning_in_iteration open status: True
ratio of positive domain = 71 / 322 = 0.22049689440993792
pruning-in-iteration extra time: 0.037337303161621094
Time: prepare 0.0317    bound 1.9464    transfer 0.0012    finalize 0.0090    func 1.9884    
Accumulated time: func 7.8002    prepare 0.1372    bound 7.6180    transfer 0.0060    finalize 0.0424    
Current worst splitting domains lb-rhs (depth):
-0.12010 (21), -0.11933 (21), -0.11889 (21), -0.11842 (21), -0.11500 (21), -0.11434 (21), -0.11339 (21), -0.11336 (21), -0.11332 (21), -0.11329 (21), -0.11327 (21), -0.11211 (21), -0.11208 (21), -0.11192 (21), -0.11186 (21), -0.11183 (21), -0.11006 (21), -0.10864 (21), -0.10836 (21), -0.10692 (21), 
length of domains: 251
Time: pickout 0.0023    decision 0.3815    set_bounds 0.0235    solve 1.9886    add 0.0057    
Accumulated time: pickout 0.0106    decision 1.3496    set_bounds 0.1388    solve 7.8012    add 0.0659    
Current (lb-rhs): -0.1201019287109375
757 domains visited
Cumulative time: 9.381152868270874

BaB round 9
batch: 251
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/28, 332] [/28, 332] [/28, 332] [/28, 332] [/28, 332] [/28, 37] [/28, 332] [/28, 332] [/28, 106] [/28, 340] 
pruning_in_iteration open status: True
ratio of positive domain = 151 / 502 = 0.30079681274900394
pruning-in-iteration extra time: 0.14618349075317383
Time: prepare 0.0503    bound 2.9557    transfer 0.0022    finalize 0.0139    func 3.0223    
Accumulated time: func 10.8225    prepare 0.1880    bound 10.5738    transfer 0.0082    finalize 0.0564    
Current worst splitting domains lb-rhs (depth):
-0.10763 (22), -0.10699 (22), -0.10671 (22), -0.10658 (22), -0.10632 (22), -0.10578 (22), -0.10567 (22), -0.10545 (22), -0.10363 (22), -0.10270 (22), -0.10264 (22), -0.10247 (22), -0.10183 (22), -0.10174 (22), -0.10150 (22), -0.10126 (22), -0.10114 (22), -0.10075 (22), -0.10037 (22), -0.09977 (22), 
length of domains: 351
Time: pickout 0.0033    decision 0.7948    set_bounds 0.0362    solve 3.0225    add 0.0081    
Accumulated time: pickout 0.0138    decision 2.1444    set_bounds 0.1750    solve 10.8237    add 0.0740    
Current (lb-rhs): -0.10763025283813477
1108 domains visited
Time out!!!!!!!!
Result: unknown in 121.5566 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.74366522, -2.44937181,  2.21481442,  2.57808709,  2.91807580,
          1.40288866,  5.42217684, -2.61973476, -2.56108356, -3.16220570]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.62045836, -2.58912849,  2.25720382,  2.51525950,  3.14600444,
           1.50432384,  4.85582829, -2.26145220, -2.56487370, -3.24272013],
         [-3.62045836, -2.58912849,  2.25720382,  2.51525950,  3.14600444,
           1.50432384,  4.85582829, -2.26145220, -2.56487370, -3.24272013]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[8.47628689, 7.44495678, 2.59862447, 2.34056878, 1.70982385,
          3.35150433, 7.11728001, 7.42070198, 8.09854698]]])
number of violation:  0
Attack finished in 2.3403 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-3.74366522, -2.44937181,  2.21481442,  2.57808709,  2.91807580,
          1.40288866,  5.42217684, -2.61973476, -2.56108356, -3.16220570]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 140, 1, 165] with unstable size 139 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 159, 1, 165] with unstable size 158 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 143, 1, 165] with unstable size 142 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 384, 1, 165] with unstable size 383 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 47, 1, 165] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [139]; unstable size 139; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 159, 1, 139] with unstable size 158 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 143, 1, 139] with unstable size 142 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 384, 1, 139] with unstable size 383 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 47, 1, 139] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [158]; unstable size 158; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 143, 1, 158] with unstable size 142 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 384, 1, 158] with unstable size 383 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 47, 1, 158] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [142]; unstable size 142; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 384, 1, 142] with unstable size 383 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 47, 1, 142] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [383]; unstable size 383; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 47, 1, 383] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 383] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [46]; unstable size 46; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 46] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 5.55369854,  3.96404648,  0.62170243,  0.54964274, -0.10937071,
          1.14350414,  3.58919716,  3.82677817,  4.63122177]]) None

all verified at 3th iter
best_l after optimization: 25.315092086791992
alpha/beta optimization time: 5.633407354354858
initial alpha-crown bounds: tensor([[5.74155426, 4.14201212, 0.76161718, 0.66315401, 0.03627706, 1.29585612,
         3.81929564, 4.04848814, 4.80683422]])
Worst class: (+ rhs) 0.036277055740356445
verified with init bound!
Result: safe-incomplete in 8.2966 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.20927012, -1.67409551,  0.86702484,  1.56677449,  0.71970493,
          0.72044796,  2.92726874, -0.73844284, -2.54333949, -0.63613814]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.32180893, -1.78175414,  0.78909934,  1.75516653,  0.66743594,
           0.95947140,  2.60530019, -0.58683443, -2.50183225, -0.58430946],
         [-1.32180893, -1.78175414,  0.78909934,  1.75516653,  0.66743594,
           0.95947140,  2.60530019, -0.58683443, -2.50183225, -0.58430946]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.92710924, 4.38705444, 1.81620085, 0.85013366, 1.93786430,
          1.64582872, 3.19213438, 5.10713243, 3.18960953]]])
number of violation:  0
Attack finished in 2.0369 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.20927012, -1.67409551,  0.86702484,  1.56677449,  0.71970493,
          0.72044796,  2.92726874, -0.73844284, -2.54333949, -0.63613814]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 181, 1, 166] with unstable size 180 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 207, 1, 166] with unstable size 206 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 194, 1, 166] with unstable size 193 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 434, 1, 166] with unstable size 433 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 66, 1, 166] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [180]; unstable size 180; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 207, 1, 180] with unstable size 206 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 194, 1, 180] with unstable size 193 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 434, 1, 180] with unstable size 433 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 66, 1, 180] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [206]; unstable size 206; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 194, 1, 206] with unstable size 193 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 434, 1, 206] with unstable size 433 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 66, 1, 206] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [193]; unstable size 193; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 434, 1, 193] with unstable size 433 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 66, 1, 193] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [433]; unstable size 433; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 66, 1, 433] with unstable size 65 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 433] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [65]; unstable size 65; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 65] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.32841468, -1.14372253, -1.26119518, -1.50980353, -1.13647842,
         -1.40867412, -1.19639957,  0.73979568, -1.45067024]]) None
best_l after optimization: -3.1947875022888184
alpha/beta optimization time: 166.10221242904663
initial alpha-crown bounds: tensor([[ 0.31548858, -0.24212879, -0.73431540, -1.11423481, -0.69912815,
         -0.89475054, -0.54750109,  1.50347328, -0.78169036]])
Worst class: (+ rhs) -1.1142348051071167
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -48.47160458564758
##### Instance 5 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.3154885768890381.

Properties batch 1, size 1
Remaining timeout: -48.566609382629395
##### Instance 5 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.24212879]]) need to verify.
Model prediction is: tensor([-1.20927012, -1.67409551,  0.86702484,  1.56677449,  0.71970493,
         0.72044796,  2.92726874, -0.73844284, -2.54333949, -0.63613814])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24212879]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 166
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 177
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 201
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 189
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 408
Node /39 input 0: size torch.Size([100]) unstable 63
-----------------
# of unstable neurons: 1204
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 54] 
split level 1: [/38, 63] 
split level 2: [/38, 52] 
split level 3: [/38, 17] 
split level 4: [/38, 9] 
split level 5: [/38, 81] 
split level 6: [/38, 77] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.9591064453125e-05
Time: prepare 0.0026    bound 0.0344    transfer 0.0001    finalize 0.0035    func 0.0406    
Accumulated time: func 0.0406    prepare 0.0033    bound 0.0344    transfer 0.0001    finalize 0.0035    
length of domains: 0
Time: pickout 0.0004    decision 0.0693    set_bounds 0.0192    solve 0.0407    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0693    set_bounds 0.0192    solve 0.0407    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 168.8590 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.45168573,  4.29493809, -2.46692491,  1.81116891, -3.79720044,
          1.58700943, -0.86466312,  0.04442637, -2.72051144,  1.65998721]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.39189816,  3.64835835, -2.33986211,  2.09481645, -3.63099980,
           1.99952483, -0.77800691,  0.23102446, -2.97190595,  1.35506678],
         [ 0.39189816,  3.64835835, -2.33986211,  2.09481645, -3.63099980,
           1.99952483, -0.77800691,  0.23102446, -2.97190595,  1.35506678]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.25646019, 5.98822021, 1.55354190, 7.27935791, 1.64883351,
          4.42636538, 3.41733432, 6.62026501, 2.29329205]]])
number of violation:  0
Attack finished in 2.4653 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.45168573,  4.29493809, -2.46692491,  1.81116891, -3.79720044,
          1.58700943, -0.86466312,  0.04442637, -2.72051144,  1.65998721]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 139, 1, 222] with unstable size 138 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 111, 1, 222] with unstable size 110 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 113, 1, 222] with unstable size 112 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 217, 1, 222] with unstable size 216 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 25, 1, 222] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [138]; unstable size 138; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 111, 1, 138] with unstable size 110 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 113, 1, 138] with unstable size 112 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 217, 1, 138] with unstable size 216 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 25, 1, 138] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [110]; unstable size 110; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 113, 1, 110] with unstable size 112 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 217, 1, 110] with unstable size 216 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 25, 1, 110] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [112]; unstable size 112; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 217, 1, 112] with unstable size 216 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 25, 1, 112] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 112] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [216]; unstable size 216; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 25, 1, 216] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58581996, 4.55921364, 0.42510688, 5.88043833, 0.36133468, 3.07112932,
         2.06696868, 5.35048103, 0.89769924]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.7960 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.02565099, -1.87907326,  2.17639089,  0.93898636,  1.78726315,
          0.16023904,  1.32743466, -0.86109746, -1.64512086, -2.03066683]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.02565114, -1.87907314,  2.17639065,  0.93898636,  1.78726244,
           0.16023907,  1.32743430, -0.86109751, -1.64512014, -2.03066635],
         [ 0.02565114, -1.87907314,  2.17639065,  0.93898636,  1.78726244,
           0.16023907,  1.32743430, -0.86109751, -1.64512014, -2.03066635]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.30178320,  3.20650744, -0.84895635,  0.38844794, -0.45982814,
           1.16719520,  2.18853164,  2.97255468,  3.35810041]]])
number of violation:  2
Result: unsafe-pgd in 0.0046 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.49289405, -3.35792828,  1.29429519,  2.73696876,  1.75463891,
          2.85132408,  1.10570633,  1.21935761, -2.83914542, -3.27233696]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.49289393, -3.35792875,  1.29429531,  2.73696876,  1.75463915,
           2.85132408,  1.10570741,  1.21935749, -2.83914542, -3.27233744],
         [-1.49289393, -3.35792875,  1.29429531,  2.73696876,  1.75463915,
           2.85132408,  1.10570741,  1.21935749, -2.83914542, -3.27233744]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.22986269,  6.09489727,  1.44267344,  0.98232961, -0.11435533,
           1.63126135,  1.51761127,  5.57611418,  6.00930595]]])
number of violation:  1
Result: unsafe-pgd in 0.0042 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.63313591,  4.85708332, -0.16869207, -0.98798251, -2.18656683,
         -2.58123922, -0.50507468, -2.77083325,  1.97493947,  3.00146914]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.62068504,  4.16676044, -0.25335267, -0.86148739, -1.98375177,
          -2.38098049, -0.43582496, -2.50417876,  1.80931115,  3.06415939],
         [-0.62068504,  4.16676044, -0.25335267, -0.86148739, -1.98375177,
          -2.38098049, -0.43582496, -2.50417876,  1.80931115,  3.06415939]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.78744555, 4.42011309, 5.02824783, 6.15051222, 6.54774094,
          4.60258532, 6.67093849, 2.35744882, 1.10260010]]])
number of violation:  0
Attack finished in 2.2560 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.63313591,  4.85708332, -0.16869207, -0.98798251, -2.18656683,
         -2.58123922, -0.50507468, -2.77083325,  1.97493947,  3.00146914]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 118, 1, 150] with unstable size 117 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 111, 1, 150] with unstable size 110 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 129, 1, 150] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 281, 1, 150] with unstable size 280 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 33, 1, 150] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [117]; unstable size 117; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 111, 1, 117] with unstable size 110 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 129, 1, 117] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 281, 1, 117] with unstable size 280 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 33, 1, 117] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [110]; unstable size 110; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 129, 1, 110] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 281, 1, 110] with unstable size 280 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 33, 1, 110] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [128]; unstable size 128; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 281, 1, 128] with unstable size 280 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 33, 1, 128] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [280]; unstable size 280; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 33, 1, 280] with unstable size 32 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [32]; unstable size 32; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 32] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.46961641,  1.84812450,  2.91558456,  3.78539276,  3.98688602,
          2.32640743,  4.22842169,  0.16690636, -0.53615808]]) None
best_l after optimization: 23.818965911865234
alpha/beta optimization time: 107.25179529190063
initial alpha-crown bounds: tensor([[ 2.73669529,  2.20592642,  3.19044399,  4.09637260,  4.31391001,
          2.59320354,  4.52551508,  0.42885876, -0.27195978]])
Worst class: (+ rhs) -0.2719597816467285
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 10.165156841278076
##### Instance 9 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.7366952896118164.

Properties batch 1, size 1
Remaining timeout: 10.089832544326782
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.2059264183044434.

Properties batch 2, size 1
Remaining timeout: 10.018093347549438
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.190443992614746.

Properties batch 3, size 1
Remaining timeout: 9.948271751403809
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.096372604370117.

Properties batch 4, size 1
Remaining timeout: 9.878215551376343
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.313910007476807.

Properties batch 5, size 1
Remaining timeout: 9.806702852249146
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.593203544616699.

Properties batch 6, size 1
Remaining timeout: 9.736499309539795
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.525515079498291.

Properties batch 7, size 1
Remaining timeout: 9.667242527008057
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.42885875701904297.

Properties batch 8, size 1
Remaining timeout: 9.595812559127808
##### Instance 9 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.27195978]]) need to verify.
Model prediction is: tensor([-0.63313591,  4.85708332, -0.16869207, -0.98798251, -2.18656683,
        -2.58123922, -0.50507468, -2.77083325,  1.97493947,  3.00146914])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27195978]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 150
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 117
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 107
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 126
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 264
Node /39 input 0: size torch.Size([100]) unstable 30
-----------------
# of unstable neurons: 794
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 10] 
split level 1: [/38, 2] 
split level 2: [/38, 68] 
split level 3: [/38, 49] 
split level 4: [/38, 98] 
split level 5: [/38, 86] 
split level 6: [/38, 14] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.38690185546875e-05
Time: prepare 0.0024    bound 0.0286    transfer 0.0001    finalize 0.0034    func 0.0344    
Accumulated time: func 0.0344    prepare 0.0032    bound 0.0286    transfer 0.0001    finalize 0.0034    
length of domains: 0
Time: pickout 0.0006    decision 0.0668    set_bounds 0.0188    solve 0.0345    add 0.0001    
Accumulated time: pickout 0.0006    decision 0.0668    set_bounds 0.0188    solve 0.0345    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.12889838218688965

Result: safe in 110.6474 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.53532195, -3.20054770,  1.20672393,  0.73566508,  1.22798264,
          1.01365829, -0.29963282, -1.71290529,  0.83640414, -3.34268618]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.04426908, -3.34166479,  1.16581190,  1.01536953,  1.21811032,
           1.46922672,  0.00503219, -1.57939410,  0.51609027, -3.51285934],
         [ 3.04426908, -3.34166479,  1.16581190,  1.01536953,  1.21811032,
           1.46922672,  0.00503219, -1.57939410,  0.51609027, -3.51285934]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.38593388, 1.87845719, 2.02889967, 1.82615876, 1.57504237,
          3.03923678, 4.62366295, 2.52817893, 6.55712891]]])
number of violation:  0
Attack finished in 2.0241 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 3.53532195, -3.20054770,  1.20672393,  0.73566508,  1.22798264,
          1.01365829, -0.29963282, -1.71290529,  0.83640414, -3.34268618]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 224, 1, 141] with unstable size 223 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 174, 1, 141] with unstable size 173 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 146, 1, 141] with unstable size 145 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 275, 1, 141] with unstable size 274 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 44, 1, 141] with unstable size 43 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [223]; unstable size 223; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 174, 1, 223] with unstable size 173 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 146, 1, 223] with unstable size 145 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 275, 1, 223] with unstable size 274 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 44, 1, 223] with unstable size 43 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [173]; unstable size 173; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 146, 1, 173] with unstable size 145 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 275, 1, 173] with unstable size 274 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 44, 1, 173] with unstable size 43 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [145]; unstable size 145; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 275, 1, 145] with unstable size 274 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 44, 1, 145] with unstable size 43 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [274]; unstable size 274; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 44, 1, 274] with unstable size 43 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 274] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [43]; unstable size 43; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 43] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.30252361,  0.27398181,  0.43742573,  0.37335134, -0.05563241,
          1.27548361,  2.94404697,  0.28021002,  4.65024281]]) None

all verified at 2th iter
best_l after optimization: 15.050745010375977
alpha/beta optimization time: 2.293882369995117
initial alpha-crown bounds: tensor([[4.36949396, 0.33758259, 0.49653769, 0.42583895, 0.01661879, 1.34864044,
         2.99924326, 0.35393000, 4.70286179]])
Worst class: (+ rhs) 0.016618788242340088
verified with init bound!
Result: safe-incomplete in 4.6189 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.60551602,  4.44975662, -2.52586031, -1.17441916, -2.69053745,
         -1.84135807, -2.20418835, -2.60371017,  2.23344636,  6.96228981]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.67048413,  4.94713163, -2.58514142, -1.13966978, -2.71731281,
          -1.93195271, -2.16469336, -2.77240396,  2.45059156,  6.58385134],
         [-0.67048413,  4.94713163, -2.58514142, -1.13966978, -2.71731281,
          -1.93195271, -2.16469336, -2.77240396,  2.45059156,  6.58385134]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[7.25433540, 1.63671970, 9.16899300, 7.72352123, 9.30116463,
          8.51580429, 8.74854469, 9.35625458, 4.13325930]]])
number of violation:  0
Attack finished in 2.0270 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.60551602,  4.44975662, -2.52586031, -1.17441916, -2.69053745,
         -1.84135807, -2.20418835, -2.60371017,  2.23344636,  6.96228981]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 135, 1, 184] with unstable size 134 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 134, 1, 184] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 142, 1, 184] with unstable size 141 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 271, 1, 184] with unstable size 270 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 45, 1, 184] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [134]; unstable size 134; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 134, 1, 134] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 142, 1, 134] with unstable size 141 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 271, 1, 134] with unstable size 270 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 45, 1, 134] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 134] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [133]; unstable size 133; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 142, 1, 133] with unstable size 141 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 271, 1, 133] with unstable size 270 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 45, 1, 133] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [141]; unstable size 141; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 271, 1, 141] with unstable size 270 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 45, 1, 141] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [270]; unstable size 270; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 45, 1, 270] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 44] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.86643219, -0.31222081,  6.42672253,  5.27663136,  6.52000475,
          5.88227367,  5.26258326,  6.32583809,  1.83494329]]) None
best_l after optimization: 44.024269104003906
alpha/beta optimization time: 104.39287614822388
initial alpha-crown bounds: tensor([[ 5.06641054, -0.09300423,  6.63970184,  5.47167110,  6.73146152,
          6.09612083,  5.50258636,  6.56584740,  2.04347539]])
Worst class: (+ rhs) -0.09300422668457031
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 13.253086805343628
##### Instance 11 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.066410541534424.

Properties batch 1, size 1
Remaining timeout: 13.17836308479309
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.09300423]]) need to verify.
Model prediction is: tensor([-0.60551602,  4.44975662, -2.52586031, -1.17441916, -2.69053745,
        -1.84135807, -2.20418835, -2.60371017,  2.23344636,  6.96228981])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.09300423]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 184
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 131
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 130
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 138
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 256
Node /39 input 0: size torch.Size([100]) unstable 43
-----------------
# of unstable neurons: 882
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 9] 
split level 1: [/38, 81] 
split level 2: [/38, 54] 
split level 3: [/38, 52] 
split level 4: [/38, 17] 
split level 5: [/38, 96] 
split level 6: [/38, 0] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00012350082397460938
Time: prepare 0.0024    bound 0.0289    transfer 0.0001    finalize 0.0033    func 0.0346    
Accumulated time: func 0.0346    prepare 0.0031    bound 0.0289    transfer 0.0001    finalize 0.0033    
length of domains: 0
Time: pickout 0.0006    decision 0.0646    set_bounds 0.0185    solve 0.0347    add 0.0001    
Accumulated time: pickout 0.0006    decision 0.0646    set_bounds 0.0185    solve 0.0347    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.12596607208251953


Properties batch 2, size 1
Remaining timeout: 12.944543361663818
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.639701843261719.

Properties batch 3, size 1
Remaining timeout: 12.875284910202026
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.471671104431152.

Properties batch 4, size 1
Remaining timeout: 12.807644367218018
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.731461524963379.

Properties batch 5, size 1
Remaining timeout: 12.741278409957886
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.096120834350586.

Properties batch 6, size 1
Remaining timeout: 12.674850225448608
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.502586364746094.

Properties batch 7, size 1
Remaining timeout: 12.608214139938354
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.565847396850586.

Properties batch 8, size 1
Remaining timeout: 12.541207790374756
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.043475389480591.
Result: safe in 107.5270 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60509300, -0.33274263,  0.10930645,  1.50851929,  0.87856472,
          1.87502956,  1.78953278,  0.19552170, -1.72122288, -1.69736350]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.75928783, -0.28490776,  0.15365016,  1.50782204,  0.91353488,
           1.68479490,  2.33760047,  0.01938545, -1.88837910, -1.68415844],
         [-2.75928783, -0.28490776,  0.15365016,  1.50782204,  0.91353488,
           1.68479490,  2.33760047,  0.01938545, -1.88837910, -1.68415844]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.44408274,  1.96970272,  1.53114474,  0.17697287,  0.77126002,
          -0.65280557,  1.66540945,  3.57317400,  3.36895323]]])
number of violation:  1
Attack finished in 2.0209 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0221 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.11778617, -2.12340546, -0.59837043,  1.21484637,  1.32733965,
          3.19594550, -0.77030545,  6.83152914, -4.91337442, -2.04648304]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.29438949, -2.04642963, -0.50348437,  1.33702791,  1.25119424,
           3.29448152, -0.56211489,  6.37063885, -4.84481287, -2.00217533],
         [-2.29438949, -2.04642963, -0.50348437,  1.33702791,  1.25119424,
           3.29448152, -0.56211489,  6.37063885, -4.84481287, -2.00217533]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 8.66502857,  8.41706848,  6.87412310,  5.03361082,  5.11944485,
           3.07615733,  6.93275452, 11.21545219,  8.37281418]]])
number of violation:  0
Attack finished in 1.9799 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.11778617, -2.12340546, -0.59837043,  1.21484637,  1.32733965,
          3.19594550, -0.77030545,  6.83152914, -4.91337442, -2.04648304]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [304]; unstable size 304; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 121, 1, 304] with unstable size 120 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 123, 1, 304] with unstable size 122 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 95, 1, 304] with unstable size 94 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 199, 1, 304] with unstable size 198 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 23, 1, 304] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 304] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [120]; unstable size 120; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 123, 1, 120] with unstable size 122 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 95, 1, 120] with unstable size 94 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 199, 1, 120] with unstable size 198 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 23, 1, 120] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 120] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [122]; unstable size 122; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 95, 1, 122] with unstable size 94 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 199, 1, 122] with unstable size 198 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 23, 1, 122] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [94]; unstable size 94; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 199, 1, 94] with unstable size 198 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 23, 1, 94] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 94] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [198]; unstable size 198; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 23, 1, 198] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 198] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[7.04247618, 6.81728888, 5.69091702, 4.25835228, 4.39358711, 2.30205679,
         5.89692211, 9.94059944, 6.64641476]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.2700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.72174066,  5.27824974, -1.12545967, -0.97776794, -2.77850556,
         -2.48691154, -1.12504220, -2.72056437,  0.43593538,  6.22175837]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.76239395,  5.74780798, -1.12452257, -1.03298736, -2.90326166,
          -2.58018732, -1.02719104, -2.87848520,  0.56250328,  5.99867105],
         [-0.76239395,  5.74780798, -1.12452257, -1.03298736, -2.90326166,
          -2.58018732, -1.02719104, -2.87848520,  0.56250328,  5.99867105]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.76106501, 0.25086308, 7.12319374, 7.03165817, 8.90193272,
          8.57885838, 7.02586269, 8.87715721, 5.43616819]]])
number of violation:  0
Attack finished in 2.0458 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.72174066,  5.27824974, -1.12545967, -0.97776794, -2.77850556,
         -2.48691154, -1.12504220, -2.72056437,  0.43593538,  6.22175837]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 144, 1, 195] with unstable size 143 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 126, 1, 195] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 132, 1, 195] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 277, 1, 195] with unstable size 276 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 35, 1, 195] with unstable size 34 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [143]; unstable size 143; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 126, 1, 143] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 132, 1, 143] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 277, 1, 143] with unstable size 276 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 35, 1, 143] with unstable size 34 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 143] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [125]; unstable size 125; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 132, 1, 125] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 277, 1, 125] with unstable size 276 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 35, 1, 125] with unstable size 34 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [131]; unstable size 131; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 277, 1, 131] with unstable size 276 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 35, 1, 131] with unstable size 34 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [276]; unstable size 276; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 35, 1, 276] with unstable size 34 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 276] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [34]; unstable size 34; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 34] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.65141153, -1.15436113,  4.88171577,  4.84010792,  6.72888374,
          6.14262772,  4.87395716,  6.13423347,  3.56046891]]) None
best_l after optimization: 42.601158142089844
alpha/beta optimization time: 106.01806473731995
initial alpha-crown bounds: tensor([[ 4.86277103, -0.97426522,  5.09212685,  5.03984451,  6.92661333,
          6.35838795,  5.09771776,  6.42545033,  3.77251577]])
Worst class: (+ rhs) -0.9742652177810669
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 11.628646850585938
##### Instance 14 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.862771034240723.

Properties batch 1, size 1
Remaining timeout: 11.5608549118042
##### Instance 14 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.97426522]]) need to verify.
Model prediction is: tensor([-0.72174066,  5.27824974, -1.12545967, -0.97776794, -2.77850556,
        -2.48691154, -1.12504220, -2.72056437,  0.43593538,  6.22175837])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.97426522]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 195
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 139
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 123
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 127
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 263
Node /39 input 0: size torch.Size([100]) unstable 31
-----------------
# of unstable neurons: 878
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 9] 
split level 1: [/38, 63] 
split level 2: [/38, 54] 
split level 3: [/38, 84] 
split level 4: [/38, 5] 
split level 5: [/38, 69] 
split level 6: [/38, 62] 
pruning_in_iteration open status: True
ratio of positive domain = 87 / 128 = 0.6796875
pruning-in-iteration extra time: 0.022611618041992188
Time: prepare 0.0023    bound 0.6806    transfer 0.0006    finalize 0.0032    func 0.6869    
Accumulated time: func 0.6869    prepare 0.0032    bound 0.6806    transfer 0.0006    finalize 0.0032    
Current worst splitting domains lb-rhs (depth):
-0.45454 (7), -0.41826 (7), -0.41507 (7), -0.39634 (7), -0.38165 (7), -0.37463 (7), -0.37040 (7), -0.36272 (7), -0.35318 (7), -0.33816 (7), -0.32886 (7), -0.32473 (7), -0.31139 (7), -0.30998 (7), -0.30449 (7), -0.29425 (7), -0.28368 (7), -0.26508 (7), -0.23747 (7), -0.23219 (7), 
length of domains: 41
Time: pickout 0.0006    decision 0.0696    set_bounds 0.0189    solve 0.6869    add 0.0022    
Accumulated time: pickout 0.0006    decision 0.0696    set_bounds 0.0189    solve 0.6869    add 0.0022    
Current (lb-rhs): -0.45454466342926025
41 domains visited
Cumulative time: 0.7864315509796143

BaB round 2
batch: 41
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/38, 18] [/38, 18] [/38, 18] [/38, 18] [/38, 18] [/38, 18] [/38, 18] [/38, 18] [/38, 18] [/38, 18] 
split level 1: [/38, 59] [/38, 59] [/38, 59] [/38, 59] [/38, 59] [/38, 59] [/38, 59] [/38, 59] [/38, 59] [/38, 59] 
pruning_in_iteration open status: True
ratio of positive domain = 88 / 164 = 0.5365853658536586
pruning-in-iteration extra time: 0.03578591346740723
Time: prepare 0.0128    bound 1.0467    transfer 0.0006    finalize 0.0042    func 1.0643    
Accumulated time: func 1.7512    prepare 0.0164    bound 1.7273    transfer 0.0013    finalize 0.0074    
Current worst splitting domains lb-rhs (depth):
-0.41467 (9), -0.38503 (9), -0.37682 (9), -0.37534 (9), -0.35305 (9), -0.34621 (9), -0.34045 (9), -0.33332 (9), -0.33162 (9), -0.33043 (9), -0.32797 (9), -0.31803 (9), -0.31113 (9), -0.30851 (9), -0.29670 (9), -0.29403 (9), -0.29354 (9), -0.28512 (9), -0.28343 (9), -0.28233 (9), 
length of domains: 76
Time: pickout 0.0010    decision 0.1157    set_bounds 0.0155    solve 1.0644    add 0.0029    
Accumulated time: pickout 0.0016    decision 0.1852    set_bounds 0.0343    solve 1.7514    add 0.0051    
Current (lb-rhs): -0.41466808319091797
117 domains visited
Cumulative time: 1.9870984554290771

BaB round 3
batch: 76
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/38, 59] [/28, 668] [/28, 668] [/38, 59] [/38, 58] [/38, 58] [/38, 58] [/38, 58] [/38, 58] [/38, 58] 
pruning_in_iteration open status: True
ratio of positive domain = 50 / 152 = 0.32894736842105265
pruning-in-iteration extra time: 0.039594173431396484
Time: prepare 0.0133    bound 0.9979    transfer 0.0009    finalize 0.0043    func 1.0164    
Accumulated time: func 2.7676    prepare 0.0302    bound 2.7252    transfer 0.0022    finalize 0.0117    
Current worst splitting domains lb-rhs (depth):
-0.39812 (10), -0.36896 (10), -0.35979 (10), -0.35808 (10), -0.33661 (10), -0.32980 (10), -0.32400 (10), -0.31637 (10), -0.31397 (10), -0.31319 (10), -0.31161 (10), -0.30085 (10), -0.29435 (10), -0.29149 (10), -0.27983 (10), -0.27696 (10), -0.27659 (10), -0.26791 (10), -0.26639 (10), -0.26484 (10), 
length of domains: 102
Time: pickout 0.0014    decision 0.1907    set_bounds 0.0129    solve 1.0165    add 0.0032    
Accumulated time: pickout 0.0031    decision 0.3759    set_bounds 0.0472    solve 2.7679    add 0.0082    
Current (lb-rhs): -0.39812368154525757
219 domains visited
Cumulative time: 3.2127106189727783

BaB round 4
batch: 102
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/28, 420] [/28, 411] [/28, 669] [/25, 603] [/28, 669] [/25, 603] [/38, 79] [/28, 665] [/25, 411] [/25, 603] 
pruning_in_iteration open status: False
ratio of positive domain = 35 / 204 = 0.17156862745098034
pruning-in-iteration extra time: 6.222724914550781e-05
Time: prepare 0.0215    bound 1.2330    transfer 0.0001    finalize 0.0062    func 1.2608    
Accumulated time: func 4.0284    prepare 0.0521    bound 3.9582    transfer 0.0023    finalize 0.0179    
Current worst splitting domains lb-rhs (depth):
-0.38173 (11), -0.37524 (11), -0.35463 (11), -0.34516 (11), -0.34318 (11), -0.34024 (11), -0.33787 (11), -0.33535 (11), -0.32152 (11), -0.31559 (11), -0.31361 (11), -0.31002 (11), -0.30475 (11), -0.30236 (11), -0.30103 (11), -0.29738 (11), -0.29546 (11), -0.29328 (11), -0.29243 (11), -0.28811 (11), 
length of domains: 169
Time: pickout 0.0016    decision 0.2326    set_bounds 0.0114    solve 1.2610    add 0.0041    
Accumulated time: pickout 0.0047    decision 0.6085    set_bounds 0.0586    solve 4.0288    add 0.0123    
Current (lb-rhs): -0.38173139095306396
388 domains visited
Cumulative time: 4.724353075027466

BaB round 5
batch: 169
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/28, 165] [/28, 420] [/25, 934] [/28, 658] [/25, 934] [/28, 658] [/28, 668] [/28, 658] [/23, 685] [/38, 58] 
pruning_in_iteration open status: False
ratio of positive domain = 53 / 338 = 0.15680473372781067
pruning-in-iteration extra time: 6.0558319091796875e-05
Time: prepare 0.0369    bound 1.9074    transfer 0.0001    finalize 0.0103    func 1.9547    
Accumulated time: func 5.9831    prepare 0.0895    bound 5.8656    transfer 0.0023    finalize 0.0282    
Current worst splitting domains lb-rhs (depth):
-0.36926 (12), -0.35869 (12), -0.35819 (12), -0.35111 (12), -0.34179 (12), -0.33136 (12), -0.33111 (12), -0.32898 (12), -0.32708 (12), -0.32268 (12), -0.32263 (12), -0.32111 (12), -0.31754 (12), -0.31707 (12), -0.31545 (12), -0.30900 (12), -0.30407 (12), -0.30071 (12), -0.29684 (12), -0.29383 (12), 
length of domains: 284
Time: pickout 0.0023    decision 0.3667    set_bounds 0.0227    solve 1.9559    add 0.0073    
Accumulated time: pickout 0.0070    decision 0.9752    set_bounds 0.0813    solve 5.9847    add 0.0196    
Current (lb-rhs): -0.36926400661468506
672 domains visited
Cumulative time: 7.0806474685668945

BaB round 6
batch: 284
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/28, 411] [/25, 603] [/25, 602] [/23, 685] [/25, 604] [/23, 685] [/25, 604] [/28, 476] [/28, 669] [/28, 165] 
pruning_in_iteration open status: False
ratio of positive domain = 97 / 568 = 0.170774647887324
pruning-in-iteration extra time: 6.747245788574219e-05
Time: prepare 0.0654    bound 3.0773    transfer 0.0001    finalize 0.0162    func 3.1592    
Accumulated time: func 9.1423    prepare 0.1554    bound 8.9429    transfer 0.0024    finalize 0.0444    
Current worst splitting domains lb-rhs (depth):
-0.35743 (13), -0.34721 (13), -0.34622 (13), -0.33935 (13), -0.32772 (13), -0.31908 (13), -0.31780 (13), -0.31579 (13), -0.31424 (13), -0.31365 (13), -0.31113 (13), -0.31046 (13), -0.30971 (13), -0.30722 (13), -0.30646 (13), -0.30529 (13), -0.30490 (13), -0.30490 (13), -0.30370 (13), -0.30121 (13), 
length of domains: 470
Time: pickout 0.0035    decision 0.6517    set_bounds 0.0357    solve 3.1607    add 0.0104    
Accumulated time: pickout 0.0105    decision 1.6269    set_bounds 0.1170    solve 9.1454    add 0.0300    
Current (lb-rhs): -0.35742849111557007
1142 domains visited
Cumulative time: 10.944350719451904

BaB round 7
batch: 470
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/25, 604] [/23, 685] [/28, 686] [/25, 603] [/28, 665] [/25, 605] [/25, 604] [/28, 411] [/25, 934] [/25, 604] 
pruning_in_iteration open status: False
ratio of positive domain = 157 / 940 = 0.16702127659574473
pruning-in-iteration extra time: 7.081031799316406e-05
Time: prepare 0.1280    bound 5.1954    transfer 0.0001    finalize 0.0284    func 5.3520    
Accumulated time: func 14.4943    prepare 0.2838    bound 14.1383    transfer 0.0025    finalize 0.0728    
Current worst splitting domains lb-rhs (depth):
-0.34528 (14), -0.33597 (14), -0.33381 (14), -0.33379 (14), -0.32637 (14), -0.32604 (14), -0.32574 (14), -0.32017 (14), -0.31183 (14), -0.31097 (14), -0.30781 (14), -0.30615 (14), -0.30192 (14), -0.29979 (14), -0.29972 (14), -0.29944 (14), -0.29800 (14), -0.29795 (14), -0.29789 (14), -0.29721 (14), 
length of domains: 782
Time: pickout 0.0051    decision 1.3467    set_bounds 0.0660    solve 5.3524    add 0.0159    
Accumulated time: pickout 0.0156    decision 2.9737    set_bounds 0.1830    solve 14.4978    add 0.0459    
Current (lb-rhs): -0.34527507424354553
1924 domains visited
Time out!!!!!!!!
Result: unknown in 126.2832 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.42294180,  1.07294381, -0.57675242, -0.67303860, -1.33886766,
         -1.19513381,  0.86023968, -2.21474767,  4.47232676, -0.82995379]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.34206295,  1.53148007, -0.74876255, -0.70522857, -1.46883488,
          -1.24416590,  0.88357371, -2.19988370,  4.08702612, -0.47730821],
         [ 0.34206295,  1.53148007, -0.74876255, -0.70522857, -1.46883488,
          -1.24416590,  0.88357371, -2.19988370,  4.08702612, -0.47730821]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.74496317, 2.55554605, 4.83578873, 4.79225445, 5.55586100,
          5.33119202, 3.20345306, 6.28691006, 4.56433487]]])
number of violation:  0
Attack finished in 2.3974 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.42294180,  1.07294381, -0.57675242, -0.67303860, -1.33886766,
         -1.19513381,  0.86023968, -2.21474767,  4.47232676, -0.82995379]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [158]; unstable size 158; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 129, 1, 158] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 150, 1, 158] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 109, 1, 158] with unstable size 108 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 273, 1, 158] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 158] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [128]; unstable size 128; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 150, 1, 128] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 109, 1, 128] with unstable size 108 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 273, 1, 128] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 128] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [149]; unstable size 149; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 109, 1, 149] with unstable size 108 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 273, 1, 149] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 149] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [108]; unstable size 108; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 273, 1, 108] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 108] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [272]; unstable size 272; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 272] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.89564478, 0.84938216, 2.91480756, 2.90876985, 3.60401607, 3.25943470,
         1.15084219, 4.09900570, 2.39179087]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.6459 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.21342683, -0.78356957, -0.53388250,  2.92710948, -1.65694809,
          4.05456495, -0.42164603,  1.41458452, -2.72671556, -0.06014174]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.17857838, -0.53788608, -0.55254573,  2.93516612, -1.78527856,
           3.79773664, -0.32716334,  1.14549863, -2.61375713,  0.11673810],
         [-2.17857838, -0.53788608, -0.55254573,  2.93516612, -1.78527856,
           3.79773664, -0.32716334,  1.14549863, -2.61375713,  0.11673810]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.97631502, 4.33562279, 4.35028219, 0.86257052, 5.58301544,
          4.12489986, 2.65223742, 6.41149235, 3.68099785]]])
number of violation:  0
Attack finished in 2.0367 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.21342683, -0.78356957, -0.53388250,  2.92710948, -1.65694809,
          4.05456495, -0.42164603,  1.41458452, -2.72671556, -0.06014174]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 123, 1, 200] with unstable size 122 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 111, 1, 200] with unstable size 110 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 97, 1, 200] with unstable size 96 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 233, 1, 200] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 25, 1, 200] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [122]; unstable size 122; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 111, 1, 122] with unstable size 110 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 97, 1, 122] with unstable size 96 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 233, 1, 122] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 25, 1, 122] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [110]; unstable size 110; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 97, 1, 110] with unstable size 96 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 233, 1, 110] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 25, 1, 110] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 110] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [96]; unstable size 96; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 233, 1, 96] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 25, 1, 96] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [232]; unstable size 232; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 25, 1, 232] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.08349085, 2.67510891, 3.17856622, 0.42166352, 4.61537743, 3.18828821,
         1.53942943, 4.80332470, 2.07376647]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3220 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.88526648, -1.47133160, -0.16871579,  1.24273658,  0.53578866,
          0.92171890, -0.73974115,  2.54288697, -2.16645288,  0.18829703]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.02742469, -1.55789089, -0.11798461,  1.53039122,  0.41322783,
           1.07248187, -0.33553308,  2.07194543, -2.20125556,  0.15195924],
         [-1.02742469, -1.55789089, -0.11798461,  1.53039122,  0.41322783,
           1.07248187, -0.33553308,  2.07194543, -2.20125556,  0.15195924]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.09937000, 3.62983632, 2.18992996, 0.54155421, 1.65871763,
          0.99946356, 2.40747881, 4.27320147, 1.91998625]]])
number of violation:  0
Attack finished in 1.9581 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.88526648, -1.47133160, -0.16871579,  1.24273658,  0.53578866,
          0.92171890, -0.73974115,  2.54288697, -2.16645288,  0.18829703]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [234]; unstable size 234; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 147, 1, 234] with unstable size 146 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 174, 1, 234] with unstable size 173 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 135, 1, 234] with unstable size 134 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 288, 1, 234] with unstable size 287 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 51, 1, 234] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 234] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [146]; unstable size 146; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 174, 1, 146] with unstable size 173 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 135, 1, 146] with unstable size 134 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 288, 1, 146] with unstable size 287 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 51, 1, 146] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [173]; unstable size 173; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 135, 1, 173] with unstable size 134 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 288, 1, 173] with unstable size 287 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 51, 1, 173] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [134]; unstable size 134; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 288, 1, 134] with unstable size 287 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 51, 1, 134] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 134] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [287]; unstable size 287; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 51, 1, 287] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [50]; unstable size 50; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 50] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.03326678, -0.47762871, -0.25615358, -0.97832108,  0.10920644,
         -0.75548029, -0.03582954,  0.99681234, -1.26219749]]) None
best_l after optimization: 0.31499695777893066
alpha/beta optimization time: 111.11003112792969
initial alpha-crown bounds: tensor([[ 0.29886377,  0.06414199,  0.03234816, -0.73134303,  0.35972881,
         -0.50190318,  0.27820778,  1.40925479, -0.89430213]])
Worst class: (+ rhs) -0.8943021297454834
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 6.626255989074707
##### Instance 17 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.2988637685775757.

Properties batch 1, size 1
Remaining timeout: 6.553532838821411
##### Instance 17 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.06414198875427246.

Properties batch 2, size 1
Remaining timeout: 6.4859325885772705
##### Instance 17 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.0323481559753418.

Properties batch 3, size 1
Remaining timeout: 6.419420003890991
##### Instance 17 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.73134303]]) need to verify.
Model prediction is: tensor([-0.88526648, -1.47133160, -0.16871579,  1.24273658,  0.53578866,
         0.92171890, -0.73974115,  2.54288697, -2.16645288,  0.18829703])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.73134303]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 234
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 142
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 168
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 133
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 273
Node /39 input 0: size torch.Size([100]) unstable 47
-----------------
# of unstable neurons: 997
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 6] 
split level 1: [/38, 56] 
split level 2: [/38, 23] 
split level 3: [/38, 43] 
split level 4: [/38, 2] 
split level 5: [/38, 90] 
split level 6: [/38, 79] 
pruning_in_iteration open status: True
ratio of positive domain = 91 / 128 = 0.7109375
pruning-in-iteration extra time: 0.022800922393798828
Time: prepare 0.0029    bound 0.6926    transfer 0.0007    finalize 0.0033    func 0.6995    
Accumulated time: func 0.6995    prepare 0.0037    bound 0.6926    transfer 0.0007    finalize 0.0033    
Current worst splitting domains lb-rhs (depth):
-0.38859 (7), -0.34242 (7), -0.31824 (7), -0.29485 (7), -0.28766 (7), -0.27128 (7), -0.26716 (7), -0.25347 (7), -0.24687 (7), -0.24454 (7), -0.22084 (7), -0.21671 (7), -0.21617 (7), -0.19655 (7), -0.18694 (7), -0.18211 (7), -0.17963 (7), -0.17679 (7), -0.16810 (7), -0.16058 (7), 
length of domains: 37
Time: pickout 0.0005    decision 0.0686    set_bounds 0.0199    solve 0.6996    add 0.0019    
Accumulated time: pickout 0.0005    decision 0.0686    set_bounds 0.0199    solve 0.6996    add 0.0019    
Current (lb-rhs): -0.38859081268310547
37 domains visited
Cumulative time: 0.7977392673492432

BaB round 2
batch: 37
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/38, 66] [/38, 66] [/38, 66] [/38, 66] [/38, 66] [/38, 66] [/38, 66] [/38, 66] [/38, 66] [/38, 66] 
split level 1: [/38, 81] [/38, 81] [/38, 81] [/38, 81] [/38, 81] [/38, 81] [/38, 81] [/38, 81] [/38, 81] [/38, 81] 
pruning_in_iteration open status: True
ratio of positive domain = 34 / 148 = 0.22972972972972971
pruning-in-iteration extra time: 0.04485797882080078
Time: prepare 0.0116    bound 0.9927    transfer 0.0007    finalize 0.0038    func 1.0089    
Accumulated time: func 1.7084    prepare 0.0156    bound 1.6853    transfer 0.0014    finalize 0.0071    
Current worst splitting domains lb-rhs (depth):
-0.30531 (9), -0.29685 (9), -0.28092 (9), -0.27475 (9), -0.25260 (9), -0.25132 (9), -0.24264 (9), -0.24234 (9), -0.23535 (9), -0.22219 (9), -0.21627 (9), -0.21093 (9), -0.20185 (9), -0.20048 (9), -0.19865 (9), -0.19358 (9), -0.19083 (9), -0.18881 (9), -0.18622 (9), -0.18034 (9), 
length of domains: 114
Time: pickout 0.0012    decision 0.1034    set_bounds 0.0141    solve 1.0091    add 0.0034    
Accumulated time: pickout 0.0017    decision 0.1720    set_bounds 0.0339    solve 1.7087    add 0.0054    
Current (lb-rhs): -0.30530762672424316
151 domains visited
Cumulative time: 1.9296720027923584

BaB round 3
batch: 114
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/38, 52] [/38, 52] [/38, 70] [/38, 70] [/38, 52] [/38, 70] [/38, 70] [/38, 70] [/38, 70] [/38, 70] 
pruning_in_iteration open status: True
ratio of positive domain = 56 / 228 = 0.24561403508771928
pruning-in-iteration extra time: 0.06416010856628418
Time: prepare 0.0176    bound 1.3686    transfer 0.0011    finalize 0.0058    func 1.3932    
Accumulated time: func 3.1016    prepare 0.0337    bound 3.0539    transfer 0.0025    finalize 0.0129    
Current worst splitting domains lb-rhs (depth):
-0.26800 (10), -0.26767 (10), -0.26031 (10), -0.25856 (10), -0.24374 (10), -0.24197 (10), -0.23773 (10), -0.23496 (10), -0.21628 (10), -0.21458 (10), -0.21119 (10), -0.20977 (10), -0.20685 (10), -0.20528 (10), -0.20023 (10), -0.19881 (10), -0.19846 (10), -0.19517 (10), -0.18436 (10), -0.18283 (10), 
length of domains: 172
Time: pickout 0.0018    decision 0.2579    set_bounds 0.0179    solve 1.3933    add 0.0043    
Accumulated time: pickout 0.0035    decision 0.4299    set_bounds 0.0518    solve 3.1020    add 0.0096    
Current (lb-rhs): -0.26799583435058594
323 domains visited
Cumulative time: 3.606109619140625

BaB round 4
batch: 172
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/38, 52] [/38, 70] [/38, 52] [/38, 52] [/38, 52] [/38, 52] [/38, 52] [/38, 52] [/38, 70] [/38, 70] 
pruning_in_iteration open status: True
ratio of positive domain = 82 / 344 = 0.2383720930232558
pruning-in-iteration extra time: 0.0984039306640625
Time: prepare 0.0271    bound 1.9819    transfer 0.0014    finalize 0.0085    func 2.0191    
Accumulated time: func 5.1207    prepare 0.0613    bound 5.0358    transfer 0.0039    finalize 0.0215    
Current worst splitting domains lb-rhs (depth):
-0.23192 (11), -0.23192 (11), -0.22480 (11), -0.22254 (11), -0.22070 (11), -0.21937 (11), -0.21099 (11), -0.21072 (11), -0.20787 (11), -0.20546 (11), -0.20168 (11), -0.19797 (11), -0.19789 (11), -0.19622 (11), -0.18919 (11), -0.18687 (11), -0.18128 (11), -0.17890 (11), -0.17520 (11), -0.17389 (11), 
length of domains: 262
Time: pickout 0.0025    decision 0.3837    set_bounds 0.0253    solve 2.0193    add 0.0063    
Accumulated time: pickout 0.0060    decision 0.8136    set_bounds 0.0772    solve 5.1213    add 0.0160    
Current (lb-rhs): -0.2319166660308838
585 domains visited
Cumulative time: 6.044790029525757

BaB round 5
batch: 262
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/38, 64] [/38, 64] [/38, 64] [/38, 64] [/38, 64] [/38, 64] [/38, 64] [/38, 64] [/38, 64] [/38, 64] 
pruning_in_iteration open status: True
ratio of positive domain = 302 / 524 = 0.5763358778625954
pruning-in-iteration extra time: 0.09009981155395508
Time: prepare 0.0452    bound 2.0472    transfer 0.0016    finalize 0.0126    func 2.1080    
Accumulated time: func 7.2287    prepare 0.1070    bound 7.0831    transfer 0.0055    finalize 0.0341    
Current worst splitting domains lb-rhs (depth):
-0.19929 (12), -0.19886 (12), -0.19303 (12), -0.19083 (12), -0.18603 (12), -0.18517 (12), -0.17861 (12), -0.17803 (12), -0.17739 (12), -0.17479 (12), -0.17248 (12), -0.16873 (12), -0.16721 (12), -0.16508 (12), -0.15910 (12), -0.15672 (12), -0.15123 (12), -0.14829 (12), -0.14392 (12), -0.14337 (12), 
length of domains: 222
Time: pickout 0.0030    decision 0.6295    set_bounds 0.0387    solve 2.1082    add 0.0061    
Accumulated time: pickout 0.0090    decision 1.4431    set_bounds 0.1159    solve 7.2295    add 0.0221    
Current (lb-rhs): -0.1992940902709961
807 domains visited
Time out!!!!!!!!
Result: unknown in 122.5202 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.92981529,  2.75443220, -1.89550686, -1.63131785, -0.97322351,
         -3.01011610, -2.78081059, -1.56189728,  3.80379081,  3.36471176]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.95784235,  2.93913889, -1.99929214, -1.72485614, -0.98309344,
          -2.94692707, -2.94685197, -1.21862495,  3.19268274,  3.72986221],
         [ 1.95784235,  2.93913889, -1.99929214, -1.72485614, -0.98309344,
          -2.94692707, -2.94685197, -1.21862495,  3.19268274,  3.72986221]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.23484039,  0.25354385,  5.19197464,  4.91753864,  4.17577600,
           6.13960981,  6.13953400,  4.41130733, -0.53717875]]])
number of violation:  1
Attack finished in 2.1023 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.1035 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.65105224, -2.12599516,  1.07349503,  2.00273466,  2.07796144,
          2.42445731,  5.23274231,  1.15509474, -4.51580143, -3.67373085]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.58726144, -2.21040487,  1.00550568,  2.01053739,  2.14234328,
           2.64524961,  4.65023899,  1.52985287, -4.53333712, -3.65282059],
         [-3.58726144, -2.21040487,  1.00550568,  2.01053739,  2.14234328,
           2.64524961,  4.65023899,  1.52985287, -4.53333712, -3.65282059]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[8.23750019, 6.86064386, 3.64473343, 2.63970160, 2.50789571,
          2.00498939, 3.12038612, 9.18357658, 8.30305958]]])
number of violation:  0
Attack finished in 2.1527 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-3.65105224, -2.12599516,  1.07349503,  2.00273466,  2.07796144,
          2.42445731,  5.23274231,  1.15509474, -4.51580143, -3.67373085]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [131]; unstable size 131; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 143, 1, 131] with unstable size 142 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 133, 1, 131] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 150, 1, 131] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 318, 1, 131] with unstable size 317 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 34, 1, 131] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [142]; unstable size 142; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 133, 1, 142] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 150, 1, 142] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 318, 1, 142] with unstable size 317 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 34, 1, 142] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [132]; unstable size 132; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 150, 1, 132] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 318, 1, 132] with unstable size 317 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 34, 1, 132] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [149]; unstable size 149; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 318, 1, 149] with unstable size 317 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 34, 1, 149] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [317]; unstable size 317; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 34, 1, 317] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 317] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [33]; unstable size 33; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 33] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.17884922, 4.49709845, 2.22228742, 1.37035453, 0.80723858, 0.50647753,
         0.50525999, 6.94527626, 6.09164953]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4746 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.79784322,  1.21323907, -0.94231200, -0.03117138,  1.09816337,
          0.62038815, -2.37945676,  4.26114416, -3.94444156,  1.90226543]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.64607799,  1.85544860, -1.00442839, -0.13503543,  0.57196820,
           0.32745418, -2.43910646,  3.37107277, -3.36994767,  2.46862364],
         [-1.64607799,  1.85544860, -1.00442839, -0.13503543,  0.57196820,
           0.32745418, -2.43910646,  3.37107277, -3.36994767,  2.46862364]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.01715088, 1.51562417, 4.37550116, 3.50610828, 2.79910469,
          3.04361868, 5.81017971, 6.74102020, 0.90244889]]])
number of violation:  0
Attack finished in 2.3970 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.79784322,  1.21323907, -0.94231200, -0.03117138,  1.09816337,
          0.62038815, -2.37945676,  4.26114416, -3.94444156,  1.90226543]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [301]; unstable size 301; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 136, 1, 301] with unstable size 135 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 117, 1, 301] with unstable size 116 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 95, 1, 301] with unstable size 94 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 201, 1, 301] with unstable size 200 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 301] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 301] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [135]; unstable size 135; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 117, 1, 135] with unstable size 116 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 95, 1, 135] with unstable size 94 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 201, 1, 135] with unstable size 200 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 135] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 135] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [116]; unstable size 116; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 95, 1, 116] with unstable size 94 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 201, 1, 116] with unstable size 200 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 116] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 116] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [94]; unstable size 94; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 201, 1, 94] with unstable size 200 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 94] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 94] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [200]; unstable size 200; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 200] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.13069153, -0.32729173,  2.54947019,  1.95154655,  1.60119057,
          1.50281990,  3.83076882,  5.12336302, -0.75267518]]) None
best_l after optimization: 20.278600692749023
alpha/beta optimization time: 81.67333197593689
initial alpha-crown bounds: tensor([[ 3.32742071, -0.08560085,  2.71698284,  2.12804079,  1.72192848,
          1.67798841,  4.03794384,  5.30264759, -0.54875016]])
Worst class: (+ rhs) -0.5487501621246338
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 35.62315487861633
##### Instance 20 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.327420711517334.

Properties batch 1, size 1
Remaining timeout: 35.546592473983765
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.08560085]]) need to verify.
Model prediction is: tensor([-1.79784322,  1.21323907, -0.94231200, -0.03117138,  1.09816337,
         0.62038815, -2.37945676,  4.26114416, -3.94444156,  1.90226543])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08560085]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 301
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 129
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 111
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 91
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 189
Node /39 input 0: size torch.Size([100]) unstable 32
-----------------
# of unstable neurons: 853
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 0] 
split level 1: [/38, 4] 
split level 2: [/28, 731] 
split level 3: [/28, 434] 
split level 4: [/38, 60] 
split level 5: [/38, 51] 
split level 6: [/38, 63] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.1961669921875e-05
Time: prepare 0.0051    bound 0.0398    transfer 0.0001    finalize 0.0036    func 0.0486    
Accumulated time: func 0.0486    prepare 0.0058    bound 0.0398    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0004    decision 0.0695    set_bounds 0.0226    solve 0.0487    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0695    set_bounds 0.0226    solve 0.0487    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1489887237548828


Properties batch 2, size 1
Remaining timeout: 35.289241790771484
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.716982841491699.

Properties batch 3, size 1
Remaining timeout: 35.21769905090332
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.1280407905578613.

Properties batch 4, size 1
Remaining timeout: 35.14646530151367
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.7219284772872925.

Properties batch 5, size 1
Remaining timeout: 35.07746911048889
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.6779884099960327.

Properties batch 6, size 1
Remaining timeout: 35.005743980407715
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.0379438400268555.

Properties batch 7, size 1
Remaining timeout: 34.937488317489624
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.302647590637207.

Properties batch 8, size 1
Remaining timeout: 34.865625619888306
##### Instance 20 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.54875016]]) need to verify.
Model prediction is: tensor([-1.79784322,  1.21323907, -0.94231200, -0.03117138,  1.09816337,
         0.62038815, -2.37945676,  4.26114416, -3.94444156,  1.90226543])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.54875016]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 301
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 129
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 111
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 91
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 189
Node /39 input 0: size torch.Size([100]) unstable 32
-----------------
# of unstable neurons: 853
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 60] 
split level 1: [/38, 51] 
split level 2: [/38, 4] 
split level 3: [/28, 434] 
split level 4: [/38, 2] 
split level 5: [/25, 563] 
split level 6: [/28, 420] 
pruning_in_iteration open status: True
ratio of positive domain = 115 / 128 = 0.8984375
pruning-in-iteration extra time: 0.015301942825317383
Time: prepare 0.0071    bound 0.6188    transfer 0.0006    finalize 0.0032    func 0.6297    
Accumulated time: func 0.6297    prepare 0.0078    bound 0.6188    transfer 0.0006    finalize 0.0032    
Current worst splitting domains lb-rhs (depth):
-0.17707 (7), -0.17157 (7), -0.14615 (7), -0.13953 (7), -0.13574 (7), -0.12987 (7), -0.10047 (7), -0.09400 (7), -0.07632 (7), -0.06493 (7), -0.04380 (7), -0.03121 (7), -0.01017 (7), 
length of domains: 13
Time: pickout 0.0004    decision 0.0731    set_bounds 0.0206    solve 0.6297    add 0.0015    
Accumulated time: pickout 0.0004    decision 0.0731    set_bounds 0.0206    solve 0.6297    add 0.0015    
Current (lb-rhs): -0.17707037925720215
13 domains visited
Cumulative time: 0.7340080738067627

BaB round 2
batch: 13
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/28, 731] [/28, 731] [/28, 731] [/28, 731] [/28, 731] [/28, 731] [/28, 731] [/28, 731] [/28, 731] [/28, 731] 
split level 1: [/25, 556] [/25, 556] [/25, 556] [/25, 556] [/25, 556] [/25, 556] [/25, 556] [/25, 556] [/25, 556] [/25, 556] 
split level 2: [/28, 685] [/28, 685] [/28, 685] [/28, 685] [/28, 685] [/28, 685] [/28, 685] [/28, 685] [/28, 685] [/28, 685] 
pruning_in_iteration open status: True
ratio of positive domain = 86 / 104 = 0.8269230769230769
pruning-in-iteration extra time: 0.014940261840820312
Time: prepare 0.0117    bound 0.5387    transfer 0.0006    finalize 0.0026    func 0.5536    
Accumulated time: func 1.1833    prepare 0.0200    bound 1.1575    transfer 0.0012    finalize 0.0058    
Current worst splitting domains lb-rhs (depth):
-0.11330 (10), -0.11327 (10), -0.10852 (10), -0.10636 (10), -0.08044 (10), -0.08042 (10), -0.07485 (10), -0.07320 (10), -0.07204 (10), -0.06619 (10), -0.06491 (10), -0.06216 (10), -0.03456 (10), -0.02964 (10), -0.02659 (10), -0.02493 (10), -0.00915 (10), -0.00604 (10), 
length of domains: 18
Time: pickout 0.0012    decision 0.0640    set_bounds 0.0151    solve 0.5537    add 0.0017    
Accumulated time: pickout 0.0016    decision 0.1372    set_bounds 0.0358    solve 1.1834    add 0.0033    
Current (lb-rhs): -0.11329805850982666
31 domains visited
Cumulative time: 1.370821475982666

BaB round 3
batch: 18
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/28, 739] [/28, 739] [/28, 739] [/28, 739] [/28, 739] [/28, 739] [/28, 739] [/28, 739] [/28, 739] [/38, 27] 
split level 1: [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/28, 739] 
split level 2: [/28, 427] [/28, 427] [/28, 427] [/28, 427] [/28, 427] [/28, 427] [/28, 427] [/28, 427] [/28, 427] [/28, 427] 
pruning_in_iteration open status: True
ratio of positive domain = 125 / 144 = 0.8680555555555556
pruning-in-iteration extra time: 0.04449963569641113
Time: prepare 0.0156    bound 0.9917    transfer 0.0006    finalize 0.0037    func 1.0117    
Accumulated time: func 2.1950    prepare 0.0359    bound 2.1492    transfer 0.0018    finalize 0.0095    
Current worst splitting domains lb-rhs (depth):
-0.05575 (13), -0.05334 (13), -0.04799 (13), -0.04747 (13), -0.03922 (13), -0.03663 (13), -0.03523 (13), -0.03151 (13), -0.02238 (13), -0.02078 (13), -0.01476 (13), -0.01466 (13), -0.01402 (13), -0.00686 (13), -0.00609 (13), -0.00471 (13), -0.00230 (13), -0.00098 (13), -0.00034 (13), 
length of domains: 19
Time: pickout 0.0010    decision 0.0693    set_bounds 0.0185    solve 1.0118    add 0.0019    
Accumulated time: pickout 0.0026    decision 0.2065    set_bounds 0.0542    solve 2.1952    add 0.0052    
Current (lb-rhs): -0.05575084686279297
50 domains visited
Cumulative time: 2.4748306274414062

BaB round 4
batch: 19
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/28, 676] [/38, 0] [/25, 555] [/28, 676] [/28, 107] [/38, 0] [/28, 107] [/25, 555] [/28, 676] [/25, 555] 
split level 1: [/25, 930] [/25, 930] [/28, 107] [/38, 0] [/38, 0] [/25, 930] [/25, 930] [/28, 107] [/25, 555] [/28, 107] 
split level 2: [/38, 0] [/23, 882] [/38, 0] [/25, 930] [/23, 882] [/23, 882] [/38, 0] [/38, 0] [/38, 0] [/38, 0] 
pruning_in_iteration open status: True
ratio of positive domain = 150 / 152 = 0.9868421052631579
pruning-in-iteration extra time: 0.010986804962158203
Time: prepare 0.0424    bound 1.3970    transfer 0.0007    finalize 0.0060    func 1.4462    
Accumulated time: func 3.6412    prepare 0.0787    bound 3.5462    transfer 0.0025    finalize 0.0155    
Current worst splitting domains lb-rhs (depth):
-0.00397 (16), -0.00305 (16), 
length of domains: 2
Time: pickout 0.0070    decision 0.1593    set_bounds 0.1245    solve 1.4463    add 0.0016    
Accumulated time: pickout 0.0097    decision 0.3658    set_bounds 0.1787    solve 3.6415    add 0.0068    
Current (lb-rhs): -0.003968715667724609
52 domains visited
Cumulative time: 4.215440511703491

BaB round 5
batch: 2
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/28, 676] [/28, 676] 
split level 1: [/25, 486] [/25, 486] 
split level 2: [/25, 123] [/25, 123] 
split level 3: [/38, 14] [/38, 14] 
split level 4: [/28, 107] [/28, 107] 
split level 5: [/25, 930] [/23, 882] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.553794860839844e-05
Time: prepare 0.0185    bound 0.0448    transfer 0.0001    finalize 0.0032    func 0.0665    
Accumulated time: func 3.7077    prepare 0.0980    bound 3.5910    transfer 0.0026    finalize 0.0186    
length of domains: 0
Time: pickout 0.0015    decision 0.0923    set_bounds 0.0326    solve 0.0666    add 0.0001    
Accumulated time: pickout 0.0112    decision 0.4580    set_bounds 0.2114    solve 3.7081    add 0.0069    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
52 domains visited
Cumulative time: 4.410192966461182

Result: safe in 89.6528 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 5.99469662, -4.57457399,  5.09582853,  1.93379259,  2.13703561,
          0.52180469,  0.33098590, -2.33997655, -3.57006049, -5.52965927]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 5.83782959, -4.68182659,  5.16445589,  1.96676803,  2.17994761,
           0.55409813,  0.36924365, -2.25673318, -3.55369425, -5.58021307],
         [ 5.83782959, -4.68182659,  5.16445589,  1.96676803,  2.17994761,
           0.55409813,  0.36924365, -2.25673318, -3.55369425, -5.58021307]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[10.51965618,  0.67337370,  3.87106156,  3.65788198,  5.28373146,
           5.46858597,  8.09456253,  9.39152241, 11.41804123]]])
number of violation:  0
Attack finished in 2.7316 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 5.99469662, -4.57457399,  5.09582853,  1.93379259,  2.13703561,
          0.52180469,  0.33098590, -2.33997655, -3.57006049, -5.52965927]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 209, 1, 179] with unstable size 208 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 64, 1, 179] with unstable size 63 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 36, 1, 179] with unstable size 35 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 68, 1, 179] with unstable size 67 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 11, 1, 179] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [208]; unstable size 208; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 64, 1, 208] with unstable size 63 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 36, 1, 208] with unstable size 35 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 68, 1, 208] with unstable size 67 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 11, 1, 208] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [63]; unstable size 63; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 36, 1, 63] with unstable size 35 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 68, 1, 63] with unstable size 67 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 11, 1, 63] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 63] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [35]; unstable size 35; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 68, 1, 35] with unstable size 67 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 11, 1, 35] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [67]; unstable size 67; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 11, 1, 67] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 67] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.91791153,  0.55435950,  3.56775761,  3.37792659,  4.92133522,
          5.13259077,  7.65965080,  9.02373981, 10.92398071]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 3.0822 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.11877584, -2.46503019,  1.61583221,  0.15628585,  1.94059968,
         -0.68548304, -0.02668882, -2.29714346,  1.74312282, -3.10035849]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.11877537, -2.46503067,  1.61583209,  0.15628573,  1.94059968,
          -0.68548322, -0.02668863, -2.29714346,  1.74312282, -3.10035801],
         [ 3.11877537, -2.46503067,  1.61583209,  0.15628573,  1.94059968,
          -0.68548322, -0.02668863, -2.29714346,  1.74312282, -3.10035801]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-1.17817569,  4.40563011,  0.32476759,  1.78431392,  2.62608290,
           1.96728826,  4.23774338,  0.19747686,  5.04095745]]])
number of violation:  1
Result: unsafe-pgd in 0.0044 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.40377140,  6.06235027, -3.55884337, -2.27402997, -1.71075988,
         -1.64471245, -2.50855017, -0.15922911, -3.85190940, 10.04929638]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.43600589,  6.74200487, -3.60343862, -2.38416624, -1.78032780,
          -1.83600199, -2.42992496, -0.46049815, -3.76063514,  9.94883347],
         [-0.43600589,  6.74200487, -3.60343862, -2.38416624, -1.78032780,
          -1.83600199, -2.42992496, -0.46049815, -3.76063514,  9.94883347]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[10.38483906,  3.20682859, 13.55227184, 12.33300018, 11.72916126,
          11.78483582, 12.37875938, 10.40933228, 13.70946980]]])
number of violation:  0
Attack finished in 2.5804 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.40377140,  6.06235027, -3.55884337, -2.27402997, -1.71075988,
         -1.64471245, -2.50855017, -0.15922911, -3.85190940, 10.04929638]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 121, 1, 226] with unstable size 120 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 126, 1, 226] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 131, 1, 226] with unstable size 130 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 240, 1, 226] with unstable size 239 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 22, 1, 226] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [120]; unstable size 120; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 126, 1, 120] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 131, 1, 120] with unstable size 130 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 240, 1, 120] with unstable size 239 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 22, 1, 120] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 120] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [125]; unstable size 125; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 131, 1, 125] with unstable size 130 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 240, 1, 125] with unstable size 239 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 22, 1, 125] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [130]; unstable size 130; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 240, 1, 130] with unstable size 239 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 22, 1, 130] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [239]; unstable size 239; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 22, 1, 239] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 8.33701706,  1.80647421, 11.55141258, 10.15007782,  9.71351814,
          9.32526779, 10.06853485,  7.75818825, 12.02419090]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.9172 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.17617854, -4.57768917,  2.62506008,  1.03024471,  3.57294297,
          1.46281087,  1.09597158,  2.21497750, -4.09617233, -3.15192604]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.17617851, -4.57768917,  2.62505913,  1.03024483,  3.57294273,
           1.46281099,  1.09597111,  2.21497750, -4.09617186, -3.15192509],
         [-0.17617851, -4.57768917,  2.62505913,  1.03024483,  3.57294273,
           1.46281099,  1.09597111,  2.21497750, -4.09617186, -3.15192509]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.63898945,  6.04050016, -1.16224813,  0.43256617, -2.11013174,
           0.36683989, -0.75216651,  5.55898333,  4.61473656]]])
number of violation:  3
Result: unsafe-pgd in 0.0043 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.84977973, -2.70313978,  3.04675078,  1.25639069,  1.79799342,
          1.28737366,  1.23368263, -0.13059656, -2.26248384, -1.67611742]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.92634773, -2.84424686,  2.87311482,  1.25527155,  2.06344390,
           1.34638751,  1.26463842,  0.13290058, -2.40978026, -1.75529933],
         [-1.92634773, -2.84424686,  2.87311482,  1.25527155,  2.06344390,
           1.34638751,  1.26463842,  0.13290058, -2.40978026, -1.75529933]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.79946232, 5.71736145, 1.61784327, 0.80967093, 1.52672732,
          1.60847640, 2.74021387, 5.28289509, 4.62841320]]])
number of violation:  0
Attack finished in 2.3907 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.84977973, -2.70313978,  3.04675078,  1.25639069,  1.79799342,
          1.28737366,  1.23368263, -0.13059656, -2.26248384, -1.67611742]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [166]; unstable size 166; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 183, 1, 166] with unstable size 182 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 131, 1, 166] with unstable size 130 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 128, 1, 166] with unstable size 127 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 272, 1, 166] with unstable size 271 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 38, 1, 166] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 166] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [182]; unstable size 182; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 131, 1, 182] with unstable size 130 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 128, 1, 182] with unstable size 127 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 272, 1, 182] with unstable size 271 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 38, 1, 182] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [130]; unstable size 130; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 128, 1, 130] with unstable size 127 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 272, 1, 130] with unstable size 271 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 38, 1, 130] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 130] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [127]; unstable size 127; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 272, 1, 127] with unstable size 271 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 38, 1, 127] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 127] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [271]; unstable size 271; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 38, 1, 271] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 271] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [37]; unstable size 37; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 37] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.04965138,  3.10357523,  0.49594629, -0.10609317,  0.19625974,
          0.44278237,  0.85840166,  3.10490012,  1.85810888]]) None
best_l after optimization: 14.39521598815918
alpha/beta optimization time: 101.32896566390991
initial alpha-crown bounds: tensor([[ 3.21345472,  3.30163026,  0.58759308, -0.00834414,  0.31458306,
          0.55244756,  1.04080105,  3.31116390,  2.08188677]])
Worst class: (+ rhs) -0.008344143629074097
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 15.97922158241272
##### Instance 25 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.2134547233581543.

Properties batch 1, size 1
Remaining timeout: 15.90337586402893
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.3016302585601807.

Properties batch 2, size 1
Remaining timeout: 15.832756996154785
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.5875930786132812.

Properties batch 3, size 1
Remaining timeout: 15.762702941894531
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.00834414]]) need to verify.
Model prediction is: tensor([-1.84977973, -2.70313978,  3.04675078,  1.25639069,  1.79799342,
         1.28737366,  1.23368263, -0.13059656, -2.26248384, -1.67611742])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.00834414]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 166
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 175
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 122
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 120
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 259
Node /39 input 0: size torch.Size([100]) unstable 35
-----------------
# of unstable neurons: 877
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 93] 
split level 1: [/38, 55] 
split level 2: [/38, 15] 
split level 3: [/38, 60] 
split level 4: [/38, 51] 
split level 5: [/38, 96] 
split level 6: [/38, 20] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 5.817413330078125e-05
Time: prepare 0.0035    bound 0.0421    transfer 0.0001    finalize 0.0038    func 0.0495    
Accumulated time: func 0.0495    prepare 0.0044    bound 0.0421    transfer 0.0001    finalize 0.0038    
length of domains: 0
Time: pickout 0.0006    decision 0.0869    set_bounds 0.0261    solve 0.0496    add 0.0001    
Accumulated time: pickout 0.0006    decision 0.0869    set_bounds 0.0261    solve 0.0496    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.17320966720581055


Properties batch 4, size 1
Remaining timeout: 15.47454309463501
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.31458306312561035.

Properties batch 5, size 1
Remaining timeout: 15.403099775314331
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.5524475574493408.

Properties batch 6, size 1
Remaining timeout: 15.333017349243164
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.0408010482788086.

Properties batch 7, size 1
Remaining timeout: 15.262796640396118
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.311163902282715.

Properties batch 8, size 1
Remaining timeout: 15.190007209777832
##### Instance 25 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.0818867683410645.
Result: safe in 104.8813 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.35299563, -2.55650139,  1.17330647,  1.78660440,  2.84899783,
          1.88430357,  1.40626442,  1.91250777, -3.70264959, -2.39983988]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.29635119, -2.54171371,  1.15487897,  1.80984044,  2.58311915,
           1.98510861,  1.09980667,  2.27532721, -3.77932382, -2.29069328],
         [-2.29635119, -2.54171371,  1.15487897,  1.80984044,  2.58311915,
           1.98510861,  1.09980667,  2.27532721, -3.77932382, -2.29069328]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.87947035, 5.12483311, 1.42824018, 0.77327871, 0.59801054,
          1.48331249, 0.30779243, 6.36244249, 4.87381268]]])
number of violation:  0
Attack finished in 2.3235 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.35299563, -2.55650139,  1.17330647,  1.78660440,  2.84899783,
          1.88430357,  1.40626442,  1.91250777, -3.70264959, -2.39983988]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [274]; unstable size 274; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 169, 1, 274] with unstable size 168 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 152, 1, 274] with unstable size 151 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 153, 1, 274] with unstable size 152 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 350, 1, 274] with unstable size 349 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 41, 1, 274] with unstable size 40 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 274] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [168]; unstable size 168; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 152, 1, 168] with unstable size 151 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 153, 1, 168] with unstable size 152 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 350, 1, 168] with unstable size 349 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 41, 1, 168] with unstable size 40 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [151]; unstable size 151; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 153, 1, 151] with unstable size 152 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 350, 1, 151] with unstable size 349 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 41, 1, 151] with unstable size 40 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [152]; unstable size 152; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 350, 1, 152] with unstable size 349 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 41, 1, 152] with unstable size 40 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [349]; unstable size 349; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 41, 1, 349] with unstable size 40 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 349] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [40]; unstable size 40; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 40] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.02847338,  1.32357788, -0.62547386, -1.09529030, -1.34794641,
         -0.34777236, -1.10911822,  3.51182151,  1.53273344]]) None
best_l after optimization: 6.375739097595215
alpha/beta optimization time: 130.49586820602417
initial alpha-crown bounds: tensor([[ 2.37213206,  1.71934414, -0.36679497, -0.88152361, -1.11714244,
         -0.14839745, -0.86801910,  3.79085207,  1.87528801]])
Worst class: (+ rhs) -1.1171424388885498
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -13.136733293533325
##### Instance 26 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.3721320629119873.

Properties batch 1, size 1
Remaining timeout: -13.209933757781982
##### Instance 26 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.719344139099121.

Properties batch 2, size 1
Remaining timeout: -13.27693486213684
##### Instance 26 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.36679497]]) need to verify.
Model prediction is: tensor([-2.35299563, -2.55650139,  1.17330647,  1.78660440,  2.84899783,
         1.88430357,  1.40626442,  1.91250777, -3.70264959, -2.39983988])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.36679497]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 274
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 164
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 148
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 148
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 326
Node /39 input 0: size torch.Size([100]) unstable 35
-----------------
# of unstable neurons: 1095
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 33] 
split level 1: [/38, 38] 
split level 2: [/38, 26] 
split level 3: [/38, 11] 
split level 4: [/38, 23] 
split level 5: [/38, 92] 
split level 6: [/38, 27] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.1484832763671875e-05
Time: prepare 0.0025    bound 0.0289    transfer 0.0001    finalize 0.0035    func 0.0350    
Accumulated time: func 0.0350    prepare 0.0033    bound 0.0289    transfer 0.0001    finalize 0.0035    
length of domains: 0
Time: pickout 0.0005    decision 0.0651    set_bounds 0.0193    solve 0.0351    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0651    set_bounds 0.0193    solve 0.0351    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 133.5156 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.77792883, -2.95646477,  1.08849323,  0.39107513,  1.64046454,
          0.20706794,  1.04865515,  1.70652282, -3.26574016, -1.63800251]])
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.72253847, -2.94639301,  1.07294154,  0.40418440,  1.63416648,
           0.22395885,  1.05141759,  1.72570479, -3.26294303, -1.62557530],
         [ 1.72253847, -2.94639301,  1.07294154,  0.40418440,  1.63416648,
           0.22395885,  1.05141759,  1.72570479, -3.26294303, -1.62557530]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.66893148e+00,  6.49596930e-01,  1.31835413e+00,  8.83719921e-02,
           1.49857962e+00,  6.71120882e-01, -3.16619873e-03,  4.98548174e+00,
           3.34811378e+00]]])
number of violation:  1
Attack finished in 0.0263 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.0275 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.07933100,  3.75857353, -0.63237089,  0.83703029, -0.75978738,
         -0.22130129, -2.11349654, -2.85276866, -2.81463242,  4.71938372]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.05193152,  4.38374186, -0.68726516,  0.72404969, -0.93974513,
          -0.36571160, -2.11417317, -3.01884246, -2.72325087,  4.68923330],
         [ 0.05193152,  4.38374186, -0.68726516,  0.72404969, -0.93974513,
          -0.36571160, -2.11417317, -3.01884246, -2.72325087,  4.68923330]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.63730192, 0.30549145, 5.37649822, 3.96518373, 5.62897825,
          5.05494499, 6.80340576, 7.70807552, 7.41248417]]])
number of violation:  0
Attack finished in 2.0332 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.07933100,  3.75857353, -0.63237089,  0.83703029, -0.75978738,
         -0.22130129, -2.11349654, -2.85276866, -2.81463242,  4.71938372]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 129, 1, 215] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 109, 1, 215] with unstable size 108 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 119, 1, 215] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 226, 1, 215] with unstable size 225 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 29, 1, 215] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [128]; unstable size 128; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 109, 1, 128] with unstable size 108 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 119, 1, 128] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 226, 1, 128] with unstable size 225 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 29, 1, 128] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [108]; unstable size 108; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 119, 1, 108] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 226, 1, 108] with unstable size 225 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 29, 1, 108] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 108] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [118]; unstable size 118; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 226, 1, 118] with unstable size 225 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 29, 1, 118] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 118] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [225]; unstable size 225; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 29, 1, 225] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57234097, -0.58091986,  2.94511700,  1.57331896,  3.10360169,
          2.58878136,  4.20141697,  5.17982531,  5.56141281]]) None
best_l after optimization: 28.521177291870117
alpha/beta optimization time: 81.47778034210205
initial alpha-crown bounds: tensor([[ 2.69965982, -0.47156787,  3.11154366,  1.74301612,  3.26616573,
          2.76746368,  4.37195206,  5.34907007,  5.68387413]])
Worst class: (+ rhs) -0.47156786918640137
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 36.188206911087036
##### Instance 28 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.699659824371338.

Properties batch 1, size 1
Remaining timeout: 36.117857933044434
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.47156787]]) need to verify.
Model prediction is: tensor([ 0.07933100,  3.75857353, -0.63237089,  0.83703029, -0.75978738,
        -0.22130129, -2.11349654, -2.85276866, -2.81463242,  4.71938372])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.47156787]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 215
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 125
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 105
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 117
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 215
Node /39 input 0: size torch.Size([100]) unstable 27
-----------------
# of unstable neurons: 804
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 9] 
split level 1: [/38, 95] 
split level 2: [/38, 97] 
split level 3: [/38, 35] 
split level 4: [/38, 34] 
split level 5: [/38, 59] 
split level 6: [/38, 81] 
pruning_in_iteration open status: True
ratio of positive domain = 122 / 128 = 0.953125
pruning-in-iteration extra time: 0.011087179183959961
Time: prepare 0.0024    bound 0.4956    transfer 0.0008    finalize 0.0035    func 0.5023    
Accumulated time: func 0.5023    prepare 0.0033    bound 0.4956    transfer 0.0008    finalize 0.0035    
Current worst splitting domains lb-rhs (depth):
-0.15182 (7), -0.14384 (7), -0.02869 (7), -0.02511 (7), -0.00799 (7), -0.00392 (7), 
length of domains: 6
Time: pickout 0.0005    decision 0.0730    set_bounds 0.0197    solve 0.5025    add 0.0014    
Accumulated time: pickout 0.0005    decision 0.0730    set_bounds 0.0197    solve 0.5025    add 0.0014    
Current (lb-rhs): -0.15181756019592285
6 domains visited
Cumulative time: 0.6062905788421631

BaB round 2
batch: 6
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/28, 363] [/28, 363] [/28, 363] [/28, 363] [/28, 363] [/28, 363] 
split level 1: [/25, 941] [/28, 219] [/25, 941] [/25, 941] [/28, 219] [/25, 941] 
split level 2: [/28, 658] [/28, 410] [/25, 949] [/28, 219] [/28, 410] [/25, 949] 
split level 3: [/38, 84] [/38, 84] [/38, 84] [/38, 84] [/38, 84] [/38, 84] 
split level 4: [/38, 57] [/38, 57] [/38, 57] [/38, 57] [/38, 57] [/38, 57] 
pruning_in_iteration open status: True
ratio of positive domain = 180 / 192 = 0.9375
pruning-in-iteration extra time: 0.014716625213623047
Time: prepare 0.0241    bound 0.6292    transfer 0.0007    finalize 0.0052    func 0.6592    
Accumulated time: func 1.1615    prepare 0.0280    bound 1.1247    transfer 0.0015    finalize 0.0087    
Current worst splitting domains lb-rhs (depth):
-0.08431 (12), -0.08160 (12), -0.08034 (12), -0.07602 (12), -0.07548 (12), -0.07289 (12), -0.07080 (12), -0.06615 (12), -0.06295 (12), -0.06211 (12), -0.05171 (12), -0.05005 (12), 
length of domains: 12
Time: pickout 0.0010    decision 0.0776    set_bounds 0.0298    solve 0.6593    add 0.0016    
Accumulated time: pickout 0.0015    decision 0.1506    set_bounds 0.0495    solve 1.1618    add 0.0030    
Current (lb-rhs): -0.0843050479888916
18 domains visited
Cumulative time: 1.377485990524292

BaB round 3
batch: 12
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/28, 219] [/28, 219] [/28, 658] [/28, 219] [/28, 219] [/28, 219] [/28, 658] [/28, 658] [/28, 219] [/28, 219] 
split level 1: [/28, 658] [/28, 658] [/28, 219] [/28, 658] [/28, 658] [/28, 658] [/28, 219] [/28, 219] [/28, 658] [/28, 658] 
split level 2: [/25, 938] [/25, 938] [/25, 938] [/25, 938] [/25, 938] [/25, 938] [/25, 938] [/25, 938] [/23, 942] [/25, 938] 
split level 3: [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/25, 938] [/23, 942] 
pruning_in_iteration open status: True
ratio of positive domain = 101 / 192 = 0.5260416666666667
pruning-in-iteration extra time: 0.04203629493713379
Time: prepare 0.0228    bound 0.9996    transfer 0.0007    finalize 0.0053    func 1.0284    
Accumulated time: func 2.1900    prepare 0.0513    bound 2.1243    transfer 0.0022    finalize 0.0140    
Current worst splitting domains lb-rhs (depth):
-0.04557 (16), -0.04380 (16), -0.04376 (16), -0.04158 (16), -0.04119 (16), -0.03991 (16), -0.03970 (16), -0.03958 (16), -0.03948 (16), -0.03773 (16), -0.03757 (16), -0.03615 (16), -0.03597 (16), -0.03591 (16), -0.03442 (16), -0.03393 (16), -0.03348 (16), -0.03328 (16), -0.03197 (16), -0.03046 (16), 
length of domains: 91
Time: pickout 0.0011    decision 0.0750    set_bounds 0.0298    solve 1.0286    add 0.0030    
Accumulated time: pickout 0.0026    decision 0.2255    set_bounds 0.0793    solve 2.1904    add 0.0060    
Current (lb-rhs): -0.04557442665100098
109 domains visited
Cumulative time: 2.5164008140563965

BaB round 4
batch: 91
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] [/38, 79] 
pruning_in_iteration open status: True
ratio of positive domain = 105 / 182 = 0.5769230769230769
pruning-in-iteration extra time: 0.04026079177856445
Time: prepare 0.0216    bound 1.0290    transfer 0.0009    finalize 0.0056    func 1.0572    
Accumulated time: func 3.2471    prepare 0.0733    bound 3.1533    transfer 0.0031    finalize 0.0197    
Current worst splitting domains lb-rhs (depth):
-0.03903 (17), -0.03720 (17), -0.03719 (17), -0.03514 (17), -0.03462 (17), -0.03323 (17), -0.03317 (17), -0.03305 (17), -0.03281 (17), -0.03125 (17), -0.03048 (17), -0.02952 (17), -0.02920 (17), -0.02795 (17), -0.02726 (17), -0.02640 (17), -0.02598 (17), -0.02539 (17), -0.02409 (17), -0.02333 (17), 
length of domains: 77
Time: pickout 0.0018    decision 0.2124    set_bounds 0.0138    solve 1.0573    add 0.0031    
Accumulated time: pickout 0.0044    decision 0.4379    set_bounds 0.0931    solve 3.2477    add 0.0091    
Current (lb-rhs): -0.0390281081199646
186 domains visited
Cumulative time: 3.8063597679138184

BaB round 5
batch: 77
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/28, 164] [/28, 164] [/28, 164] [/28, 164] [/28, 164] [/28, 164] [/28, 164] [/28, 164] [/28, 164] [/28, 164] 
pruning_in_iteration open status: True
ratio of positive domain = 63 / 154 = 0.40909090909090906
pruning-in-iteration extra time: 0.04391837120056152
Time: prepare 0.0273    bound 1.0281    transfer 0.0008    finalize 0.0047    func 1.0610    
Accumulated time: func 4.3082    prepare 0.1013    bound 4.1814    transfer 0.0038    finalize 0.0244    
Current worst splitting domains lb-rhs (depth):
-0.03051 (18), -0.02979 (18), -0.02873 (18), -0.02853 (18), -0.02811 (18), -0.02798 (18), -0.02669 (18), -0.02614 (18), -0.02595 (18), -0.02559 (18), -0.02468 (18), -0.02462 (18), -0.02454 (18), -0.02433 (18), -0.02421 (18), -0.02416 (18), -0.02387 (18), -0.02375 (18), -0.02278 (18), -0.02223 (18), 
length of domains: 91
Time: pickout 0.0028    decision 0.2405    set_bounds 0.0148    solve 1.0611    add 0.0031    
Accumulated time: pickout 0.0072    decision 0.6784    set_bounds 0.1079    solve 4.3088    add 0.0122    
Current (lb-rhs): -0.03051471710205078
277 domains visited
Cumulative time: 5.129832744598389

BaB round 6
batch: 91
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/19, 586] [/19, 586] [/28, 410] [/28, 410] [/28, 410] [/28, 410] [/19, 586] [/19, 586] [/28, 410] [/28, 410] 
pruning_in_iteration open status: True
ratio of positive domain = 85 / 182 = 0.46703296703296704
pruning-in-iteration extra time: 0.0452885627746582
Time: prepare 0.0318    bound 1.0552    transfer 0.0008    finalize 0.0058    func 1.0935    
Accumulated time: func 5.4017    prepare 0.1337    bound 5.2366    transfer 0.0046    finalize 0.0302    
Current worst splitting domains lb-rhs (depth):
-0.02259 (19), -0.02183 (19), -0.02120 (19), -0.02069 (19), -0.02049 (19), -0.02022 (19), -0.02020 (19), -0.01944 (19), -0.01854 (19), -0.01827 (19), -0.01769 (19), -0.01769 (19), -0.01767 (19), -0.01759 (19), -0.01720 (19), -0.01715 (19), -0.01710 (19), -0.01709 (19), -0.01708 (19), -0.01699 (19), 
length of domains: 97
Time: pickout 0.0015    decision 0.2605    set_bounds 0.0172    solve 1.0936    add 0.0033    
Accumulated time: pickout 0.0087    decision 0.9389    set_bounds 0.1251    solve 5.4024    add 0.0155    
Current (lb-rhs): -0.022594928741455078
374 domains visited
Cumulative time: 6.507987022399902

BaB round 7
batch: 97
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/19, 586] [/19, 586] [/19, 586] [/19, 586] [/25, 293] [/28, 475] [/19, 586] [/19, 586] [/25, 293] [/28, 418] 
pruning_in_iteration open status: True
ratio of positive domain = 77 / 194 = 0.3969072164948454
pruning-in-iteration extra time: 0.062151432037353516
Time: prepare 0.0316    bound 1.3738    transfer 0.0010    finalize 0.0062    func 1.4127    
Accumulated time: func 6.8143    prepare 0.1659    bound 6.6104    transfer 0.0056    finalize 0.0364    
Current worst splitting domains lb-rhs (depth):
-0.01478 (20), -0.01447 (20), -0.01401 (20), -0.01370 (20), -0.01339 (20), -0.01304 (20), -0.01277 (20), -0.01262 (20), -0.01242 (20), -0.01241 (20), -0.01232 (20), -0.01230 (20), -0.01221 (20), -0.01195 (20), -0.01179 (20), -0.01167 (20), -0.01148 (20), -0.01071 (20), -0.01043 (20), -0.01043 (20), 
length of domains: 117
Time: pickout 0.0016    decision 0.2225    set_bounds 0.0124    solve 1.4137    add 0.0044    
Accumulated time: pickout 0.0103    decision 1.1614    set_bounds 0.1374    solve 6.8162    add 0.0198    
Current (lb-rhs): -0.01478123664855957
491 domains visited
Cumulative time: 8.164750814437866

BaB round 8
batch: 117
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/25, 293] [/28, 475] [/25, 293] [/28, 418] [/25, 293] [/28, 475] [/19, 586] [/25, 293] [/19, 586] [/28, 475] 
pruning_in_iteration open status: True
ratio of positive domain = 149 / 234 = 0.6367521367521367
pruning-in-iteration extra time: 0.039226531982421875
Time: prepare 0.0313    bound 0.9894    transfer 0.0008    finalize 0.0064    func 1.0280    
Accumulated time: func 7.8423    prepare 0.1976    bound 7.5999    transfer 0.0063    finalize 0.0428    
Current worst splitting domains lb-rhs (depth):
-0.00823 (21), -0.00792 (21), -0.00714 (21), -0.00696 (21), -0.00685 (21), -0.00662 (21), -0.00644 (21), -0.00609 (21), -0.00589 (21), -0.00583 (21), -0.00567 (21), -0.00563 (21), -0.00556 (21), -0.00536 (21), -0.00528 (21), -0.00513 (21), -0.00512 (21), -0.00501 (21), -0.00482 (21), -0.00479 (21), 
length of domains: 85
Time: pickout 0.0022    decision 0.2839    set_bounds 0.0161    solve 1.0281    add 0.0031    
Accumulated time: pickout 0.0125    decision 1.4454    set_bounds 0.1535    solve 7.8442    add 0.0230    
Current (lb-rhs): -0.008230447769165039
576 domains visited
Cumulative time: 9.500295639038086

BaB round 9
batch: 85
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/28, 475] [/25, 293] [/28, 418] [/28, 475] [/25, 293] [/28, 475] [/19, 586] [/28, 418] [/28, 475] [/19, 586] 
pruning_in_iteration open status: True
ratio of positive domain = 155 / 170 = 0.9117647058823529
pruning-in-iteration extra time: 0.013579607009887695
Time: prepare 0.0289    bound 0.5589    transfer 0.0006    finalize 0.0043    func 0.5927    
Accumulated time: func 8.4350    prepare 0.2270    bound 8.1588    transfer 0.0069    finalize 0.0470    
Current worst splitting domains lb-rhs (depth):
-0.00318 (22), -0.00290 (22), -0.00211 (22), -0.00197 (22), -0.00183 (22), -0.00166 (22), -0.00119 (22), -0.00094 (22), -0.00093 (22), -0.00083 (22), -0.00077 (22), -0.00062 (22), -0.00036 (22), -0.00007 (22), -0.00001 (22), 
length of domains: 15
Time: pickout 0.0020    decision 0.2470    set_bounds 0.0152    solve 0.5928    add 0.0016    
Accumulated time: pickout 0.0146    decision 1.6924    set_bounds 0.1687    solve 8.4371    add 0.0246    
Current (lb-rhs): -0.003175199031829834
591 domains visited
Cumulative time: 10.360787630081177

BaB round 10
batch: 15
Average branched neurons at iteration 10:  1.0000
splitting decisions: 
split level 0: [/28, 418] [/28, 418] [/28, 475] [/28, 418] [/28, 418] [/28, 475] [/38, 71] [/28, 418] [/28, 418] [/28, 475] 
split level 1: [/38, 71] [/38, 71] [/38, 71] [/38, 71] [/38, 71] [/38, 71] [/28, 418] [/38, 71] [/38, 71] [/38, 71] 
split level 2: [/38, 13] [/38, 13] [/38, 13] [/38, 13] [/38, 13] [/38, 13] [/38, 13] [/38, 13] [/38, 13] [/38, 13] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 120 / 120 = 1.0
pruning-in-iteration extra time: 4.100799560546875e-05
Time: prepare 0.0161    bound 0.0290    transfer 0.0001    finalize 0.0034    func 0.0486    
Accumulated time: func 8.4836    prepare 0.2435    bound 8.1878    transfer 0.0070    finalize 0.0504    
length of domains: 0
Time: pickout 0.0012    decision 0.0648    set_bounds 0.0156    solve 0.0487    add 0.0001    
Accumulated time: pickout 0.0158    decision 1.7571    set_bounds 0.1843    solve 8.4858    add 0.0247    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
591 domains visited
Cumulative time: 10.492367267608643


Properties batch 2, size 1
Remaining timeout: 25.511059761047363
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.111543655395508.

Properties batch 3, size 1
Remaining timeout: 25.441622257232666
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.7430161237716675.

Properties batch 4, size 1
Remaining timeout: 25.37410879135132
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.2661657333374023.

Properties batch 5, size 1
Remaining timeout: 25.306666135787964
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.7674636840820312.

Properties batch 6, size 1
Remaining timeout: 25.236107110977173
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.371952056884766.

Properties batch 7, size 1
Remaining timeout: 25.164390802383423
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.349070072174072.

Properties batch 8, size 1
Remaining timeout: 25.094762325286865
##### Instance 28 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.683874130249023.
Result: safe in 94.9847 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.87203228, -0.58072257,  0.71747130,  0.51605940,  0.88598520,
          0.14820683,  4.15933704, -0.55393410, -3.38089991, -1.03946507]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.75946307, -0.81870830,  0.81978333,  0.53642869,  1.09064865,
           0.23285827,  3.74278831, -0.35783702, -3.27728319, -1.20920205],
         [-0.75946307, -0.81870830,  0.81978333,  0.53642869,  1.09064865,
           0.23285827,  3.74278831, -0.35783702, -3.27728319, -1.20920205]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.50225163, 4.56149673, 2.92300510, 3.20635962, 2.65213966,
          3.50993013, 4.10062504, 7.02007198, 4.95199013]]])
number of violation:  0
Attack finished in 2.0672 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.87203228, -0.58072257,  0.71747130,  0.51605940,  0.88598520,
          0.14820683,  4.15933704, -0.55393410, -3.38089991, -1.03946507]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 161, 1, 208] with unstable size 160 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 216, 1, 208] with unstable size 215 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 133, 1, 208] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 365, 1, 208] with unstable size 364 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 55, 1, 208] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [160]; unstable size 160; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 216, 1, 160] with unstable size 215 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 133, 1, 160] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 365, 1, 160] with unstable size 364 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 55, 1, 160] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [215]; unstable size 215; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 133, 1, 215] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 365, 1, 215] with unstable size 364 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 55, 1, 215] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [132]; unstable size 132; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 365, 1, 132] with unstable size 364 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 55, 1, 132] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [364]; unstable size 364; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 55, 1, 364] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 364] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [54]; unstable size 54; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 54] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.21586967, 0.45166016, 0.80966640, 1.24730372, 0.73675442, 1.13386703,
         0.94995189, 3.50008178, 0.93416739]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4444 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.90408707,  0.04390931,  0.95329005,  2.16355968,  0.76249945,
          1.33011818,  3.03339219,  0.07778633, -4.27171230, -1.18878317]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.91298413,  0.16415036,  0.88162142,  2.26270413,  0.62920451,
           1.41415906,  2.56092787,  0.21804647, -4.21117926, -1.00668406],
         [-2.91298413,  0.16415036,  0.88162142,  2.26270413,  0.62920451,
           1.41415906,  2.56092787,  0.21804647, -4.21117926, -1.00668406]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.47391224, 2.39677763, 1.67930651, 0.29822373, 1.93172336,
          1.14676881, 2.34288144, 6.77210665, 3.56761169]]])
number of violation:  0
Attack finished in 2.1066 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.90408707,  0.04390931,  0.95329005,  2.16355968,  0.76249945,
          1.33011818,  3.03339219,  0.07778633, -4.27171230, -1.18878317]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 179, 1, 184] with unstable size 178 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 201, 1, 184] with unstable size 200 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 159, 1, 184] with unstable size 158 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 401, 1, 184] with unstable size 400 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 56, 1, 184] with unstable size 55 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [178]; unstable size 178; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 201, 1, 178] with unstable size 200 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 159, 1, 178] with unstable size 158 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 401, 1, 178] with unstable size 400 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 56, 1, 178] with unstable size 55 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [200]; unstable size 200; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 159, 1, 200] with unstable size 158 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 401, 1, 200] with unstable size 400 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 56, 1, 200] with unstable size 55 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [158]; unstable size 158; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 401, 1, 158] with unstable size 400 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 56, 1, 158] with unstable size 55 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 158] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [400]; unstable size 400; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 56, 1, 400] with unstable size 55 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 400] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [55]; unstable size 55; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 55] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.43799996, -1.37357569, -0.46153831, -1.61450505, -0.41089153,
         -1.14779103, -1.19655812,  3.98031163, -0.09507418]]) None
best_l after optimization: 4.461726665496826
alpha/beta optimization time: 157.01043343544006
initial alpha-crown bounds: tensor([[ 2.84970427, -0.81973362, -0.11809802, -1.21167541,  0.09819484,
         -0.67908430, -0.54549038,  4.39783096,  0.49007821]])
Worst class: (+ rhs) -1.2116754055023193
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -39.45628237724304
##### Instance 30 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.8497042655944824.

Properties batch 1, size 1
Remaining timeout: -39.55099940299988
##### Instance 30 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.81973362]]) need to verify.
Model prediction is: tensor([-2.90408707,  0.04390931,  0.95329005,  2.16355968,  0.76249945,
         1.33011818,  3.03339219,  0.07778633, -4.27171230, -1.18878317])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.81973362]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 184
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 177
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 198
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 155
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 375
Node /39 input 0: size torch.Size([100]) unstable 49
-----------------
# of unstable neurons: 1138
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 9] 
split level 1: [/38, 63] 
split level 2: [/38, 81] 
split level 3: [/38, 58] 
split level 4: [/38, 52] 
split level 5: [/38, 77] 
split level 6: [/38, 49] 
pruning_in_iteration open status: True
ratio of positive domain = 127 / 128 = 0.9921875
pruning-in-iteration extra time: 0.010906696319580078
Time: prepare 0.0023    bound 0.5528    transfer 0.0005    finalize 0.0033    func 0.5590    
Accumulated time: func 0.5590    prepare 0.0030    bound 0.5528    transfer 0.0005    finalize 0.0033    
Current worst splitting domains lb-rhs (depth):
-0.04905 (7), 
length of domains: 1
Time: pickout 0.0005    decision 0.0709    set_bounds 0.0190    solve 0.5590    add 0.0010    
Accumulated time: pickout 0.0005    decision 0.0709    set_bounds 0.0190    solve 0.5590    add 0.0010    
Current (lb-rhs): -0.04904794692993164
1 domains visited
Time out!!!!!!!!
Result: unknown in 160.3534 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.42178011, -3.33480120,  2.61241150,  1.04819787,  2.00751877,
          2.28047204,  0.73304677,  1.06987667, -3.05280066, -2.94211054]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.42177993, -3.33480120,  2.61241174,  1.04819775,  2.00751901,
           2.28047228,  0.73304731,  1.06987667, -3.05280185, -2.94211006],
         [-0.42177993, -3.33480120,  2.61241174,  1.04819775,  2.00751901,
           2.28047228,  0.73304731,  1.06987667, -3.05280185, -2.94211006]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 2.70225215,  5.61527348, -0.33193946,  1.23227453,  0.27295327,
           1.54742503,  1.21059549,  5.33327389,  5.22258282]]])
number of violation:  1
Result: unsafe-pgd in 0.0041 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.08478458, -3.25314856,  1.71174157,  0.53609264,  2.94844556,
          0.21171117,  0.92509001,  0.36415276,  0.44585270, -3.97468853]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.29823315, -3.20879889,  2.05229664,  0.53879595,  2.50731826,
           0.14412588,  1.04188085,  0.01517990,  0.50364757, -3.89265013],
         [ 0.29823315, -3.20879889,  2.05229664,  0.53879595,  2.50731826,
           0.14412588,  1.04188085,  0.01517990,  0.50364757, -3.89265013]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[2.20908499, 5.71611691, 0.45502162, 1.96852231, 2.36319232,
          1.46543741, 2.49213815, 2.00367045, 6.39996862]]])
number of violation:  0
Attack finished in 2.6209 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.08478458, -3.25314856,  1.71174157,  0.53609264,  2.94844556,
          0.21171117,  0.92509001,  0.36415276,  0.44585270, -3.97468853]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [317]; unstable size 317; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 254, 1, 317] with unstable size 253 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 233, 1, 317] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 209, 1, 317] with unstable size 208 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 431, 1, 317] with unstable size 430 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 73, 1, 317] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 317] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [253]; unstable size 253; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 233, 1, 253] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 209, 1, 253] with unstable size 208 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 431, 1, 253] with unstable size 430 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 73, 1, 253] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [232]; unstable size 232; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 209, 1, 232] with unstable size 208 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 431, 1, 232] with unstable size 430 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 73, 1, 232] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [208]; unstable size 208; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 431, 1, 208] with unstable size 430 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 73, 1, 208] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [430]; unstable size 430; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 73, 1, 430] with unstable size 72 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 430] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [72]; unstable size 72; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 72] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.71617031, -0.60009813, -3.03653574, -1.53192759, -1.72943759,
         -2.16063166, -1.72702742, -4.10183620,  0.32239461]]) None
best_l after optimization: -9.686480522155762
alpha/beta optimization time: 176.9597086906433
initial alpha-crown bounds: tensor([[-1.79226768,  0.43408108, -2.29173970, -0.88283676, -1.02390885,
         -1.38936651, -1.04198813, -3.10783696,  1.40938306]])
Worst class: (+ rhs) -3.107836961746216
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -59.84553074836731
##### Instance 32 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-1.79226768]]) need to verify.
Model prediction is: tensor([ 0.08478458, -3.25314856,  1.71174157,  0.53609264,  2.94844556,
         0.21171117,  0.92509001,  0.36415276,  0.44585270, -3.97468853])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.79226768]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 317
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 242
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 218
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 195
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 401
Node /39 input 0: size torch.Size([100]) unstable 72
-----------------
# of unstable neurons: 1445
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 84] 
split level 1: [/38, 22] 
split level 2: [/38, 90] 
split level 3: [/38, 18] 
split level 4: [/38, 17] 
split level 5: [/38, 49] 
split level 6: [/38, 27] 
pruning_in_iteration open status: True
ratio of positive domain = 64 / 128 = 0.5
pruning-in-iteration extra time: 0.030274152755737305
Time: prepare 0.0024    bound 0.8508    transfer 0.0006    finalize 0.0035    func 0.8573    
Accumulated time: func 0.8573    prepare 0.0034    bound 0.8508    transfer 0.0006    finalize 0.0035    
Current worst splitting domains lb-rhs (depth):
-0.89249 (7), -0.86786 (7), -0.85959 (7), -0.85560 (7), -0.83345 (7), -0.83325 (7), -0.83099 (7), -0.81761 (7), -0.81110 (7), -0.80661 (7), -0.78641 (7), -0.78235 (7), -0.77903 (7), -0.77784 (7), -0.77748 (7), -0.76533 (7), -0.75764 (7), -0.75340 (7), -0.75012 (7), -0.74651 (7), 
length of domains: 64
Time: pickout 0.0005    decision 0.0858    set_bounds 0.0194    solve 0.8574    add 0.0027    
Accumulated time: pickout 0.0005    decision 0.0858    set_bounds 0.0194    solve 0.8574    add 0.0027    
Current (lb-rhs): -0.892493724822998
64 domains visited
Time out!!!!!!!!
Result: unknown in 180.9813 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.02147388, -2.61317873,  1.87034893,  2.80624342,  0.95987564,
          2.62879610,  0.76358324,  0.86133158, -2.93094611, -1.32456112]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.02147412, -2.61317921,  1.87034953,  2.80624270,  0.95987588,
           2.62879562,  0.76358300,  0.86133206, -2.93094635, -1.32456100],
         [-3.02147412, -2.61317921,  1.87034953,  2.80624270,  0.95987588,
           2.62879562,  0.76358300,  0.86133206, -2.93094635, -1.32456100]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.65026951,  5.24197483,  0.75844610, -0.17744708,  1.66891980,
           1.86521268,  1.76746392,  5.55974197,  3.95335722]]])
number of violation:  1
Result: unsafe-pgd in 0.0047 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.06271315,  0.26765299, -0.63102758, -1.02877116, -1.10703850,
         -1.06831217, -4.46126366,  0.99095261,  0.07634862,  5.89858627]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.00420570, -0.31272894, -0.47985163, -0.88654518, -0.74134952,
          -0.89251781, -4.43463612,  1.46880472, -0.06047656,  5.33494234],
         [ 1.00420570, -0.31272894, -0.47985163, -0.88654518, -0.74134952,
          -0.89251781, -4.43463612,  1.46880472, -0.06047656,  5.33494234]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.33073664, 5.64767122, 5.81479406, 6.22148752, 6.07629204,
          6.22745991, 9.76957703, 3.86613655, 5.39541817]]])
number of violation:  0
Attack finished in 2.0852 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 1.06271315,  0.26765299, -0.63102758, -1.02877116, -1.10703850,
         -1.06831217, -4.46126366,  0.99095261,  0.07634862,  5.89858627]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 203, 1, 250] with unstable size 202 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 132, 1, 250] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 141, 1, 250] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 286, 1, 250] with unstable size 285 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 51, 1, 250] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [202]; unstable size 202; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 132, 1, 202] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 141, 1, 202] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 286, 1, 202] with unstable size 285 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 51, 1, 202] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 202] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [131]; unstable size 131; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 141, 1, 131] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 286, 1, 131] with unstable size 285 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 51, 1, 131] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [140]; unstable size 140; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 286, 1, 140] with unstable size 285 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 51, 1, 140] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [285]; unstable size 285; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 51, 1, 285] with unstable size 50 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [50]; unstable size 50; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 50] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.96608496, 3.15976191, 3.27633333, 3.96208143, 3.48268080, 4.00416088,
         7.30574322, 1.23808146, 2.42715454]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4060 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.24615455,  3.24210072,  0.19802259,  0.80728400, -1.88861823,
          0.16755807,  0.36078662, -2.11600804,  0.70210248,  1.77293575]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.24615431,  3.24210072,  0.19802310,  0.80728412, -1.88861847,
           0.16755807,  0.36078626, -2.11600757,  0.70210189,  1.77293551],
         [-3.24615431,  3.24210072,  0.19802310,  0.80728412, -1.88861847,
           0.16755807,  0.36078626, -2.11600757,  0.70210189,  1.77293551]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.44417739, -3.04407763, -0.60926104,  2.08664155,  0.03046502,
          -0.16276316,  2.31403041, -0.50407898, -1.57491255]]])
number of violation:  5
Result: unsafe-pgd in 0.0050 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.85893941, -4.51891518,  0.95693272,  1.28264201,  2.99800706,
          2.07080626,  2.20544958,  2.34748220, -2.89621615, -2.58722353]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.87088573, -4.47877979,  1.00166512,  1.38799441,  2.64940453,
           2.08963633,  2.60473728,  1.92294228, -2.85897207, -2.44772387],
         [-1.87088573, -4.47877979,  1.00166512,  1.38799441,  2.64940453,
           2.08963633,  2.60473728,  1.92294228, -2.85897207, -2.44772387]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[4.52029037, 7.12818432, 1.64773941, 1.26141012, 0.55976820,
          0.04466724, 0.72646248, 5.50837708, 5.09712887]]])
number of violation:  0
Attack finished in 2.1172 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.85893941, -4.51891518,  0.95693272,  1.28264201,  2.99800706,
          2.07080626,  2.20544958,  2.34748220, -2.89621615, -2.58722353]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 203, 1, 256] with unstable size 202 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 189, 1, 256] with unstable size 188 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 182, 1, 256] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 348, 1, 256] with unstable size 347 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 55, 1, 256] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [202]; unstable size 202; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 189, 1, 202] with unstable size 188 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 182, 1, 202] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 348, 1, 202] with unstable size 347 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 55, 1, 202] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 202] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [188]; unstable size 188; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 182, 1, 188] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 348, 1, 188] with unstable size 347 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 55, 1, 188] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [181]; unstable size 181; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 348, 1, 181] with unstable size 347 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 55, 1, 181] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 181] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [347]; unstable size 347; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 55, 1, 347] with unstable size 54 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 347] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [54]; unstable size 54; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 54] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.31838131,  3.25897169, -1.07674098, -0.57427639, -1.41101003,
         -1.86137843, -1.75525928,  2.29547930,  1.41426897]]) None
best_l after optimization: 5.451776504516602
alpha/beta optimization time: 136.52742719650269
initial alpha-crown bounds: tensor([[ 1.78312659,  3.85154772, -0.61717975, -0.22870985, -1.11422360,
         -1.44608188, -1.46533251,  2.71681166,  1.97181797]])
Worst class: (+ rhs) -1.4653325080871582
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -18.976791858673096
##### Instance 36 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.7831265926361084.

Properties batch 1, size 1
Remaining timeout: -19.048994779586792
##### Instance 36 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.8515477180480957.

Properties batch 2, size 1
Remaining timeout: -19.120210886001587
##### Instance 36 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.61717975]]) need to verify.
Model prediction is: tensor([-1.85893941, -4.51891518,  0.95693272,  1.28264201,  2.99800706,
         2.07080626,  2.20544958,  2.34748220, -2.89621615, -2.58722353])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.61717975]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 256
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 200
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 181
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 175
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 327
Node /39 input 0: size torch.Size([100]) unstable 49
-----------------
# of unstable neurons: 1188
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 53] 
split level 1: [/38, 33] 
split level 2: [/38, 26] 
split level 3: [/38, 1] 
split level 4: [/38, 38] 
split level 5: [/38, 92] 
split level 6: [/38, 7] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 0.00016880035400390625
Time: prepare 0.0027    bound 0.0316    transfer 0.0001    finalize 0.0039    func 0.0383    
Accumulated time: func 0.0383    prepare 0.0037    bound 0.0316    transfer 0.0001    finalize 0.0039    
length of domains: 0
Time: pickout 0.0005    decision 0.0729    set_bounds 0.0206    solve 0.0383    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0729    set_bounds 0.0206    solve 0.0383    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 139.3741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.92006898e+00,  5.99716759e+00, -2.69200659e+00, -1.58889842e+00,
         -1.41906762e+00, -2.34765267e+00, -2.81043911e+00, -1.58466876e+00,
         -7.42033124e-04,  4.52610683e+00]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.83339000,  5.40558529, -2.63755679, -1.46958554, -1.36322784,
          -2.17141032, -2.78352404, -1.45313549, -0.06973770,  4.70906830],
         [ 1.83339000,  5.40558529, -2.63755679, -1.46958554, -1.36322784,
          -2.17141032, -2.78352404, -1.45313549, -0.06973770,  4.70906830]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.57219529, 8.04314232, 6.87517071, 6.76881313, 7.57699585,
          8.18910980, 6.85872030, 5.47532272, 0.69651651]]])
number of violation:  0
Attack finished in 2.4241 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 1.92006898e+00,  5.99716759e+00, -2.69200659e+00, -1.58889842e+00,
         -1.41906762e+00, -2.34765267e+00, -2.81043911e+00, -1.58466876e+00,
         -7.42033124e-04,  4.52610683e+00]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 123, 1, 152] with unstable size 122 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 93, 1, 152] with unstable size 92 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 87, 1, 152] with unstable size 86 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 204, 1, 152] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 23, 1, 152] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [122]; unstable size 122; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 93, 1, 122] with unstable size 92 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 87, 1, 122] with unstable size 86 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 204, 1, 122] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 23, 1, 122] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [92]; unstable size 92; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 87, 1, 92] with unstable size 86 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 204, 1, 92] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 23, 1, 92] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 92] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [86]; unstable size 86; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 204, 1, 86] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 23, 1, 86] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 86] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [203]; unstable size 203; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 23, 1, 203] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.24413681,  6.32913542,  5.39170265,  5.10328579,  5.93477154,
          6.39733028,  4.99433374,  3.98099494, -0.01307964]]) None

all verified at 2th iter
best_l after optimization: 40.61531448364258
alpha/beta optimization time: 1.8905348777770996
initial alpha-crown bounds: tensor([[2.26841927e+00, 6.35943842e+00, 5.41943359e+00, 5.13201904e+00,
         5.96576309e+00, 6.42797232e+00, 5.03074884e+00, 4.00649357e+00,
         5.02669811e-03]])
Worst class: (+ rhs) 0.005026698112487793
verified with init bound!
Result: safe-incomplete in 4.6390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.04920627,  3.60426426, -2.23682785, -1.71358252, -2.65354657,
         -1.07975626, -2.17402983, -1.81714082,  2.21299601,  5.80835724]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.14794965,  3.89411354, -2.15207815, -1.71409583, -2.67117643,
          -1.17389250, -2.11254930, -1.91989064,  2.43797827,  5.26358604],
         [ 0.14794965,  3.89411354, -2.15207815, -1.71409583, -2.67117643,
          -1.17389250, -2.11254930, -1.91989064,  2.43797827,  5.26358604]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.11563635, 1.36947250, 7.41566420, 6.97768211, 7.93476248,
          6.43747854, 7.37613535, 7.18347645, 2.82560778]]])
number of violation:  0
Attack finished in 2.3509 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.04920627,  3.60426426, -2.23682785, -1.71358252, -2.65354657,
         -1.07975626, -2.17402983, -1.81714082,  2.21299601,  5.80835724]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 127, 1, 187] with unstable size 126 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 120, 1, 187] with unstable size 119 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 133, 1, 187] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 285, 1, 187] with unstable size 284 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 47, 1, 187] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [126]; unstable size 126; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 120, 1, 126] with unstable size 119 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 133, 1, 126] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 285, 1, 126] with unstable size 284 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 47, 1, 126] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [119]; unstable size 119; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 133, 1, 119] with unstable size 132 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 285, 1, 119] with unstable size 284 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 47, 1, 119] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 119] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [132]; unstable size 132; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 285, 1, 132] with unstable size 284 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 47, 1, 132] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [284]; unstable size 284; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 47, 1, 284] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 284] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [46]; unstable size 46; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 46] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.25568652, -0.36081541,  3.67367244,  3.79824376,  4.02530289,
          2.91429377,  3.93789506,  2.66427851,  0.55121207]]) None
best_l after optimization: 25.198366165161133
alpha/beta optimization time: 111.59229063987732
initial alpha-crown bounds: tensor([[ 1.63594127, -0.16055655,  4.00501060,  4.07383585,  4.37296009,
          3.21164799,  4.23814821,  3.04954267,  0.77183628]])
Worst class: (+ rhs) -0.16055655479431152
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 5.713802337646484
##### Instance 38 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.6359412670135498.

Properties batch 1, size 1
Remaining timeout: 5.63015341758728
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.16055655]]) need to verify.
Model prediction is: tensor([ 0.04920627,  3.60426426, -2.23682785, -1.71358252, -2.65354657,
        -1.07975626, -2.17402983, -1.81714082,  2.21299601,  5.80835724])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16055655]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 187
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 124
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 115
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 130
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 272
Node /39 input 0: size torch.Size([100]) unstable 44
-----------------
# of unstable neurons: 872
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 66] 
split level 1: [/38, 63] 
split level 2: [/38, 0] 
split level 3: [/38, 52] 
split level 4: [/38, 59] 
split level 5: [/38, 70] 
split level 6: [/38, 36] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.6253204345703125e-05
Time: prepare 0.0038    bound 0.0388    transfer 0.0001    finalize 0.0040    func 0.0468    
Accumulated time: func 0.0468    prepare 0.0047    bound 0.0388    transfer 0.0001    finalize 0.0040    
length of domains: 0
Time: pickout 0.0005    decision 0.0839    set_bounds 0.0235    solve 0.0469    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0839    set_bounds 0.0235    solve 0.0469    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1634521484375


Properties batch 2, size 1
Remaining timeout: 5.336211919784546
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.005010604858398.

Properties batch 3, size 1
Remaining timeout: 5.259458780288696
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.073835849761963.

Properties batch 4, size 1
Remaining timeout: 5.187589168548584
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.372960090637207.

Properties batch 5, size 1
Remaining timeout: 5.117621660232544
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.2116479873657227.

Properties batch 6, size 1
Remaining timeout: 5.046094655990601
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.238148212432861.

Properties batch 7, size 1
Remaining timeout: 4.976616382598877
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.0495426654815674.

Properties batch 8, size 1
Remaining timeout: 4.9031291007995605
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.7718362808227539.
Result: safe in 115.1682 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.13381410, -1.54639745, -0.97603792,  2.09605241, -0.15616661,
          3.41676283, -0.22479624,  1.18872511,  0.43079394, -1.09512675]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.99827313, -1.09278560, -1.04481399,  1.99213541, -0.22705686,
           2.96533132, -0.22727698,  0.94648308,  0.59337801, -0.90712750],
         [-2.99827313, -1.09278560, -1.04481399,  1.99213541, -0.22705686,
           2.96533132, -0.22727698,  0.94648308,  0.59337801, -0.90712750]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.96360445, 4.05811691, 4.01014519, 0.97319591, 3.19238806,
          3.19260836, 2.01884842, 2.37195349, 3.87245893]]])
number of violation:  0
Attack finished in 2.4788 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-3.13381410, -1.54639745, -0.97603792,  2.09605241, -0.15616661,
          3.41676283, -0.22479624,  1.18872511,  0.43079394, -1.09512675]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 136, 1, 174] with unstable size 135 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 150, 1, 174] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 141, 1, 174] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 295, 1, 174] with unstable size 294 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 42, 1, 174] with unstable size 41 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [135]; unstable size 135; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 150, 1, 135] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 141, 1, 135] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 295, 1, 135] with unstable size 294 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 42, 1, 135] with unstable size 41 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 135] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [149]; unstable size 149; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 141, 1, 149] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 295, 1, 149] with unstable size 294 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 42, 1, 149] with unstable size 41 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [140]; unstable size 140; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 295, 1, 140] with unstable size 294 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 42, 1, 140] with unstable size 41 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [294]; unstable size 294; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 42, 1, 294] with unstable size 41 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 294] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [41]; unstable size 41; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 41] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.68574190,  1.30687857,  2.32111025,  0.17646575,  1.68966699,
          1.60642552,  0.60031247, -0.32120442,  1.25876689]]) None

all verified at 11th iter
best_l after optimization: 14.219614028930664
alpha/beta optimization time: 13.65690016746521
initial alpha-crown bounds: tensor([[3.90423107, 1.57502651, 2.53087735, 0.27110362, 1.85643101, 1.78970695,
         0.74584925, 0.00464249, 1.54174519]])
Worst class: (+ rhs) 0.004642486572265625
verified with init bound!
Result: safe-incomplete in 16.4195 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.22349453,  0.60032916,  0.33103833, -1.27062476,  0.52534854,
         -2.03636813, -2.89577103,  0.26880628,  1.46548414,  0.78819478]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.22349405,  0.60032880,  0.33103836, -1.27062488,  0.52534848,
          -2.03636742, -2.89577127,  0.26880702,  1.46548355,  0.78819501],
         [ 2.22349405,  0.60032880,  0.33103836, -1.27062488,  0.52534848,
          -2.03636742, -2.89577127,  0.26880702,  1.46548355,  0.78819501]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-1.69814563, -0.07498032,  0.19431013,  1.79597330,  2.56171584,
           3.42111969,  0.25654128, -0.94013542, -0.26284683]]])
number of violation:  4
Result: unsafe-pgd in 0.0041 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.50898004, -2.30631113,  1.78500009,  1.52107537,  1.64320135,
          1.13040996,  4.36110020, -0.31553772, -4.72826719, -1.58172810]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.38327003, -2.27960682,  1.86886406,  1.49186683,  1.64396071,
           1.09964490,  4.01099062, -0.25962055, -4.63849449, -1.55436778],
         [-1.38327003, -2.27960682,  1.86886406,  1.49186683,  1.64396071,
           1.09964490,  4.01099062, -0.25962055, -4.63849449, -1.55436778]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.39426041, 6.29059744, 2.14212656, 2.51912379, 2.36702991,
          2.91134572, 4.27061081, 8.64948463, 5.56535769]]])
number of violation:  0
Attack finished in 2.0343 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.50898004, -2.30631113,  1.78500009,  1.52107537,  1.64320135,
          1.13040996,  4.36110020, -0.31553772, -4.72826719, -1.58172810]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 173, 1, 272] with unstable size 172 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 149, 1, 272] with unstable size 148 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 126, 1, 272] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 376, 1, 272] with unstable size 375 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 32, 1, 272] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [172]; unstable size 172; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 149, 1, 172] with unstable size 148 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 126, 1, 172] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 376, 1, 172] with unstable size 375 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 32, 1, 172] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [148]; unstable size 148; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 126, 1, 148] with unstable size 125 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 376, 1, 148] with unstable size 375 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 32, 1, 148] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [125]; unstable size 125; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 376, 1, 125] with unstable size 375 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 32, 1, 125] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 125] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [375]; unstable size 375; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 32, 1, 375] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 375] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.60721445, 3.75201273, 1.04609108, 1.24978268, 1.13398027, 1.52747703,
         2.51486111, 6.95075512, 3.32179141]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3563 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.10917878, -2.14886189,  0.34375331,  2.84388757, -0.74095100,
          3.78268576, -2.34585500,  3.97853422, -4.89379168,  0.28975627]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.10917866, -2.14886165,  0.34375313,  2.84388757, -0.74095076,
           3.78268576, -2.34585476,  3.97853470, -4.89379168,  0.28975540],
         [-1.10917866, -2.14886165,  0.34375313,  2.84388757, -0.74095076,
           3.78268576, -2.34585476,  3.97853470, -4.89379168,  0.28975540]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.89186430,  5.93154716,  3.43893266,  0.93879819,  4.52363634,
           6.12854052, -0.19584870,  8.67647743,  3.49293017]]])
number of violation:  1
Result: unsafe-pgd in 0.0043 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.99438238, -1.07543492,  0.99988931,  1.85483062,  1.71689534,
          1.47054172,  2.63765311, -1.22535932, -2.81041360, -1.57426953]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.81822538, -1.32129014,  1.08533418,  1.73347712,  2.06821752,
           1.44913805,  2.16207910, -0.89144987, -2.71233654, -1.75498879],
         [-1.81822538, -1.32129014,  1.08533418,  1.73347712,  2.06821752,
           1.44913805,  2.16207910, -0.89144987, -2.71233654, -1.75498879]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.98030448, 3.48336935, 1.07674491, 0.42860198, 0.09386158,
          0.71294105, 3.05352831, 4.87441540, 3.91706705]]])
number of violation:  0
Attack finished in 2.0529 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.99438238, -1.07543492,  0.99988931,  1.85483062,  1.71689534,
          1.47054172,  2.63765311, -1.22535932, -2.81041360, -1.57426953]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [222]; unstable size 222; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 217, 1, 222] with unstable size 216 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 154, 1, 222] with unstable size 153 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 204, 1, 222] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 382, 1, 222] with unstable size 381 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 47, 1, 222] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 222] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [216]; unstable size 216; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 154, 1, 216] with unstable size 153 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 204, 1, 216] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 382, 1, 216] with unstable size 381 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 47, 1, 216] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [153]; unstable size 153; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 204, 1, 153] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 382, 1, 153] with unstable size 381 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 47, 1, 153] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 153] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [203]; unstable size 203; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 382, 1, 203] with unstable size 381 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 47, 1, 203] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [381]; unstable size 381; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 47, 1, 381] with unstable size 46 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 381] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [46]; unstable size 46; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 46] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.33224726, -1.00059652, -1.67203045, -2.05260181, -2.08842063,
         -2.12729955, -0.09496498,  0.45119095,  0.14047265]]) None
best_l after optimization: -2.7177751064300537
alpha/beta optimization time: 155.77686643600464
initial alpha-crown bounds: tensor([[ 0.97739029, -0.33842087, -1.07249784, -1.56157708, -1.58758295,
         -1.59769130,  0.50166488,  1.20203638,  0.75890315]])
Worst class: (+ rhs) -1.597691297531128
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -38.16061043739319
##### Instance 43 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.9773902893066406.

Properties batch 1, size 1
Remaining timeout: -38.22765040397644
##### Instance 43 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.33842087]]) need to verify.
Model prediction is: tensor([-1.99438238, -1.07543492,  0.99988931,  1.85483062,  1.71689534,
         1.47054172,  2.63765311, -1.22535932, -2.81041360, -1.57426953])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.33842087]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 222
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 211
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 149
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 193
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 353
Node /39 input 0: size torch.Size([100]) unstable 43
-----------------
# of unstable neurons: 1171
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 58] 
split level 1: [/38, 17] 
split level 2: [/38, 63] 
split level 3: [/38, 52] 
split level 4: [/38, 9] 
split level 5: [/38, 84] 
split level 6: [/38, 97] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.9591064453125e-05
Time: prepare 0.0026    bound 0.0315    transfer 0.0001    finalize 0.0036    func 0.0379    
Accumulated time: func 0.0379    prepare 0.0034    bound 0.0315    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0005    decision 0.0738    set_bounds 0.0198    solve 0.0380    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0738    set_bounds 0.0198    solve 0.0380    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 158.4768 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.64118719,  1.48905838,  1.15715301, -3.41606998,  2.22199583,
         -4.87455893, -4.95469713, -0.29022226,  1.73817873,  2.28769112]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 4.34877110,  1.59899151,  0.99296117, -3.36543655,  2.12813854,
          -4.76824951, -4.87681103, -0.27110448,  1.62423611,  2.58822441],
         [ 4.34877110,  1.59899151,  0.99296117, -3.36543655,  2.12813854,
          -4.76824951, -4.87681103, -0.27110448,  1.62423611,  2.58822441]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[2.74977970, 3.35580993, 7.71420765, 2.22063255, 9.11702061,
          9.22558212, 4.61987591, 2.72453499, 1.76054621]]])
number of violation:  0
Attack finished in 2.1262 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 4.64118719,  1.48905838,  1.15715301, -3.41606998,  2.22199583,
         -4.87455893, -4.95469713, -0.29022226,  1.73817873,  2.28769112]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [141]; unstable size 141; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 160, 1, 141] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 97, 1, 141] with unstable size 96 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 87, 1, 141] with unstable size 86 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 145, 1, 141] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 10, 1, 141] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [159]; unstable size 159; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 97, 1, 159] with unstable size 96 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 87, 1, 159] with unstable size 86 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 145, 1, 159] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 10, 1, 159] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [96]; unstable size 96; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 87, 1, 96] with unstable size 86 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 145, 1, 96] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 10, 1, 96] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 96] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [86]; unstable size 86; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 145, 1, 86] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 10, 1, 86] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 86] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [144]; unstable size 144; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 10, 1, 144] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.10688972, 2.39889765, 6.86522007, 1.38940430, 8.17244148, 8.30251884,
         3.87132120, 1.79484797, 1.15511394]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4046 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.47470009,  2.55038643, -2.88986564, -1.28500855, -1.64442682,
         -1.62007344, -4.18741989, -0.75706702,  1.48829997,  6.87037706]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.45500433,  3.09451151, -2.91496944, -1.31357443, -1.68296003,
          -1.70513439, -4.11871529, -0.93513048,  1.59539938,  6.52547121],
         [ 1.45500433,  3.09451151, -2.91496944, -1.31357443, -1.68296003,
          -1.70513439, -4.11871529, -0.93513048,  1.59539938,  6.52547121]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.07046700,  3.43095970,  9.44044113,  7.83904552,  8.20843124,
           8.23060608, 10.64418697,  7.46060181,  4.93007183]]])
number of violation:  0
Attack finished in 2.6604 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 1.47470009,  2.55038643, -2.88986564, -1.28500855, -1.64442682,
         -1.62007344, -4.18741989, -0.75706702,  1.48829997,  6.87037706]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 139, 1, 185] with unstable size 138 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 123, 1, 185] with unstable size 122 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 116, 1, 185] with unstable size 115 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 247, 1, 185] with unstable size 246 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 185] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [138]; unstable size 138; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 123, 1, 138] with unstable size 122 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 116, 1, 138] with unstable size 115 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 247, 1, 138] with unstable size 246 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 138] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [122]; unstable size 122; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 116, 1, 122] with unstable size 115 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 247, 1, 122] with unstable size 246 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 122] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 122] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [115]; unstable size 115; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 247, 1, 115] with unstable size 246 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 115] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 115] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [246]; unstable size 246; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 246] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.16096163, 2.21228552, 7.19800472, 5.59778976, 5.52244329, 5.66162872,
         8.25126648, 4.69307327, 3.11762810]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.9952 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.11423588, -4.59767723,  2.17706347,  3.77479243,  1.71536088,
          3.59198284,  1.91007113,  0.81785339, -3.13475847, -3.14052820]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.12125731, -4.55725574,  2.15312529,  3.69593978,  1.66785741,
           3.79478931,  1.76708543,  0.90497637, -3.26173186, -3.04360628],
         [-3.12125731, -4.55725574,  2.15312529,  3.69593978,  1.66785741,
           3.79478931,  1.76708543,  0.90497637, -3.26173186, -3.04360628]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 6.81719685,  8.25319576,  1.54281449,  2.02808237, -0.09884953,
           1.92885435,  2.79096270,  6.95767117,  6.73954487]]])
number of violation:  1
Attack finished in 2.5014 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.5024 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.10970755, -0.73592961, -0.66533899,  0.83284628, -0.62265754,
          0.77191699, -1.92150056,  0.16837956,  1.10627270,  0.95625508]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.10970767, -0.73592925, -0.66533935,  0.83284628, -0.62265801,
           0.77191699, -1.92150068,  0.16837958,  1.10627270,  0.95625496],
         [ 0.10970767, -0.73592925, -0.66533935,  0.83284628, -0.62265801,
           0.77191699, -1.92150068,  0.16837958,  1.10627270,  0.95625496]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.84654731,  1.69218421,  1.62159431,  0.12340868,  1.57891297,
           0.18433797,  2.87775564,  0.78787529, -0.15001786]]])
number of violation:  1
Result: unsafe-pgd in 0.0043 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.48789787, -3.77266741,  1.45795321,  0.26781335,  5.09990597,
          1.51167405,  1.26707327,  5.41593838, -4.71566391, -4.04404116]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.40193009, -3.82882166,  1.65651810,  0.38432479,  5.03416872,
           1.54501629,  1.52812696,  4.71668291, -4.58975458, -4.04424953],
         [-2.40193009, -3.82882166,  1.65651810,  0.38432479,  5.03416872,
           1.54501629,  1.52812696,  4.71668291, -4.58975458, -4.04424953]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 7.11861324,  8.54550457,  3.06016493,  4.33235836, -0.31748581,
           3.17166662,  3.18855667,  9.30643845,  8.76093292]]])
number of violation:  1
Attack finished in 2.2120 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.2130 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.15152419, -3.23193884,  3.47958207,  0.21695739,  3.38124061,
          0.28259587,  3.60253334, -0.29189268, -2.79406762, -3.49345303]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.06098902, -3.42313957,  3.68284011,  0.24201797,  3.45710492,
           0.35941032,  3.18474269, -0.20359917, -2.65119791, -3.58715725],
         [-1.06098902, -3.42313957,  3.68284011,  0.24201797,  3.45710492,
           0.35941032,  3.18474269, -0.20359917, -2.65119791, -3.58715725]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.24573183,  6.60788250, -0.49809742,  2.94272470, -0.27236223,
           2.82533240,  3.38834167,  5.83594036,  6.77190065]]])
number of violation:  2
Attack finished in 4.8095 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 4.8106 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.66304636, -0.00748378,  0.58501309, -0.61662686, -1.38947773,
         -1.99955475, -1.29394472,  0.09387104, -1.24423015,  4.20926523]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.92804050, -0.21930259,  0.83214498, -0.59043586, -1.25532985,
          -2.02322698, -1.19549167,  0.18075126, -1.19847262,  3.54120111],
         [ 1.92804050, -0.21930259,  0.83214498, -0.59043586, -1.25532985,
          -2.02322698, -1.19549167,  0.18075126, -1.19847262,  3.54120111]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.61316061, 3.76050377, 2.70905614, 4.13163710, 4.79653072,
          5.56442833, 4.73669243, 3.36044955, 4.73967361]]])
number of violation:  0
Attack finished in 3.2076 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 1.66304636, -0.00748378,  0.58501309, -0.61662686, -1.38947773,
         -1.99955475, -1.29394472,  0.09387104, -1.24423015,  4.20926523]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 166, 1, 126] with unstable size 165 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 112, 1, 126] with unstable size 111 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 119, 1, 126] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 238, 1, 126] with unstable size 237 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 30, 1, 126] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [165]; unstable size 165; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 112, 1, 165] with unstable size 111 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 119, 1, 165] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 238, 1, 165] with unstable size 237 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 30, 1, 165] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [111]; unstable size 111; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 119, 1, 111] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 238, 1, 111] with unstable size 237 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 30, 1, 111] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 111] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [118]; unstable size 118; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 238, 1, 118] with unstable size 237 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 30, 1, 118] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 118] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [237]; unstable size 237; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 30, 1, 237] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 237] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.37849855, 2.07197189, 0.83984947, 2.37036800, 3.00257206, 3.76337647,
         2.90368581, 1.44961071, 2.67408323]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 3.6054 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.41566253, -0.88690609,  0.06121688, -0.74386144, -0.18189639,
         -1.60146952,  0.09350460, -0.82577056,  2.16644716,  0.50303221]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.75081563, -0.92973316,  0.13476795, -0.78032744, -0.10582539,
          -1.54820597,  0.24318150, -0.78773648,  1.66555429,  0.35747015],
         [ 1.75081563, -0.92973316,  0.13476795, -0.78032744, -0.10582539,
          -1.54820597,  0.24318150, -0.78773648,  1.66555429,  0.35747015]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.08526134,  2.59528732,  1.53078628,  2.44588184,  1.77137971,
           3.21376038,  1.42237282,  2.45329094,  1.30808437]]])
number of violation:  1
Attack finished in 2.9480 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.9525 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.70815122, -2.47274590,  1.88971925,  0.56257445, -0.25490040,
          0.61748630,  2.72952271, -0.25471783, -2.03655791, -1.48858702]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.70815188, -2.47274637,  1.88971972,  0.56257433, -0.25490052,
           0.61748636,  2.72952223, -0.25471795, -2.03655791, -1.48858750],
         [ 0.70815188, -2.47274637,  1.88971972,  0.56257433, -0.25490052,
           0.61748636,  2.72952223, -0.25471795, -2.03655791, -1.48858750]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.18089819, -1.18156791,  0.14557755,  0.96305239,  0.09066552,
          -2.02137041,  0.96286988,  2.74470949,  2.19673920]]])
number of violation:  2
Result: unsafe-pgd in 0.0058 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.78882313, -2.41028070,  1.07782328,  2.79577994,  1.29125011,
          2.52567005,  2.15077782,  0.27346018, -3.80750775, -1.10823524]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.62883353, -2.42858458,  1.05322504,  2.64968967,  1.33277702,
           2.70249319,  1.96139324,  0.43158123, -3.89140010, -1.18242419],
         [-2.62883353, -2.42858458,  1.05322504,  2.64968967,  1.33277702,
           2.70249319,  1.96139324,  0.43158123, -3.89140010, -1.18242419]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.27852345,  5.07827425,  1.59646463,  1.31691265, -0.05280352,
           0.68829644,  2.21810865,  6.54109001,  3.83211422]]])
number of violation:  1
Attack finished in 2.7094 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.7109 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.75406647,  2.66635656, -1.44649911, -2.19173360, -0.65193444,
         -3.82829094, -4.30601215, -3.04766011,  7.71486235,  0.33665007]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 4.97125196,  2.50875378, -1.36583340, -2.24292970, -0.51974237,
          -3.81853938, -4.30733633, -2.94862413,  7.16913795,  0.55366212],
         [ 4.97125196,  2.50875378, -1.36583340, -2.24292970, -0.51974237,
          -3.81853938, -4.30733633, -2.94862413,  7.16913795,  0.55366212]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 2.19788599,  4.66038418,  8.53497124,  9.41206741,  7.68888044,
          10.98767757, 11.47647476, 10.11776161,  6.61547565]]])
number of violation:  0
Attack finished in 2.0387 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 4.75406647,  2.66635656, -1.44649911, -2.19173360, -0.65193444,
         -3.82829094, -4.30601215, -3.04766011,  7.71486235,  0.33665007]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 169, 1, 196] with unstable size 168 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 122, 1, 196] with unstable size 121 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 166, 1, 196] with unstable size 165 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 273, 1, 196] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 32, 1, 196] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [168]; unstable size 168; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 122, 1, 168] with unstable size 121 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 166, 1, 168] with unstable size 165 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 273, 1, 168] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 32, 1, 168] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [121]; unstable size 121; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 166, 1, 121] with unstable size 165 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 273, 1, 121] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 32, 1, 121] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [165]; unstable size 165; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 273, 1, 165] with unstable size 272 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 32, 1, 165] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [272]; unstable size 272; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 32, 1, 272] with unstable size 31 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [31]; unstable size 31; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 31] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.85714376, 2.68270636, 6.95758724, 7.55833054, 5.86412191, 8.83795643,
         9.56326485, 7.64631128, 4.11090374]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.65191197, -0.86835623,  0.76187032, -1.35744917, -0.14156455,
         -2.51673031, -2.33077526, -2.54021835,  5.27819443,  0.06300676]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.71478462, -0.81480289,  0.87321240, -1.35919821, -0.01502860,
          -2.43919563, -2.24963808, -2.42390633,  4.72008085, -0.00640467],
         [ 3.71478462, -0.81480289,  0.87321240, -1.35919821, -0.01502860,
          -2.43919563, -2.24963808, -2.42390633,  4.72008085, -0.00640467]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.00529623, 5.53488350, 3.84686852, 6.07927895, 4.73510933,
          7.15927649, 6.96971941, 7.14398670, 4.72648573]]])
number of violation:  0
Attack finished in 2.3291 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 3.65191197, -0.86835623,  0.76187032, -1.35744917, -0.14156455,
         -2.51673031, -2.33077526, -2.54021835,  5.27819443,  0.06300676]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 319, 1, 194] with unstable size 318 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 194, 1, 194] with unstable size 193 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 140, 1, 194] with unstable size 139 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 279, 1, 194] with unstable size 278 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 39, 1, 194] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [318]; unstable size 318; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 194, 1, 318] with unstable size 193 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 140, 1, 318] with unstable size 139 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 279, 1, 318] with unstable size 278 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 39, 1, 318] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 318] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [193]; unstable size 193; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 140, 1, 193] with unstable size 139 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 279, 1, 193] with unstable size 278 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 39, 1, 193] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [139]; unstable size 139; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 279, 1, 139] with unstable size 278 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 39, 1, 139] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 139] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [278]; unstable size 278; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 39, 1, 278] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [38]; unstable size 38; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 38] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44046092,  3.50532675,  1.85096693,  4.33841467,  2.77809000,
          5.14807129,  4.95364428,  4.91513538,  2.99021530]]) None
best_l after optimization: 33.041053771972656
alpha/beta optimization time: 107.08222961425781
initial alpha-crown bounds: tensor([[-0.14058161,  3.88254237,  2.19897556,  4.63425064,  3.10160971,
          5.47424126,  5.27384806,  5.30604935,  3.31011629]])
Worst class: (+ rhs) -0.14058160781860352
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 10.279731750488281
##### Instance 55 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.14058161]]) need to verify.
Model prediction is: tensor([ 3.65191197, -0.86835623,  0.76187032, -1.35744917, -0.14156455,
        -2.51673031, -2.33077526, -2.54021835,  5.27819443,  0.06300676])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.14058161]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 194
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 314
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 180
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 131
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 259
Node /39 input 0: size torch.Size([100]) unstable 35
-----------------
# of unstable neurons: 1113
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 18] 
split level 1: [/38, 84] 
split level 2: [/38, 1] 
split level 3: [/38, 41] 
split level 4: [/38, 56] 
split level 5: [/38, 48] 
split level 6: [/38, 20] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 6.246566772460938e-05
Time: prepare 0.0025    bound 0.0304    transfer 0.0001    finalize 0.0038    func 0.0368    
Accumulated time: func 0.0368    prepare 0.0031    bound 0.0304    transfer 0.0001    finalize 0.0038    
length of domains: 0
Time: pickout 0.0004    decision 0.0669    set_bounds 0.0191    solve 0.0368    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0669    set_bounds 0.0191    solve 0.0368    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.13117718696594238


Properties batch 1, size 1
Remaining timeout: 10.035516738891602
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.882542371749878.

Properties batch 2, size 1
Remaining timeout: 9.966603755950928
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.1989755630493164.

Properties batch 3, size 1
Remaining timeout: 9.899312734603882
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.634250640869141.

Properties batch 4, size 1
Remaining timeout: 9.832606554031372
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.101609706878662.

Properties batch 5, size 1
Remaining timeout: 9.762097358703613
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.474241256713867.

Properties batch 6, size 1
Remaining timeout: 9.694765329360962
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.273848056793213.

Properties batch 7, size 1
Remaining timeout: 9.626549005508423
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.306049346923828.

Properties batch 8, size 1
Remaining timeout: 9.559844255447388
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.3101162910461426.
Result: safe in 110.5072 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60991311, -1.69069958, -0.82305402,  2.57261014,  0.61277050,
          3.69299483,  0.28474596,  2.74601889, -2.60646677, -2.17902517]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.60991240, -1.69069922, -0.82305461,  2.57261086,  0.61276972,
           3.69299531,  0.28474477,  2.74601912, -2.60646605, -2.17902517],
         [-2.60991240, -1.69069922, -0.82305461,  2.57261086,  0.61276972,
           3.69299531,  0.28474477,  2.74601912, -2.60646605, -2.17902517]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.35593128,  4.43671846,  3.56907368,  0.17340827,  2.13324928,
          -0.94697618,  2.46127462,  5.35248566,  4.92504454]]])
number of violation:  1
Result: unsafe-pgd in 0.0047 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.52388507,  0.63828552, -1.00438988,  0.51515520, -1.37822151,
          0.52712053,  0.72236198, -0.43914881,  0.92049617,  0.02218795]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.52388555,  0.63828528, -1.00438952,  0.51515538, -1.37822175,
           0.52712119,  0.72236073, -0.43914843,  0.92049640,  0.02218834],
         [-0.52388555,  0.63828528, -1.00438952,  0.51515538, -1.37822175,
           0.52712119,  0.72236073, -0.43914843,  0.92049640,  0.02218834]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.08473712, -1.07743371,  0.56524110, -0.95430380,  0.93907332,
          -0.96626961, -1.16150939, -1.35964489, -0.46133679]]])
number of violation:  6
Result: unsafe-pgd in 0.0042 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.14851999, -3.37251997,  1.17209220,  1.75494123,  0.44811398,
          2.24115205,  1.92208374, -0.48444203, -0.54069573, -1.99219358]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.14851987, -3.37251949,  1.17209220,  1.75494075,  0.44811356,
           2.24115133,  1.92208350, -0.48444203, -0.54069608, -1.99219191],
         [-1.14851987, -3.37251949,  1.17209220,  1.75494075,  0.44811356,
           2.24115133,  1.92208350, -0.48444203, -0.54069608, -1.99219191]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.59663343,  3.82063293, -0.72397864, -1.30682719, -1.79303777,
          -1.47396994,  0.93255544,  0.98880965,  2.44030571]]])
number of violation:  4
Result: unsafe-pgd in 0.0043 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.74212384, -1.17459893,  0.97074515,  1.68422663,  0.79992735,
          2.04064679,  1.58563769,  0.20308505, -2.70578051, -1.66180432]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.74212432, -1.17459822,  0.97074544,  1.68422639,  0.79992712,
           2.04064679,  1.58563721,  0.20308493, -2.70578027, -1.66180432],
         [-1.74212432, -1.17459822,  0.97074544,  1.68422639,  0.79992712,
           2.04064679,  1.58563721,  0.20308493, -2.70578027, -1.66180432]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.32776165,  2.76023531,  0.61489177, -0.09858918,  0.78571010,
          -0.45500958,  1.38255239,  4.29141712,  3.24744177]]])
number of violation:  2
Result: unsafe-pgd in 0.0040 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.68295360, -5.49769449,  1.02468538,  0.39436635,  5.74929333,
          1.95283771,  1.34691536,  8.16658401, -6.13095284, -4.32305288]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.71921754, -5.40920591,  1.17598271,  0.54422206,  5.60663939,
           1.97173858,  1.58404100,  7.45765114, -5.96588182, -4.24593830],
         [-2.71921754, -5.40920591,  1.17598271,  0.54422206,  5.60663939,
           1.97173858,  1.58404100,  7.45765114, -5.96588182, -4.24593830]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[10.17686844, 12.86685753,  6.28166866,  6.91342926,  1.85101175,
           5.48591232,  5.87360954, 13.42353249, 11.70358944]]])
number of violation:  0
Attack finished in 2.0817 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.68295360, -5.49769449,  1.02468538,  0.39436635,  5.74929333,
          1.95283771,  1.34691536,  8.16658401, -6.13095284, -4.32305288]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [273]; unstable size 273; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 184, 1, 273] with unstable size 183 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 177, 1, 273] with unstable size 176 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 160, 1, 273] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 317, 1, 273] with unstable size 316 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 49, 1, 273] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 273] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [183]; unstable size 183; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 177, 1, 183] with unstable size 176 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 160, 1, 183] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 317, 1, 183] with unstable size 316 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 49, 1, 183] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [176]; unstable size 176; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 160, 1, 176] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 317, 1, 176] with unstable size 316 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 49, 1, 176] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 176] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [159]; unstable size 159; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 317, 1, 159] with unstable size 316 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 49, 1, 159] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [316]; unstable size 316; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 49, 1, 316] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 316] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [48]; unstable size 48; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 48] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.02070904,  9.13715363,  3.12582779,  4.36253023,  0.48181534,
          2.84616947,  2.98702765, 10.14742088,  8.17881966]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3929 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.35568500, -4.48567772,  0.93235409,  3.64047623,  1.41335988,
          3.38021588,  2.00954342,  1.35140955, -3.62181067, -2.26427507]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.38877916, -4.51368809,  0.77917957,  3.62317467,  1.42408204,
           3.64769554,  1.89226758,  1.36903596, -3.69514275, -2.13790798],
         [-2.38877916, -4.51368809,  0.77917957,  3.62317467,  1.42408204,
           3.64769554,  1.89226758,  1.36903596, -3.69514275, -2.13790798]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 6.01195383,  8.13686275,  2.84399509,  2.19909263, -0.02452087,
           1.73090708,  2.25413799,  7.31831694,  5.76108217]]])
number of violation:  1
Attack finished in 2.0638 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0648 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.23887563,  2.12080812, -0.06195491,  0.22144711,  0.52253050,
          0.04200935,  2.84634018, -0.92740011, -1.50189745, -1.02304113]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.04093981,  2.67891598, -0.21031474,  0.08546916,  0.22264901,
          -0.12331400,  2.44150329, -0.94552809, -1.32600462, -0.78247249],
         [-2.04093981,  2.67891598, -0.21031474,  0.08546916,  0.22264901,
          -0.12331400,  2.44150329, -0.94552809, -1.32600462, -0.78247249]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.48244286, -0.23741269,  2.65181804,  2.35603404,  2.21885419,
           2.56481719,  3.38703156,  3.76750803,  3.22397614]]])
number of violation:  1
Attack finished in 2.0556 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0566 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.03309965, -0.07196647,  0.64805400,  2.29393220,  0.12323448,
          1.29354167, -0.27712777, -1.19905174, -3.52813983,  2.75052452]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.03310037, -0.07196659,  0.64805347,  2.29393244,  0.12323451,
           1.29354203, -0.27712792, -1.19905126, -3.52813959,  2.75052500],
         [-2.03310037, -0.07196659,  0.64805347,  2.29393244,  0.12323451,
           1.29354203, -0.27712792, -1.19905126, -3.52813959,  2.75052500]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.32703304,  2.36589909,  1.64587903,  2.17069793,  1.00039041,
           2.57106042,  3.49298382,  5.82207203, -0.45659280]]])
number of violation:  1
Result: unsafe-pgd in 0.0044 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.30855083, -1.39650476,  1.09414363,  1.17244101,  0.78414822,
          1.81029940,  3.35179138,  0.28028357, -3.52511477, -1.26289105]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.20022726, -1.37607419,  1.03097749,  1.27307141,  0.67679894,
           2.08905935,  2.84204221,  0.55242389, -3.62098026, -1.26703691],
         [-2.20022726, -1.37607419,  1.03097749,  1.27307141,  0.67679894,
           2.08905935,  2.84204221,  0.55242389, -3.62098026, -1.26703691]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.04226971, 4.21811628, 1.81106472, 1.56897080, 2.16524315,
          0.75298285, 2.28961802, 6.46302223, 4.10907888]]])
number of violation:  0
Attack finished in 2.0805 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.30855083, -1.39650476,  1.09414363,  1.17244101,  0.78414822,
          1.81029940,  3.35179138,  0.28028357, -3.52511477, -1.26289105]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 166, 1, 270] with unstable size 165 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 129, 1, 270] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 204, 1, 270] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 368, 1, 270] with unstable size 367 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 61, 1, 270] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [165]; unstable size 165; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 129, 1, 165] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 204, 1, 165] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 368, 1, 165] with unstable size 367 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 61, 1, 165] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [128]; unstable size 128; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 204, 1, 128] with unstable size 203 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 368, 1, 128] with unstable size 367 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 61, 1, 128] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [203]; unstable size 203; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 368, 1, 203] with unstable size 367 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 61, 1, 203] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [367]; unstable size 367; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 61, 1, 367] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 367] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [60]; unstable size 60; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.03767610, -0.71681499, -1.50026178, -0.71376479, -0.96711111,
         -1.65717733, -1.60253656,  2.73079228,  0.27826190]]) None
best_l after optimization: 2.023707389831543
alpha/beta optimization time: 144.41499614715576
initial alpha-crown bounds: tensor([[ 1.63311172, -0.15736723, -0.89362574, -0.29034233, -0.42706800,
         -1.13449049, -0.87289047,  3.34334326,  0.82303667]])
Worst class: (+ rhs) -1.1344904899597168
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -26.81817078590393
##### Instance 64 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.6331117153167725.

Properties batch 1, size 1
Remaining timeout: -26.886894702911377
##### Instance 64 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.15736723]]) need to verify.
Model prediction is: tensor([-2.30855083, -1.39650476,  1.09414363,  1.17244101,  0.78414822,
         1.81029940,  3.35179138,  0.28028357, -3.52511477, -1.26289105])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.15736723]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 270
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 162
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 125
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 198
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 345
Node /39 input 0: size torch.Size([100]) unstable 54
-----------------
# of unstable neurons: 1154
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 0] 
split level 1: [/38, 9] 
split level 2: [/38, 58] 
split level 3: [/38, 77] 
split level 4: [/38, 52] 
split level 5: [/38, 17] 
split level 6: [/38, 81] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.57763671875e-05
Time: prepare 0.0025    bound 0.0289    transfer 0.0001    finalize 0.0036    func 0.0351    
Accumulated time: func 0.0351    prepare 0.0031    bound 0.0289    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0004    decision 0.0690    set_bounds 0.0192    solve 0.0352    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0690    set_bounds 0.0192    solve 0.0352    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 147.1261 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.47289133, -3.27703953,  3.20564175,  1.63220763,  2.16634130,
          1.21329856,  3.18121529,  0.67688453, -3.24154115, -3.08411980]])
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.46909571, -3.27481890,  3.19233608,  1.61134350,  2.17727637,
           1.19314098,  3.19437432,  0.67639846, -3.23345137, -3.06750488],
         [-2.46909571, -3.27481890,  3.19233608,  1.61134350,  2.17727637,
           1.19314098,  3.19437432,  0.67639846, -3.23345137, -3.06750488]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.66143179e+00,  6.46715498e+00,  1.58099258e+00,  1.01505971e+00,
           1.99919510e+00, -2.03824043e-03,  2.51593709e+00,  6.42578697e+00,
           6.25984049e+00]]])
number of violation:  1
Attack finished in 0.0251 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 0.0265 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.97168195,  2.57376671, -0.07938714, -0.91428304, -0.61833471,
         -1.75008821,  0.47060394, -3.01327229,  1.29776788,  1.06150305]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.99738860,  1.90800464,  0.03607573, -0.90447903, -0.39218628,
          -1.73734844,  0.55537933, -2.91015053,  1.61776984,  0.82950163],
         [ 0.99738860,  1.90800464,  0.03607573, -0.90447903, -0.39218628,
          -1.73734844,  0.55537933, -2.91015053,  1.61776984,  0.82950163]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.91061604, 1.87192893, 2.81248379, 2.30019093, 3.64535308,
          1.35262537, 4.81815529, 0.29023528, 1.07850337]]])
number of violation:  0
Attack finished in 3.2858 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.97168195,  2.57376671, -0.07938714, -0.91428304, -0.61833471,
         -1.75008821,  0.47060394, -3.01327229,  1.29776788,  1.06150305]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [287]; unstable size 287; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 161, 1, 287] with unstable size 160 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 138, 1, 287] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 141, 1, 287] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 294, 1, 287] with unstable size 293 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 40, 1, 287] with unstable size 39 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [160]; unstable size 160; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 138, 1, 160] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 141, 1, 160] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 294, 1, 160] with unstable size 293 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 40, 1, 160] with unstable size 39 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [137]; unstable size 137; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 141, 1, 137] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 294, 1, 137] with unstable size 293 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 40, 1, 137] with unstable size 39 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [140]; unstable size 140; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 294, 1, 140] with unstable size 293 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 40, 1, 140] with unstable size 39 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [293]; unstable size 293; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 40, 1, 293] with unstable size 39 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 293] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [39]; unstable size 39; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 39] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.14137912, -0.52777183,  0.43630612, -0.17350531,  1.08299220,
         -1.13749540,  1.88016558, -1.39156842, -1.03753686]]) None
best_l after optimization: 1.178846001625061
alpha/beta optimization time: 109.94649696350098
initial alpha-crown bounds: tensor([[-0.79981422, -0.13717914,  0.78981066,  0.22192216,  1.44886017,
         -0.75528312,  2.29988837, -1.12521255, -0.76414627]])
Worst class: (+ rhs) -1.125212550163269
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 6.46107029914856
##### Instance 66 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.79981422]]) need to verify.
Model prediction is: tensor([ 0.97168195,  2.57376671, -0.07938714, -0.91428304, -0.61833471,
        -1.75008821,  0.47060394, -3.01327229,  1.29776788,  1.06150305])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.79981422]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 287
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 156
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 127
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 135
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 277
Node /39 input 0: size torch.Size([100]) unstable 37
-----------------
# of unstable neurons: 1019
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 61] 
split level 1: [/38, 26] 
split level 2: [/38, 21] 
split level 3: [/38, 88] 
split level 4: [/38, 84] 
split level 5: [/38, 55] 
split level 6: [/38, 82] 
pruning_in_iteration open status: True
ratio of positive domain = 116 / 128 = 0.90625
pruning-in-iteration extra time: 0.016297578811645508
Time: prepare 0.0026    bound 0.6184    transfer 0.0005    finalize 0.0033    func 0.6248    
Accumulated time: func 0.6248    prepare 0.0033    bound 0.6184    transfer 0.0005    finalize 0.0033    
Current worst splitting domains lb-rhs (depth):
-0.33958 (7), -0.32454 (7), -0.25388 (7), -0.25057 (7), -0.20729 (7), -0.20215 (7), -0.17575 (7), -0.17037 (7), -0.13434 (7), -0.13358 (7), -0.07455 (7), -0.07305 (7), 
length of domains: 12
Time: pickout 0.0004    decision 0.0651    set_bounds 0.0191    solve 0.6249    add 0.0016    
Accumulated time: pickout 0.0004    decision 0.0651    set_bounds 0.0191    solve 0.6249    add 0.0016    
Current (lb-rhs): -0.3395843505859375
12 domains visited
Cumulative time: 0.7187654972076416

BaB round 2
batch: 12
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/38, 10] [/38, 10] [/38, 10] [/38, 10] [/38, 10] [/38, 10] [/38, 10] [/38, 10] [/38, 10] [/38, 10] 
split level 1: [/38, 22] [/38, 22] [/38, 22] [/38, 22] [/38, 22] [/38, 22] [/38, 22] [/38, 22] [/38, 22] [/38, 22] 
split level 2: [/38, 68] [/28, 44] [/38, 68] [/38, 53] [/38, 68] [/38, 68] [/38, 68] [/38, 68] [/38, 68] [/38, 68] 
split level 3: [/28, 669] [/28, 36] [/38, 53] [/38, 68] [/38, 53] [/38, 53] [/28, 669] [/28, 44] [/38, 53] [/28, 669] 
pruning_in_iteration open status: True
ratio of positive domain = 144 / 192 = 0.75
pruning-in-iteration extra time: 0.029215574264526367
Time: prepare 0.0192    bound 0.8273    transfer 0.0007    finalize 0.0054    func 0.8526    
Accumulated time: func 1.4775    prepare 0.0230    bound 1.4457    transfer 0.0012    finalize 0.0087    
Current worst splitting domains lb-rhs (depth):
-0.25897 (11), -0.24231 (11), -0.23514 (11), -0.22167 (11), -0.17263 (11), -0.16871 (11), -0.16234 (11), -0.15813 (11), -0.14916 (11), -0.14914 (11), -0.14532 (11), -0.14466 (11), -0.14339 (11), -0.13664 (11), -0.13663 (11), -0.12468 (11), -0.12258 (11), -0.11741 (11), -0.10771 (11), -0.10131 (11), 
length of domains: 48
Time: pickout 0.0010    decision 0.0758    set_bounds 0.0242    solve 0.8527    add 0.0024    
Accumulated time: pickout 0.0014    decision 0.1408    set_bounds 0.0433    solve 1.4776    add 0.0040    
Current (lb-rhs): -0.25896596908569336
60 domains visited
Cumulative time: 1.6761908531188965

BaB round 3
batch: 48
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/25, 933] [/25, 933] [/25, 933] [/25, 933] [/25, 933] [/25, 933] [/25, 933] [/25, 933] [/25, 933] [/25, 933] 
split level 1: [/28, 669] [/28, 669] [/25, 1004] [/28, 669] [/28, 669] [/28, 669] [/28, 669] [/28, 669] [/25, 1004] [/28, 669] 
pruning_in_iteration open status: True
ratio of positive domain = 113 / 192 = 0.5885416666666667
pruning-in-iteration extra time: 0.03729128837585449
Time: prepare 0.0226    bound 0.9745    transfer 0.0007    finalize 0.0064    func 1.0042    
Accumulated time: func 2.4817    prepare 0.0459    bound 2.4202    transfer 0.0019    finalize 0.0150    
Current worst splitting domains lb-rhs (depth):
-0.22590 (13), -0.22170 (13), -0.21369 (13), -0.20670 (13), -0.20315 (13), -0.20175 (13), -0.19800 (13), -0.19762 (13), -0.19302 (13), -0.18984 (13), -0.18192 (13), -0.17744 (13), -0.17677 (13), -0.17544 (13), -0.16680 (13), -0.15284 (13), -0.13497 (13), -0.13266 (13), -0.12569 (13), -0.12454 (13), 
length of domains: 79
Time: pickout 0.0013    decision 0.1212    set_bounds 0.0207    solve 1.0043    add 0.0029    
Accumulated time: pickout 0.0027    decision 0.2620    set_bounds 0.0640    solve 2.4820    add 0.0070    
Current (lb-rhs): -0.22590303421020508
139 domains visited
Cumulative time: 2.8282177448272705

BaB round 4
batch: 79
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/28, 669] [/25, 1004] [/28, 669] [/25, 1004] [/28, 378] [/25, 1004] [/23, 573] [/28, 378] [/28, 378] [/28, 378] 
pruning_in_iteration open status: False
ratio of positive domain = 26 / 158 = 0.16455696202531644
pruning-in-iteration extra time: 6.031990051269531e-05
Time: prepare 0.0194    bound 1.0893    transfer 0.0001    finalize 0.0056    func 1.1145    
Accumulated time: func 3.5961    prepare 0.0658    bound 3.5095    transfer 0.0020    finalize 0.0206    
Current worst splitting domains lb-rhs (depth):
-0.20997 (14), -0.20599 (14), -0.19768 (14), -0.19709 (14), -0.19149 (14), -0.18967 (14), -0.18905 (14), -0.18649 (14), -0.18296 (14), -0.18248 (14), -0.18170 (14), -0.17960 (14), -0.17589 (14), -0.17512 (14), -0.17336 (14), -0.17260 (14), -0.17128 (14), -0.16820 (14), -0.16471 (14), -0.16276 (14), 
length of domains: 132
Time: pickout 0.0019    decision 0.1885    set_bounds 0.0104    solve 1.1145    add 0.0042    
Accumulated time: pickout 0.0046    decision 0.4505    set_bounds 0.0744    solve 3.5965    add 0.0111    
Current (lb-rhs): -0.20996904373168945
271 domains visited
Cumulative time: 4.148707151412964

BaB round 5
batch: 132
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/38, 30] [/38, 30] [/38, 30] [/28, 652] [/28, 669] [/23, 573] [/28, 378] [/38, 30] [/23, 573] [/23, 573] 
pruning_in_iteration open status: False
ratio of positive domain = 46 / 264 = 0.1742424242424242
pruning-in-iteration extra time: 6.175041198730469e-05
Time: prepare 0.0340    bound 1.5933    transfer 0.0001    finalize 0.0083    func 1.6357    
Accumulated time: func 5.2318    prepare 0.1002    bound 5.1028    transfer 0.0020    finalize 0.0289    
Current worst splitting domains lb-rhs (depth):
-0.19640 (15), -0.19227 (15), -0.18949 (15), -0.18551 (15), -0.18546 (15), -0.18418 (15), -0.17897 (15), -0.17528 (15), -0.17206 (15), -0.17157 (15), -0.17044 (15), -0.16975 (15), -0.16948 (15), -0.16884 (15), -0.16565 (15), -0.16562 (15), -0.16530 (15), -0.16408 (15), -0.16218 (15), -0.16079 (15), 
length of domains: 218
Time: pickout 0.0020    decision 0.2966    set_bounds 0.0177    solve 1.6359    add 0.0053    
Accumulated time: pickout 0.0067    decision 0.7471    set_bounds 0.0921    solve 5.2325    add 0.0164    
Current (lb-rhs): -0.19640493392944336
489 domains visited
Cumulative time: 6.107325553894043

BaB round 6
batch: 218
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/28, 51] [/28, 652] [/23, 883] [/38, 30] [/38, 30] [/28, 676] [/28, 669] [/38, 25] [/38, 30] [/28, 652] 
pruning_in_iteration open status: True
ratio of positive domain = 173 / 436 = 0.3967889908256881
pruning-in-iteration extra time: 0.0894777774810791
Time: prepare 0.0573    bound 1.9727    transfer 0.0016    finalize 0.0124    func 2.0442    
Accumulated time: func 7.2760    prepare 0.1579    bound 7.0755    transfer 0.0036    finalize 0.0413    
Current worst splitting domains lb-rhs (depth):
-0.18376 (16), -0.17948 (16), -0.17674 (16), -0.17228 (16), -0.17068 (16), -0.16990 (16), -0.16942 (16), -0.16832 (16), -0.16812 (16), -0.16540 (16), -0.16393 (16), -0.16363 (16), -0.16138 (16), -0.16135 (16), -0.16050 (16), -0.15949 (16), -0.15867 (16), -0.15839 (16), -0.15712 (16), -0.15590 (16), 
length of domains: 263
Time: pickout 0.0029    decision 0.4634    set_bounds 0.0302    solve 2.0443    add 0.0064    
Accumulated time: pickout 0.0095    decision 1.2105    set_bounds 0.1223    solve 7.2768    add 0.0228    
Current (lb-rhs): -0.18376398086547852
752 domains visited
Time out!!!!!!!!
Result: unknown in 122.3103 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.33936691, -2.84660912,  3.81090784,  0.07268485,  1.13202405,
         -0.43485481, -0.20337296, -1.43338454, -0.40409249, -3.03271437]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.64477515, -2.62545013,  3.62631297, -0.09639856,  1.11001956,
          -0.72740549, -0.30762821, -1.57303047, -0.12815112, -2.92309332],
         [ 3.64477515, -2.62545013,  3.62631297, -0.09639856,  1.11001956,
          -0.72740549, -0.30762821, -1.57303047, -0.12815112, -2.92309332]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.01846218,  6.25176334,  3.72271156,  2.51629353,  4.35371828,
           3.93394113,  5.19934368,  3.75446367,  6.54940605]]])
number of violation:  1
Attack finished in 2.0584 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0596 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.13798571, -0.36112058,  0.76476640,  2.03609514,  1.06931257,
          2.20258141, -0.27344409, -0.04049660, -2.39977551,  0.14000456]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.13798571, -0.36112076,  0.76476669,  2.03609514,  1.06931210,
           2.20258164, -0.27344403, -0.04049624, -2.39977551,  0.14000355],
         [-3.13798571, -0.36112076,  0.76476669,  2.03609514,  1.06931210,
           2.20258164, -0.27344403, -0.04049624, -2.39977551,  0.14000355]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 5.17408085,  2.39721584,  1.27132845,  0.96678305, -0.16648650,
           2.30953908,  2.07659125,  4.43587112,  1.89609146]]])
number of violation:  1
Result: unsafe-pgd in 0.0057 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.78042686,  0.56428206, -0.51814520,  0.09670779, -0.30253005,
          0.20473200, -3.57544279,  2.14767075, -0.76418436,  2.92725420]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.78042656,  0.56428194, -0.51814502,  0.09670746, -0.30252957,
           0.20473161, -3.57544327,  2.14767098, -0.76418447,  2.92725420],
         [-0.78042656,  0.56428194, -0.51814502,  0.09670746, -0.30252957,
           0.20473161, -3.57544327,  2.14767098, -0.76418447,  2.92725420]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 2.92809749,  1.58338904,  2.66581607,  2.05096340,  2.45020056,
           1.94293940,  5.72311449,  2.91185570, -0.77958345]]])
number of violation:  1
Result: unsafe-pgd in 0.0047 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.54925513, -2.72697258,  1.73562682,  0.64711589,  1.07078576,
         -0.09175476,  0.71209234, -1.73217547,  0.82847172, -1.99252570]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.76036036, -2.47904062,  1.46537006,  0.54824227,  0.87086874,
          -0.26946634,  0.50915390, -1.92051709,  1.09262192, -1.57768035],
         [ 1.76036036, -2.47904062,  1.46537006,  0.54824227,  0.87086874,
          -0.26946634,  0.50915390, -1.92051709,  1.09262192, -1.57768035]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.29499030,  3.94441080,  0.91712779,  0.59450132,  1.73483634,
           0.95621616,  3.38588762,  0.37274861,  3.04305077]]])
number of violation:  1
Attack finished in 2.0484 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0492 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.51496053,  0.43564582,  0.06650729,  0.82368743,  0.36553022,
          0.62609553,  2.48431683, -1.35634828, -2.33367014,  0.40318760]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.30324638,  1.29349458, -0.13611746,  0.55475259, -0.02125797,
           0.30480617,  2.13762403, -1.62278640, -2.17908931,  0.97180885],
         [-1.30324638,  1.29349458, -0.13611746,  0.55475259, -0.02125797,
           0.30480617,  2.13762403, -1.62278640, -2.17908931,  0.97180885]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.44087029, 0.84412944, 2.27374148, 1.58287144, 2.15888190,
          1.83281779, 3.76041079, 4.31671429, 1.16581559]]])
number of violation:  0
Attack finished in 2.0570 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.51496053,  0.43564582,  0.06650729,  0.82368743,  0.36553022,
          0.62609553,  2.48431683, -1.35634828, -2.33367014,  0.40318760]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 148, 1, 191] with unstable size 147 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 155, 1, 191] with unstable size 154 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 132, 1, 191] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 334, 1, 191] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 43, 1, 191] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [147]; unstable size 147; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 155, 1, 147] with unstable size 154 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 132, 1, 147] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 334, 1, 147] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 43, 1, 147] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [154]; unstable size 154; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 132, 1, 154] with unstable size 131 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 334, 1, 154] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 43, 1, 154] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [131]; unstable size 131; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 334, 1, 131] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 43, 1, 131] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 131] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [333]; unstable size 333; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 43, 1, 333] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [42]; unstable size 42; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 42] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.72290611, -1.54602218,  0.06771660, -0.34596181, -0.44133472,
         -0.46866149,  0.68141460,  1.91529679, -1.08162761]]) None
best_l after optimization: 2.025973081588745
alpha/beta optimization time: 120.79105615615845
initial alpha-crown bounds: tensor([[ 1.05705893, -1.19891644,  0.33629584, -0.14390647, -0.18560791,
         -0.22091860,  1.01588202,  2.18211746, -0.81603169]])
Worst class: (+ rhs) -1.1989164352416992
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -3.1758198738098145
##### Instance 71 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.0570589303970337.

Properties batch 1, size 1
Remaining timeout: -3.2443344593048096
##### Instance 71 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-1.19891644]]) need to verify.
Model prediction is: tensor([-1.51496053,  0.43564582,  0.06650729,  0.82368743,  0.36553022,
         0.62609553,  2.48431683, -1.35634828, -2.33367014,  0.40318760])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.19891644]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 191
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 143
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 152
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 126
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 310
Node /39 input 0: size torch.Size([100]) unstable 40
-----------------
# of unstable neurons: 962
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 9] 
split level 1: [/38, 0] 
split level 2: [/38, 71] 
split level 3: [/38, 31] 
split level 4: [/38, 49] 
split level 5: [/38, 63] 
split level 6: [/38, 18] 
pruning_in_iteration open status: True
ratio of positive domain = 103 / 128 = 0.8046875
pruning-in-iteration extra time: 0.019589900970458984
Time: prepare 0.0028    bound 0.6594    transfer 0.0006    finalize 0.0033    func 0.6661    
Accumulated time: func 0.6661    prepare 0.0034    bound 0.6594    transfer 0.0006    finalize 0.0033    
Current worst splitting domains lb-rhs (depth):
-0.35973 (7), -0.30390 (7), -0.29566 (7), -0.25340 (7), -0.23184 (7), -0.21902 (7), -0.17604 (7), -0.15450 (7), -0.15339 (7), -0.15327 (7), -0.13463 (7), -0.12193 (7), -0.11660 (7), -0.10915 (7), -0.10802 (7), -0.08461 (7), -0.08202 (7), -0.06813 (7), -0.06512 (7), -0.06058 (7), 
length of domains: 25
Time: pickout 0.0005    decision 0.0706    set_bounds 0.0199    solve 0.6662    add 0.0019    
Accumulated time: pickout 0.0005    decision 0.0706    set_bounds 0.0199    solve 0.6662    add 0.0019    
Current (lb-rhs): -0.35973215103149414
25 domains visited
Time out!!!!!!!!
Result: unknown in 124.1175 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 4.50444412, -0.56293923,  1.29852664, -1.50797880, -0.57472312,
         -3.39927197, -1.82888949, -4.01810932,  6.06811571,  0.02063078]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 4.66909361, -0.53854638,  1.37961233, -1.48536122, -0.47417325,
          -3.34989762, -1.84319663, -3.92858958,  5.61990404, -0.04903479],
         [ 4.66909361, -0.53854638,  1.37961233, -1.48536122, -0.47417325,
          -3.34989762, -1.84319663, -3.92858958,  5.61990404, -0.04903479]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[0.95081043, 6.15845060, 4.24029160, 7.10526514, 6.09407711,
          8.96980190, 7.46310043, 9.54849434, 5.66893864]]])
number of violation:  0
Attack finished in 2.0414 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 4.50444412, -0.56293923,  1.29852664, -1.50797880, -0.57472312,
         -3.39927197, -1.82888949, -4.01810932,  6.06811571,  0.02063078]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [363]; unstable size 363; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 336, 1, 363] with unstable size 335 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 146, 1, 363] with unstable size 145 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 134, 1, 363] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 284, 1, 363] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 39, 1, 363] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 363] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [335]; unstable size 335; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 146, 1, 335] with unstable size 145 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 134, 1, 335] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 284, 1, 335] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 39, 1, 335] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 335] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [145]; unstable size 145; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 134, 1, 145] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 284, 1, 145] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 39, 1, 145] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 145] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [133]; unstable size 133; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 284, 1, 133] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 39, 1, 133] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [283]; unstable size 283; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 39, 1, 283] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 283] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [38]; unstable size 38; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 38] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.65787071,  3.67316294,  2.32848501,  4.98745632,  3.82900524,
          6.54240227,  5.00296974,  6.77704048,  3.65046430]]) None
best_l after optimization: 38.9477653503418
alpha/beta optimization time: 109.49942374229431
initial alpha-crown bounds: tensor([[-0.37908030,  4.04547358,  2.61518788,  5.27688694,  4.14768934,
          6.86925316,  5.29675579,  7.16661835,  3.90897918]])
Worst class: (+ rhs) -0.37908029556274414
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 8.148107528686523
##### Instance 72 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.37908030]]) need to verify.
Model prediction is: tensor([ 4.50444412, -0.56293923,  1.29852664, -1.50797880, -0.57472312,
        -3.39927197, -1.82888949, -4.01810932,  6.06811571,  0.02063078])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37908030]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 363
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 333
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 133
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 130
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 270
Node /39 input 0: size torch.Size([100]) unstable 36
-----------------
# of unstable neurons: 1265
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 39] 
split level 1: [/38, 84] 
split level 2: [/38, 51] 
split level 3: [/38, 18] 
split level 4: [/38, 99] 
split level 5: [/28, 564] 
split level 6: [/38, 56] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 6.747245788574219e-05
Time: prepare 0.0041    bound 0.0312    transfer 0.0001    finalize 0.0040    func 0.0394    
Accumulated time: func 0.0394    prepare 0.0048    bound 0.0312    transfer 0.0001    finalize 0.0040    
length of domains: 0
Time: pickout 0.0005    decision 0.0648    set_bounds 0.0200    solve 0.0395    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0648    set_bounds 0.0200    solve 0.0395    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.13294076919555664


Properties batch 1, size 1
Remaining timeout: 7.907485246658325
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.045473575592041.

Properties batch 2, size 1
Remaining timeout: 7.837332725524902
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.615187883377075.

Properties batch 3, size 1
Remaining timeout: 7.7704758644104
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.276886940002441.

Properties batch 4, size 1
Remaining timeout: 7.7034523487091064
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.147689342498779.

Properties batch 5, size 1
Remaining timeout: 7.635708808898926
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 6.869253158569336.

Properties batch 6, size 1
Remaining timeout: 7.566882848739624
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 5.296755790710449.

Properties batch 7, size 1
Remaining timeout: 7.500080823898315
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 7.166618347167969.

Properties batch 8, size 1
Remaining timeout: 7.431638956069946
##### Instance 72 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.9089791774749756.
Result: safe in 112.6357 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.79405951,  1.90166104, -0.96842045, -1.30662560, -1.38595867,
         -2.57904053, -3.08134317, -2.64991879,  5.86892414,  1.40650642]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.05362034,  1.84610808, -0.83875066, -1.35682619, -1.25607371,
          -2.61458087, -3.20743322, -2.52195048,  5.54375696,  1.35197151],
         [ 3.05362034,  1.84610808, -0.83875066, -1.35682619, -1.25607371,
          -2.61458087, -3.20743322, -2.52195048,  5.54375696,  1.35197151]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[2.49013662, 3.69764900, 6.38250780, 6.90058327, 6.79983044,
          8.15833759, 8.75119019, 8.06570816, 4.19178629]]])
number of violation:  0
Attack finished in 2.0800 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 2.79405951,  1.90166104, -0.96842045, -1.30662560, -1.38595867,
         -2.57904053, -3.08134317, -2.64991879,  5.86892414,  1.40650642]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 268, 1, 266] with unstable size 267 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 216, 1, 266] with unstable size 215 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 182, 1, 266] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 351, 1, 266] with unstable size 350 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 45, 1, 266] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [267]; unstable size 267; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 216, 1, 267] with unstable size 215 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 182, 1, 267] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 351, 1, 267] with unstable size 350 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 45, 1, 267] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 267] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [215]; unstable size 215; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 182, 1, 215] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 351, 1, 215] with unstable size 350 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 45, 1, 215] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [181]; unstable size 181; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 351, 1, 181] with unstable size 350 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 45, 1, 181] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 181] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [350]; unstable size 350; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 45, 1, 350] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 350] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 44] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.71983576, 1.56727624, 3.21240687, 4.57069731, 4.11776495, 5.26349211,
         6.13110256, 5.20264053, 1.97532129]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4089 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.62883282,  1.23353732, -0.83349293, -0.96402717, -0.16038644,
         -1.78222704, -2.65820956,  0.71718979, -0.02615435,  2.84485722]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.62883258,  1.23353803, -0.83349341, -0.96402729, -0.16038692,
          -1.78222728, -2.65820932,  0.71718931, -0.02615353,  2.84485769],
         [ 1.62883258,  1.23353803, -0.83349341, -0.96402729, -0.16038692,
          -1.78222728, -2.65820932,  0.71718931, -0.02615353,  2.84485769]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 0.39529455,  2.46232605,  2.59285975,  1.78921950,  3.41105986,
           4.28704166,  0.91164351,  1.65498650, -1.21602428]]])
number of violation:  1
Result: unsafe-pgd in 0.0042 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.58184910, -4.24538469,  3.94070816,  1.27570045,  1.97908163,
          1.59743595,  1.57976472,  0.40732872, -2.57721210, -2.37554836]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.65701413, -4.26940489,  3.69265676,  1.32990515,  2.15236664,
           1.60413790,  1.55750751,  0.53470290, -2.57631159, -2.36851692],
         [-1.65701413, -4.26940489,  3.69265676,  1.32990515,  2.15236664,
           1.60413790,  1.55750751,  0.53470290, -2.57631159, -2.36851692]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.34967089, 7.96206188, 2.36275148, 1.54029012, 2.08851886,
          2.13514924, 3.15795422, 6.26896858, 6.06117392]]])
number of violation:  0
Attack finished in 2.0725 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.58184910, -4.24538469,  3.94070816,  1.27570045,  1.97908163,
          1.59743595,  1.57976472,  0.40732872, -2.57721210, -2.37554836]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 248, 1, 286] with unstable size 247 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 156, 1, 286] with unstable size 155 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 163, 1, 286] with unstable size 162 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 255, 1, 286] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 43, 1, 286] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [247]; unstable size 247; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 156, 1, 247] with unstable size 155 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 163, 1, 247] with unstable size 162 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 255, 1, 247] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 43, 1, 247] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 247] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [155]; unstable size 155; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 163, 1, 155] with unstable size 162 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 255, 1, 155] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 43, 1, 155] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [162]; unstable size 162; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 255, 1, 162] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 43, 1, 162] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [254]; unstable size 254; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 43, 1, 254] with unstable size 42 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [42]; unstable size 42; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 42] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.55428886, 5.87771606, 1.00264001, 0.38978684, 0.54955888, 0.44913757,
         1.38670254, 3.76493549, 3.89364290]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3732 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 1.51562762,  1.07757318,  0.15006216, -0.65500236, -1.12095857,
         -1.62923372, -1.93080676,  0.26633969, -0.06629054,  2.39255476]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 1.89701629,  0.88341081,  0.49067706, -0.66648173, -1.04287291,
          -1.76766205, -2.08993602,  0.25282270,  0.19600432,  1.84688497],
         [ 1.89701629,  0.88341081,  0.49067706, -0.66648173, -1.04287291,
          -1.76766205, -2.08993602,  0.25282270,  0.19600432,  1.84688497]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.05013132,  0.96347415,  1.35620785,  2.51336670,  2.88975787,
           3.61454701,  3.93682098,  1.59406245,  1.65088069]]])
number of violation:  1
Attack finished in 2.0685 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.08882451, -0.42401570,  0.29808369,  2.77131677, -0.21564859,
          2.17352033,  0.88756967, -1.88122368, -0.16697431, -2.35390615]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.06252253, -0.61696756,  0.37879589,  2.76736784, -0.23210329,
           2.45595956,  0.74893427, -1.76056302, -0.32940966, -2.34959888],
         [-1.06252253, -0.61696756,  0.37879589,  2.76736784, -0.23210329,
           2.45595956,  0.74893427, -1.76056302, -0.32940966, -2.34959888]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.82989025, 3.38433552, 2.38857198, 2.99947119, 0.31140828,
          2.01843357, 4.52793121, 3.09677768, 5.11696625]]])
number of violation:  0
Attack finished in 2.0639 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.08882451, -0.42401570,  0.29808369,  2.77131677, -0.21564859,
          2.17352033,  0.88756967, -1.88122368, -0.16697431, -2.35390615]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 172, 1, 186] with unstable size 171 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 152, 1, 186] with unstable size 151 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 100, 1, 186] with unstable size 99 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 261, 1, 186] with unstable size 260 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 186] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [171]; unstable size 171; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 152, 1, 171] with unstable size 151 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 100, 1, 171] with unstable size 99 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 261, 1, 171] with unstable size 260 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 171] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [151]; unstable size 151; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 100, 1, 151] with unstable size 99 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 261, 1, 151] with unstable size 260 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 151] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [99]; unstable size 99; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 261, 1, 99] with unstable size 260 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 99] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 99] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [260]; unstable size 260; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 260] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70363379,  0.42362785,  0.82279885,  1.85369682, -0.25177640,
          0.38867331,  3.30760694,  0.52583861,  2.85830832]]) None
best_l after optimization: 12.630044937133789
alpha/beta optimization time: 96.88243532180786
initial alpha-crown bounds: tensor([[ 1.84254825,  0.59143543,  0.92106396,  1.93737459, -0.19134168,
          0.48211348,  3.38807154,  0.66270113,  2.99607754]])
Worst class: (+ rhs) -0.19134168326854706
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 20.742322206497192
##### Instance 77 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.8425482511520386.

Properties batch 1, size 1
Remaining timeout: 20.672218561172485
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.591435432434082.

Properties batch 2, size 1
Remaining timeout: 20.60528326034546
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.9210639595985413.

Properties batch 3, size 1
Remaining timeout: 20.538467407226562
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.9373745918273926.

Properties batch 4, size 1
Remaining timeout: 20.47043490409851
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.19134168]]) need to verify.
Model prediction is: tensor([-1.08882451, -0.42401570,  0.29808369,  2.77131677, -0.21564859,
         2.17352033,  0.88756967, -1.88122368, -0.16697431, -2.35390615])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19134168]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 186
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 169
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 147
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 98
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 252
Node /39 input 0: size torch.Size([100]) unstable 32
-----------------
# of unstable neurons: 884
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 14] 
split level 1: [/38, 78] 
split level 2: [/38, 2] 
split level 3: [/38, 57] 
split level 4: [/38, 92] 
split level 5: [/38, 72] 
split level 6: [/38, 19] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.935264587402344e-05
Time: prepare 0.0025    bound 0.0297    transfer 0.0001    finalize 0.0034    func 0.0357    
Accumulated time: func 0.0357    prepare 0.0033    bound 0.0297    transfer 0.0001    finalize 0.0034    
length of domains: 0
Time: pickout 0.0004    decision 0.0649    set_bounds 0.0199    solve 0.0358    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0649    set_bounds 0.0199    solve 0.0358    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.12830519676208496


Properties batch 5, size 1
Remaining timeout: 20.23646068572998
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.48211348056793213.

Properties batch 6, size 1
Remaining timeout: 20.166393995285034
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.3880715370178223.

Properties batch 7, size 1
Remaining timeout: 20.099636793136597
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.6627011299133301.

Properties batch 8, size 1
Remaining timeout: 20.03235912322998
##### Instance 77 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.996077537536621.
Result: safe in 100.0351 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.71602154, -3.39028835,  1.08750439,  3.83995485,  1.34330726,
          3.80743933,  1.78367579,  0.04921313, -2.53991175, -3.26494980]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.58979893, -3.38277674,  1.07107222,  3.73882246,  1.26638126,
           3.95323229,  1.50992668,  0.17416723, -2.62618732, -3.11491632],
         [-2.58979893, -3.38277674,  1.07107222,  3.73882246,  1.26638126,
           3.95323229,  1.50992668,  0.17416723, -2.62618732, -3.11491632]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 6.32862139,  7.12159920,  2.66775036,  2.47244120, -0.21440983,
           2.22889566,  3.56465507,  6.36500931,  6.85373878]]])
number of violation:  1
Attack finished in 2.0516 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.0529 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.22539973,  0.89424956, -1.22433615,  0.02875671, -0.67037135,
         -2.24212503, -2.21951628, -2.02703643,  4.22505283,  1.00982535]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.38877201,  0.86351848, -1.24494588,  0.01377079, -0.59978479,
          -2.18547773, -2.19944382, -1.87640333,  3.72874713,  1.11114573],
         [ 2.38877201,  0.86351848, -1.24494588,  0.01377079, -0.59978479,
          -2.18547773, -2.19944382, -1.87640333,  3.72874713,  1.11114573]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.33997512, 2.86522865, 4.97369289, 3.71497631, 4.32853174,
          5.91422462, 5.92819166, 5.60515070, 2.61760139]]])
number of violation:  0
Attack finished in 2.0563 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 2.22539973,  0.89424956, -1.22433615,  0.02875671, -0.67037135,
         -2.24212503, -2.21951628, -2.02703643,  4.22505283,  1.00982535]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 161, 1, 168] with unstable size 160 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 75, 1, 168] with unstable size 74 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 78, 1, 168] with unstable size 77 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 171, 1, 168] with unstable size 170 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 23, 1, 168] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [160]; unstable size 160; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 75, 1, 160] with unstable size 74 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 78, 1, 160] with unstable size 77 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 171, 1, 160] with unstable size 170 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 23, 1, 160] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [74]; unstable size 74; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 78, 1, 74] with unstable size 77 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 171, 1, 74] with unstable size 170 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 23, 1, 74] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 74] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [77]; unstable size 77; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 171, 1, 77] with unstable size 170 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 23, 1, 77] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 77] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [170]; unstable size 170; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 23, 1, 170] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 170] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.52105165, 1.65045214, 3.92622328, 2.68816304, 3.24708343, 4.76167011,
         4.72417355, 4.30709267, 1.50533581]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.3395 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.67794394,  1.07307994, -0.17068832, -1.18598974, -0.93077785,
         -2.18761420, -3.47833347, -2.74732637,  5.82334328,  0.12623464]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.85928392,  0.96212101,  0.03207133, -1.25050330, -0.76431197,
          -2.22154856, -3.52949119, -2.51174664,  5.35966969,  0.06433135],
         [ 3.85928392,  0.96212101,  0.03207133, -1.25050330, -0.76431197,
          -2.22154856, -3.52949119, -2.51174664,  5.35966969,  0.06433135]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.50038576, 4.39754868, 5.32759857, 6.61017323, 6.12398148,
          7.58121824, 8.88916016, 7.87141609, 5.29533815]]])
number of violation:  0
Attack finished in 2.0904 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 3.67794394,  1.07307994, -0.17068832, -1.18598974, -0.93077785,
         -2.18761420, -3.47833347, -2.74732637,  5.82334328,  0.12623464]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 233, 1, 214] with unstable size 232 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 175, 1, 214] with unstable size 174 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 161, 1, 214] with unstable size 160 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 320, 1, 214] with unstable size 319 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 45, 1, 214] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [232]; unstable size 232; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 175, 1, 232] with unstable size 174 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 161, 1, 232] with unstable size 160 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 320, 1, 232] with unstable size 319 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 45, 1, 232] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 232] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [174]; unstable size 174; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 161, 1, 174] with unstable size 160 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 320, 1, 174] with unstable size 319 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 45, 1, 174] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [160]; unstable size 160; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 320, 1, 160] with unstable size 319 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 45, 1, 160] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 160] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [319]; unstable size 319; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 45, 1, 319] with unstable size 44 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 319] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [44]; unstable size 44; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 44] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44349360,  1.30452490,  2.52457714,  3.91945744,  3.30311465,
          4.38977575,  5.84689426,  4.28728390,  2.33922529]]) None
best_l after optimization: 31.685958862304688
alpha/beta optimization time: 127.36674165725708
initial alpha-crown bounds: tensor([[-0.07452071,  1.82138348,  3.00358486,  4.34020519,  3.73759627,
          4.86729670,  6.32480764,  4.85910034,  2.80650377]])
Worst class: (+ rhs) -0.07452070713043213
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -9.782493591308594
##### Instance 80 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.07452071]]) need to verify.
Model prediction is: tensor([ 3.67794394,  1.07307994, -0.17068832, -1.18598974, -0.93077785,
        -2.18761420, -3.47833347, -2.74732637,  5.82334328,  0.12623464])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.07452071]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 214
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 224
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 163
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 154
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 301
Node /39 input 0: size torch.Size([100]) unstable 39
-----------------
# of unstable neurons: 1095
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 38] 
split level 1: [/38, 48] 
split level 2: [/38, 90] 
split level 3: [/38, 20] 
split level 4: [/38, 76] 
split level 5: [/38, 21] 
split level 6: [/38, 18] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.315376281738281e-05
Time: prepare 0.0026    bound 0.0332    transfer 0.0001    finalize 0.0036    func 0.0396    
Accumulated time: func 0.0396    prepare 0.0035    bound 0.0332    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0010    decision 0.0839    set_bounds 0.0207    solve 0.0396    add 0.0001    
Accumulated time: pickout 0.0010    decision 0.0839    set_bounds 0.0207    solve 0.0396    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 130.0926 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.90315342,  4.29848957, -2.28628922, -1.17786479, -2.68740773,
         -2.20178366, -1.88962972, -2.33297443,  1.30156517,  4.07263803]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.86075044,  4.00879002, -2.30692291, -1.10820866, -2.59949517,
          -2.11372805, -1.94649708, -2.10682297,  1.18439698,  4.12763214],
         [ 2.86075044,  4.00879002, -2.30692291, -1.10820866, -2.59949517,
          -2.11372805, -1.94649708, -2.10682297,  1.18439698,  4.12763214]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.14803958,  6.31571293,  5.11699867,  6.60828495,  6.12251806,
           5.95528698,  6.11561203,  2.82439256, -0.11884212]]])
number of violation:  1
Attack finished in 2.1848 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.1860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.25779271,  7.76926041, -0.09147961, -1.67935681, -2.18832660,
         -3.22742176, -1.36234546, -3.91840196,  0.56594050,  1.87432492]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.66651034,  7.14737797,  0.05344059, -1.64785790, -1.99991322,
          -3.15253043, -1.32334471, -3.80353951,  0.57026374,  1.48957670],
         [ 2.66651034,  7.14737797,  0.05344059, -1.64785790, -1.99991322,
          -3.15253043, -1.32334471, -3.80353951,  0.57026374,  1.48957670]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 4.48086739,  7.09393740,  8.79523563,  9.14729118, 10.29990864,
           8.47072220, 10.95091724,  6.57711458,  5.65780210]]])
number of violation:  0
Attack finished in 3.4046 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 2.25779271,  7.76926041, -0.09147961, -1.67935681, -2.18832660,
         -3.22742176, -1.36234546, -3.91840196,  0.56594050,  1.87432492]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [268]; unstable size 268; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 192, 1, 268] with unstable size 191 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 150, 1, 268] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 158, 1, 268] with unstable size 157 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 269, 1, 268] with unstable size 268 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 268] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 268] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [191]; unstable size 191; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 150, 1, 191] with unstable size 149 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 158, 1, 191] with unstable size 157 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 269, 1, 191] with unstable size 268 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 191] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [149]; unstable size 149; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 158, 1, 149] with unstable size 157 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 269, 1, 149] with unstable size 268 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 149] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [157]; unstable size 157; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 269, 1, 157] with unstable size 268 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 157] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [268]; unstable size 268; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 268] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 268] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.21542168, 3.94532633, 6.12108707, 6.12505913, 7.24210501, 5.62790680,
         7.34798336, 3.93421221, 3.54137182]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 3.7342 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.78080678, -2.26038313,  0.35833749,  1.41350949,  1.15713477,
          1.97317266, -1.36400080,  2.28046513, -2.16135907, -2.17780352]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.75182259, -2.44942045,  0.43622872,  1.65225554,  0.98670572,
           2.25835609, -1.09411025,  1.84515250, -2.11760879, -2.26950073],
         [ 0.75182259, -2.44942045,  0.43622872,  1.65225554,  0.98670572,
           2.25835609, -1.09411025,  1.84515250, -2.11760879, -2.26950073]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.09332991,  4.29457283,  1.40892375,  0.19289696,  0.85844678,
          -0.41320360,  2.93926287,  3.96276093,  4.11465311]]])
number of violation:  1
Attack finished in 2.9746 seconds.
PGD attack succeeded!
Result: unsafe-pgd in 2.9757 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.76224136, -2.53992414,  3.18884611,  1.30235696,  0.31734306,
          0.97252792, -0.70018482, -0.14899118, -0.04856189, -3.10574150]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.60835671, -2.70313597,  2.88611436,  1.44343615,  0.30958229,
           1.13917685, -0.64762998, -0.12487935,  0.03377603, -2.94488144],
         [ 0.60835671, -2.70313597,  2.88611436,  1.44343615,  0.30958229,
           1.13917685, -0.64762998, -0.12487935,  0.03377603, -2.94488144]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[2.27775764, 5.58925056, 1.44267821, 2.57653213, 1.74693751,
          3.53374434, 3.01099348, 2.85233808, 5.83099604]]])
number of violation:  0
Attack finished in 2.9521 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.76224136, -2.53992414,  3.18884611,  1.30235696,  0.31734306,
          0.97252792, -0.70018482, -0.14899118, -0.04856189, -3.10574150]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [287]; unstable size 287; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 160, 1, 287] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 116, 1, 287] with unstable size 115 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 101, 1, 287] with unstable size 100 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 219, 1, 287] with unstable size 218 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 34, 1, 287] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 287] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [159]; unstable size 159; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 116, 1, 159] with unstable size 115 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 101, 1, 159] with unstable size 100 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 219, 1, 159] with unstable size 218 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 34, 1, 159] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [115]; unstable size 115; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 101, 1, 115] with unstable size 100 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 219, 1, 115] with unstable size 218 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 34, 1, 115] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 115] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [100]; unstable size 100; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 219, 1, 100] with unstable size 218 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 34, 1, 100] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 100] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [218]; unstable size 218; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 34, 1, 218] with unstable size 33 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [33]; unstable size 33; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 33] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.02134907, 3.49569750, 0.58850312, 1.62925625, 0.72409213, 2.78472447,
         1.87850618, 1.57664239, 3.89732003]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 3.2488 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 9.05439258e-01, -2.99509811e+00,  5.46685040e-01, -2.29507685e-04,
          1.66143084e+00,  8.91251564e-01, -3.47208595e+00,  5.18004990e+00,
         -2.55262685e+00, -1.64758801e-01]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 9.05438066e-01, -2.99509859e+00,  5.46685100e-01, -2.29507685e-04,
           1.66143131e+00,  8.91251743e-01, -3.47208595e+00,  5.18005085e+00,
          -2.55262733e+00, -1.64758295e-01],
         [ 9.05438066e-01, -2.99509859e+00,  5.46685100e-01, -2.29507685e-04,
           1.66143131e+00,  8.91251743e-01, -3.47208595e+00,  5.18005085e+00,
          -2.55262733e+00, -1.64758295e-01]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.01418632,  3.88635039,  0.34456664,  0.89148128, -0.77017957,
           4.36333752, -4.28879881,  3.44387913,  1.05601013]]])
number of violation:  3
Result: unsafe-pgd in 0.0043 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.59645969, -0.63597739,  2.15801716,  0.79862392, -0.43138403,
          0.79286832, -2.70320654, -0.89569283,  0.77461511, -0.45441043]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.69458890, -0.54426354,  1.89168155,  0.73938143, -0.50267327,
           0.71380967, -2.77870321, -1.03721797,  1.23289120, -0.40958101],
         [ 0.69458890, -0.54426354,  1.89168155,  0.73938143, -0.50267327,
           0.71380967, -2.77870321, -1.03721797,  1.23289120, -0.40958101]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[1.19709265, 2.43594503, 1.15230012, 2.39435482, 1.17787194,
          4.67038488, 2.92889929, 0.65879035, 2.30126286]]])
number of violation:  0
Attack finished in 2.5479 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.59645969, -0.63597739,  2.15801716,  0.79862392, -0.43138403,
          0.79286832, -2.70320654, -0.89569283,  0.77461511, -0.45441043]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 163, 1, 189] with unstable size 162 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 142, 1, 189] with unstable size 141 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 138, 1, 189] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 255, 1, 189] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 28, 1, 189] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [162]; unstable size 162; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 142, 1, 162] with unstable size 141 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 138, 1, 162] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 255, 1, 162] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 28, 1, 162] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [141]; unstable size 141; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 138, 1, 141] with unstable size 137 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 255, 1, 141] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 28, 1, 141] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 141] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [137]; unstable size 137; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 255, 1, 137] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 28, 1, 137] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 137] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [254]; unstable size 254; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 28, 1, 254] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.11312890,  0.69917059, -0.25178775,  1.20751500, -0.26779813,
          3.43615842,  1.52983451, -0.63940144,  0.49839973]]) None
best_l after optimization: 7.809900760650635
alpha/beta optimization time: 106.04302787780762
initial alpha-crown bounds: tensor([[ 0.25846076,  0.93250084, -0.11514988,  1.31665349, -0.11259450,
          3.55485296,  1.64972615, -0.42785209,  0.75330305]])
Worst class: (+ rhs) -0.4278520941734314
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 11.10053038597107
##### Instance 86 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.25846076011657715.

Properties batch 1, size 1
Remaining timeout: 11.03114652633667
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.9325008392333984.

Properties batch 2, size 1
Remaining timeout: 10.96306324005127
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.11514988]]) need to verify.
Model prediction is: tensor([ 0.59645969, -0.63597739,  2.15801716,  0.79862392, -0.43138403,
         0.79286832, -2.70320654, -0.89569283,  0.77461511, -0.45441043])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11514988]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 189
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 159
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 137
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 131
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 241
Node /39 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 883
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 17] 
split level 1: [/38, 84] 
split level 2: [/38, 6] 
split level 3: [/38, 79] 
split level 4: [/38, 83] 
split level 5: [/38, 64] 
split level 6: [/38, 90] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.076957702636719e-05
Time: prepare 0.0024    bound 0.0288    transfer 0.0001    finalize 0.0036    func 0.0349    
Accumulated time: func 0.0349    prepare 0.0031    bound 0.0288    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0006    decision 0.0661    set_bounds 0.0189    solve 0.0350    add 0.0001    
Accumulated time: pickout 0.0006    decision 0.0661    set_bounds 0.0189    solve 0.0350    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.12795138359069824


Properties batch 3, size 1
Remaining timeout: 10.72626805305481
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.3166534900665283.

Properties batch 4, size 1
Remaining timeout: 10.658449172973633
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.11259450]]) need to verify.
Model prediction is: tensor([ 0.59645969, -0.63597739,  2.15801716,  0.79862392, -0.43138403,
         0.79286832, -2.70320654, -0.89569283,  0.77461511, -0.45441043])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11259450]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 189
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 159
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 137
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 131
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 241
Node /39 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 883
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 14] 
split level 1: [/38, 84] 
split level 2: [/38, 17] 
split level 3: [/38, 79] 
split level 4: [/38, 90] 
split level 5: [/38, 51] 
split level 6: [/38, 64] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 3.910064697265625e-05
Time: prepare 0.0026    bound 0.0302    transfer 0.0001    finalize 0.0036    func 0.0366    
Accumulated time: func 0.0366    prepare 0.0034    bound 0.0302    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0004    decision 0.0670    set_bounds 0.0190    solve 0.0367    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0670    set_bounds 0.0190    solve 0.0367    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.13072466850280762


Properties batch 5, size 1
Remaining timeout: 10.420907735824585
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.5548529624938965.

Properties batch 6, size 1
Remaining timeout: 10.347113370895386
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.649726152420044.

Properties batch 7, size 1
Remaining timeout: 10.279059171676636
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.42785209]]) need to verify.
Model prediction is: tensor([ 0.59645969, -0.63597739,  2.15801716,  0.79862392, -0.43138403,
         0.79286832, -2.70320654, -0.89569283,  0.77461511, -0.45441043])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.42785209]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 189
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 159
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 137
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 131
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 241
Node /39 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 883
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 97] 
split level 1: [/38, 17] 
split level 2: [/38, 65] 
split level 3: [/38, 6] 
split level 4: [/38, 79] 
split level 5: [/38, 49] 
split level 6: [/38, 70] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.76837158203125e-05
Time: prepare 0.0025    bound 0.0322    transfer 0.0001    finalize 0.0037    func 0.0387    
Accumulated time: func 0.0387    prepare 0.0034    bound 0.0322    transfer 0.0001    finalize 0.0037    
length of domains: 0
Time: pickout 0.0004    decision 0.0711    set_bounds 0.0202    solve 0.0388    add 0.0001    
Accumulated time: pickout 0.0004    decision 0.0711    set_bounds 0.0202    solve 0.0388    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.13834595680236816


Properties batch 8, size 1
Remaining timeout: 10.03499436378479
##### Instance 86 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.753303050994873.
Result: safe in 110.0364 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.86607385, -1.54746068, -0.06077818,  0.26191860,  0.83527666,
         -0.71539527, -2.38951373,  0.41327551,  1.36104155,  0.97544277]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.86607337, -1.54746008, -0.06077829,  0.26191849,  0.83527708,
          -0.71539569, -2.38951397,  0.41327605,  1.36104131,  0.97544348],
         [ 0.86607337, -1.54746008, -0.06077829,  0.26191849,  0.83527708,
          -0.71539569, -2.38951397,  0.41327605,  1.36104131,  0.97544348]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[-0.45279732,  1.96073616,  0.47405434,  0.15135756, -0.42200103,
           1.12867177,  2.80278993, -0.94776505, -0.56216735]]])
number of violation:  4
Result: unsafe-pgd in 0.0052 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.14781965,  0.78417957, -2.01305819, -0.21772107, -1.13182664,
         -0.87136823, -2.57144308, -1.17849159,  4.13698006,  2.91479778]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.06659777,  0.91008055, -1.99787664, -0.25917497, -1.07710600,
          -0.86836398, -2.57754636, -1.06339836,  3.68785262,  3.17880821],
         [ 0.06659777,  0.91008055, -1.99787664, -0.25917497, -1.07710600,
          -0.86836398, -2.57754636, -1.06339836,  3.68785262,  3.17880821]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.62125492, 2.77777195, 5.68572903, 3.94702768, 4.76495838,
          4.55621672, 6.26539898, 4.75125122, 0.50904441]]])
number of violation:  0
Attack finished in 2.1910 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.14781965,  0.78417957, -2.01305819, -0.21772107, -1.13182664,
         -0.87136823, -2.57144308, -1.17849159,  4.13698006,  2.91479778]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [293]; unstable size 293; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 172, 1, 293] with unstable size 171 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 130, 1, 293] with unstable size 129 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 144, 1, 293] with unstable size 143 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 278, 1, 293] with unstable size 277 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 39, 1, 293] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 293] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [171]; unstable size 171; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 130, 1, 171] with unstable size 129 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 144, 1, 171] with unstable size 143 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 278, 1, 171] with unstable size 277 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 39, 1, 171] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [129]; unstable size 129; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 144, 1, 129] with unstable size 143 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 278, 1, 129] with unstable size 277 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 39, 1, 129] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 129] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [143]; unstable size 143; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 278, 1, 143] with unstable size 277 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 39, 1, 143] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 143] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [277]; unstable size 277; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 39, 1, 277] with unstable size 38 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [38]; unstable size 38; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 38] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.01492476,  0.30535054,  3.24607229,  1.79481089,  2.33426452,
          2.11513615,  3.87228823,  2.12406301, -1.05146623]]) None
best_l after optimization: 19.40277862548828
alpha/beta optimization time: 110.2348780632019
initial alpha-crown bounds: tensor([[ 2.23565793,  0.61563349,  3.57193255,  2.06456542,  2.69360900,
          2.41818357,  4.12083054,  2.49230123, -0.80993724]])
Worst class: (+ rhs) -0.8099372386932373
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 7.2548065185546875
##### Instance 88 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.2356579303741455.

Properties batch 1, size 1
Remaining timeout: 7.184661388397217
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.615633487701416.

Properties batch 2, size 1
Remaining timeout: 7.114289283752441
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.571932554244995.

Properties batch 3, size 1
Remaining timeout: 7.04502010345459
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.064565420150757.

Properties batch 4, size 1
Remaining timeout: 6.97719669342041
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.6936089992523193.

Properties batch 5, size 1
Remaining timeout: 6.908030271530151
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.4181835651397705.

Properties batch 6, size 1
Remaining timeout: 6.83897852897644
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.120830535888672.

Properties batch 7, size 1
Remaining timeout: 6.769053936004639
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.4923012256622314.

Properties batch 8, size 1
Remaining timeout: 6.700754880905151
##### Instance 88 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.80993724]]) need to verify.
Model prediction is: tensor([ 0.14781965,  0.78417957, -2.01305819, -0.21772107, -1.13182664,
        -0.87136823, -2.57144308, -1.17849159,  4.13698006,  2.91479778])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.80993724]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 293
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 165
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 126
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 139
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 264
Node /39 input 0: size torch.Size([100]) unstable 36
-----------------
# of unstable neurons: 1023
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 51] 
split level 1: [/38, 88] 
split level 2: [/38, 85] 
split level 3: [/38, 92] 
split level 4: [/38, 48] 
split level 5: [/38, 46] 
split level 6: [/38, 74] 
pruning_in_iteration open status: True
ratio of positive domain = 112 / 128 = 0.875
pruning-in-iteration extra time: 0.020127534866333008
Time: prepare 0.0027    bound 0.6781    transfer 0.0006    finalize 0.0033    func 0.6848    
Accumulated time: func 0.6848    prepare 0.0036    bound 0.6781    transfer 0.0006    finalize 0.0033    
Current worst splitting domains lb-rhs (depth):
-0.39343 (7), -0.37723 (7), -0.37275 (7), -0.35980 (7), -0.24827 (7), -0.23741 (7), -0.23222 (7), -0.22641 (7), -0.22303 (7), -0.20391 (7), -0.19251 (7), -0.17321 (7), -0.13830 (7), -0.13262 (7), -0.09033 (7), -0.08578 (7), 
length of domains: 16
Time: pickout 0.0005    decision 0.0686    set_bounds 0.0190    solve 0.6849    add 0.0018    
Accumulated time: pickout 0.0005    decision 0.0686    set_bounds 0.0190    solve 0.6849    add 0.0018    
Current (lb-rhs): -0.393430233001709
16 domains visited
Cumulative time: 0.782717227935791

BaB round 2
batch: 16
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/38, 45] [/38, 45] [/38, 45] [/38, 45] [/38, 45] [/38, 45] [/38, 45] [/38, 45] [/38, 45] [/38, 45] 
split level 1: [/38, 86] [/28, 563] [/38, 86] [/28, 563] [/38, 86] [/28, 563] [/38, 86] [/28, 563] [/38, 86] [/38, 86] 
split level 2: [/38, 27] [/28, 566] [/38, 27] [/28, 566] [/38, 27] [/28, 566] [/38, 27] [/28, 566] [/38, 27] [/38, 27] 
pruning_in_iteration open status: True
ratio of positive domain = 64 / 128 = 0.5
pruning-in-iteration extra time: 0.03185582160949707
Time: prepare 0.0121    bound 0.9057    transfer 0.0007    finalize 0.0037    func 0.9223    
Accumulated time: func 1.6071    prepare 0.0162    bound 1.5838    transfer 0.0013    finalize 0.0070    
Current worst splitting domains lb-rhs (depth):
-0.34059 (10), -0.32285 (10), -0.32009 (10), -0.30989 (10), -0.30492 (10), -0.30283 (10), -0.28487 (10), -0.28258 (10), -0.17870 (10), -0.16962 (10), -0.16525 (10), -0.16353 (10), -0.15888 (10), -0.15855 (10), -0.15631 (10), -0.15429 (10), -0.15149 (10), -0.14941 (10), -0.14714 (10), -0.14439 (10), 
length of domains: 64
Time: pickout 0.0012    decision 0.0671    set_bounds 0.0146    solve 0.9224    add 0.0028    
Accumulated time: pickout 0.0017    decision 0.1358    set_bounds 0.0336    solve 1.6073    add 0.0045    
Current (lb-rhs): -0.3405900001525879
80 domains visited
Cumulative time: 1.7916507720947266

BaB round 3
batch: 64
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/28, 789] [/38, 86] [/28, 789] [/38, 86] [/38, 63] [/38, 86] [/28, 789] [/28, 780] [/28, 789] [/38, 86] 
pruning_in_iteration open status: True
ratio of positive domain = 52 / 128 = 0.40625
pruning-in-iteration extra time: 0.03439903259277344
Time: prepare 0.0136    bound 0.8383    transfer 0.0009    finalize 0.0037    func 0.8565    
Accumulated time: func 2.4636    prepare 0.0305    bound 2.4221    transfer 0.0022    finalize 0.0107    
Current worst splitting domains lb-rhs (depth):
-0.32601 (11), -0.31536 (11), -0.30763 (11), -0.30735 (11), -0.29463 (11), -0.29184 (11), -0.29066 (11), -0.28993 (11), -0.28851 (11), -0.28652 (11), -0.27751 (11), -0.27097 (11), -0.26946 (11), -0.26775 (11), -0.25404 (11), -0.24950 (11), -0.15493 (11), -0.15201 (11), -0.14610 (11), -0.14508 (11), 
length of domains: 76
Time: pickout 0.0014    decision 0.1699    set_bounds 0.0099    solve 0.8567    add 0.0028    
Accumulated time: pickout 0.0031    decision 0.3056    set_bounds 0.0435    solve 2.4640    add 0.0073    
Current (lb-rhs): -0.32601499557495117
156 domains visited
Cumulative time: 2.8335866928100586

BaB round 4
batch: 76
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/28, 780] [/28, 789] [/28, 789] [/38, 86] [/28, 780] [/28, 780] [/28, 789] [/38, 86] [/38, 63] [/28, 780] 
pruning_in_iteration open status: False
ratio of positive domain = 20 / 152 = 0.13157894736842102
pruning-in-iteration extra time: 5.555152893066406e-05
Time: prepare 0.0172    bound 1.0567    transfer 0.0001    finalize 0.0044    func 1.0785    
Accumulated time: func 3.5421    prepare 0.0481    bound 3.4788    transfer 0.0022    finalize 0.0150    
Current worst splitting domains lb-rhs (depth):
-0.31165 (12), -0.30516 (12), -0.30073 (12), -0.29379 (12), -0.29379 (12), -0.29168 (12), -0.29044 (12), -0.28430 (12), -0.27900 (12), -0.27808 (12), -0.27799 (12), -0.27554 (12), -0.27508 (12), -0.27358 (12), -0.26937 (12), -0.26611 (12), -0.26557 (12), -0.26516 (12), -0.26492 (12), -0.26482 (12), 
length of domains: 132
Time: pickout 0.0016    decision 0.1842    set_bounds 0.0134    solve 1.0786    add 0.0038    
Accumulated time: pickout 0.0047    decision 0.4898    set_bounds 0.0569    solve 3.5425    add 0.0111    
Current (lb-rhs): -0.31165480613708496
288 domains visited
Cumulative time: 4.11613917350769

BaB round 5
batch: 132
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/28, 789] [/28, 780] [/38, 27] [/28, 789] [/28, 789] [/28, 789] [/28, 780] [/28, 789] [/28, 780] [/28, 789] 
pruning_in_iteration open status: False
ratio of positive domain = 41 / 264 = 0.15530303030303028
pruning-in-iteration extra time: 6.4849853515625e-05
Time: prepare 0.0270    bound 1.6299    transfer 0.0001    finalize 0.0080    func 1.6650    
Accumulated time: func 5.2070    prepare 0.0755    bound 5.1086    transfer 0.0023    finalize 0.0230    
Current worst splitting domains lb-rhs (depth):
-0.29606 (13), -0.29356 (13), -0.28846 (13), -0.28704 (13), -0.28358 (13), -0.28317 (13), -0.27917 (13), -0.27895 (13), -0.27771 (13), -0.27592 (13), -0.27501 (13), -0.27489 (13), -0.26899 (13), -0.26561 (13), -0.26541 (13), -0.26523 (13), -0.26477 (13), -0.26200 (13), -0.26184 (13), -0.25934 (13), 
length of domains: 223
Time: pickout 0.0023    decision 0.3086    set_bounds 0.0203    solve 1.6651    add 0.0060    
Accumulated time: pickout 0.0070    decision 0.7984    set_bounds 0.0772    solve 5.2076    add 0.0171    
Current (lb-rhs): -0.29605889320373535
511 domains visited
Cumulative time: 6.119454860687256

BaB round 6
batch: 223
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/38, 27] [/28, 796] [/38, 27] [/38, 63] 
pruning_in_iteration open status: True
ratio of positive domain = 171 / 446 = 0.3834080717488789
pruning-in-iteration extra time: 0.0994710922241211
Time: prepare 0.0479    bound 2.1878    transfer 0.0018    finalize 0.0131    func 2.2507    
Accumulated time: func 7.4578    prepare 0.1239    bound 7.2964    transfer 0.0041    finalize 0.0361    
Current worst splitting domains lb-rhs (depth):
-0.28332 (14), -0.28101 (14), -0.27577 (14), -0.27430 (14), -0.27045 (14), -0.27003 (14), -0.26741 (14), -0.26664 (14), -0.26553 (14), -0.26289 (14), -0.26250 (14), -0.26168 (14), -0.25659 (14), -0.25482 (14), -0.25471 (14), -0.25434 (14), -0.25397 (14), -0.25334 (14), -0.25302 (14), -0.24926 (14), 
length of domains: 275
Time: pickout 0.0027    decision 0.5062    set_bounds 0.0336    solve 2.2509    add 0.0071    
Accumulated time: pickout 0.0097    decision 1.3046    set_bounds 0.1108    solve 7.4585    add 0.0242    
Current (lb-rhs): -0.28331875801086426
786 domains visited
Time out!!!!!!!!
Result: unknown in 122.3322 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 2.02942944,  4.20907974, -2.52376461, -2.66889691, -1.88897228,
         -2.94405127, -1.41085434, -1.69945085,  1.30904770,  5.58833647]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 2.06397390,  4.63465071, -2.54707432, -2.71784043, -1.93915391,
          -3.15273738, -1.32144451, -1.90628195,  1.59596515,  5.28985214],
         [ 2.06397390,  4.63465071, -2.54707432, -2.71784043, -1.93915391,
          -3.15273738, -1.32144451, -1.90628195,  1.59596515,  5.28985214]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.22587824, 0.65520144, 7.83692646, 8.00769234, 7.22900581,
          8.44258976, 6.61129570, 7.19613361, 3.69388628]]])
number of violation:  0
Attack finished in 2.1230 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 2.02942944,  4.20907974, -2.52376461, -2.66889691, -1.88897228,
         -2.94405127, -1.41085434, -1.69945085,  1.30904770,  5.58833647]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [183]; unstable size 183; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 134, 1, 183] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 139, 1, 183] with unstable size 138 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 158, 1, 183] with unstable size 157 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 338, 1, 183] with unstable size 337 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 52, 1, 183] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 183] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [133]; unstable size 133; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 139, 1, 133] with unstable size 138 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 158, 1, 133] with unstable size 157 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 338, 1, 133] with unstable size 337 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 52, 1, 133] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [138]; unstable size 138; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 158, 1, 138] with unstable size 157 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 338, 1, 138] with unstable size 337 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 52, 1, 138] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [157]; unstable size 157; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 338, 1, 157] with unstable size 337 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 52, 1, 157] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [337]; unstable size 337; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 52, 1, 337] with unstable size 51 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 337] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [51]; unstable size 51; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 51] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.56005955, -1.40696001,  4.63521624,  5.15383911,  3.88210106,
          5.22175455,  3.91538382,  3.25141859,  0.53330898]]) None
best_l after optimization: 28.685266494750977
alpha/beta optimization time: 127.65265464782715
initial alpha-crown bounds: tensor([[ 0.86105871, -1.12127864,  4.99824238,  5.45649576,  4.24170351,
          5.53936768,  4.19278431,  3.63409185,  0.88280058]])
Worst class: (+ rhs) -1.1212786436080933
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -10.115914583206177
##### Instance 89 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.8610587120056152.

Properties batch 1, size 1
Remaining timeout: -10.190644979476929
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-1.12127864]]) need to verify.
Model prediction is: tensor([ 2.02942944,  4.20907974, -2.52376461, -2.66889691, -1.88897228,
        -2.94405127, -1.41085434, -1.69945085,  1.30904770,  5.58833647])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.12127864]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 183
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 133
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 136
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 149
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 314
Node /39 input 0: size torch.Size([100]) unstable 49
-----------------
# of unstable neurons: 964
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 54] 
split level 1: [/38, 63] 
split level 2: [/38, 0] 
split level 3: [/38, 66] 
split level 4: [/38, 17] 
split level 5: [/38, 97] 
split level 6: [/38, 96] 
pruning_in_iteration open status: True
ratio of positive domain = 111 / 128 = 0.8671875
pruning-in-iteration extra time: 0.014810562133789062
Time: prepare 0.0026    bound 0.5264    transfer 0.0005    finalize 0.0034    func 0.5329    
Accumulated time: func 0.5329    prepare 0.0033    bound 0.5264    transfer 0.0005    finalize 0.0034    
Current worst splitting domains lb-rhs (depth):
-0.28392 (7), -0.21460 (7), -0.19480 (7), -0.16826 (7), -0.14880 (7), -0.13865 (7), -0.10195 (7), -0.09690 (7), -0.09585 (7), -0.07887 (7), -0.05924 (7), -0.04589 (7), -0.03677 (7), -0.03547 (7), -0.03138 (7), -0.01042 (7), -0.00844 (7), 
length of domains: 17
Time: pickout 0.0006    decision 0.0741    set_bounds 0.0199    solve 0.5330    add 0.0017    
Accumulated time: pickout 0.0006    decision 0.0741    set_bounds 0.0199    solve 0.5330    add 0.0017    
Current (lb-rhs): -0.2839175760746002
17 domains visited
Time out!!!!!!!!
Result: unknown in 130.9368 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 5.67109346,  3.20894194, -1.26285100, -3.09402537,  0.30367109,
         -3.70957136, -5.18102455, -0.62251717,  2.73471498,  1.95137763]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 5.31741524,  3.77144718, -1.53891337, -3.08367658,  0.22534616,
          -3.65859723, -5.18395615, -0.61920518,  2.59429002,  2.17566395],
         [ 5.31741524,  3.77144718, -1.53891337, -3.08367658,  0.22534616,
          -3.65859723, -5.18395615, -0.61920518,  2.59429002,  2.17566395]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 1.54596806,  6.85632849,  8.40109158,  5.09206915,  8.97601223,
          10.50137138,  5.93662024,  2.72312522,  3.14175129]]])
number of violation:  0
Attack finished in 2.1751 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 5.67109346,  3.20894194, -1.26285100, -3.09402537,  0.30367109,
         -3.70957136, -5.18102455, -0.62251717,  2.73471498,  1.95137763]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 208, 1, 203] with unstable size 207 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 160, 1, 203] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 134, 1, 203] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 237, 1, 203] with unstable size 236 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 29, 1, 203] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [207]; unstable size 207; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 160, 1, 207] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 134, 1, 207] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 237, 1, 207] with unstable size 236 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 29, 1, 207] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 207] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [159]; unstable size 159; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 134, 1, 159] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 237, 1, 159] with unstable size 236 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 29, 1, 159] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [133]; unstable size 133; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 237, 1, 133] with unstable size 236 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 29, 1, 133] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [236]; unstable size 236; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 29, 1, 236] with unstable size 28 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 236] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [28]; unstable size 28; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 28] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.22369075, 5.12051201, 6.72365427, 3.50748801, 7.20616579, 8.42562675,
         3.92930174, 0.76586103, 1.50762796]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4840 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.42282867, -2.13965058,  1.61745942,  1.25314033,  2.14922786,
          1.20292199,  2.46269727,  0.97531831, -3.31697392, -1.78131807]])
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.42282844, -2.13965034,  1.61745954,  1.25313997,  2.14922762,
           1.20292175,  2.46269727,  0.97531861, -3.31697321, -1.78131759],
         [-2.42282844, -2.13965034,  1.61745954,  1.25313997,  2.14922762,
           1.20292175,  2.46269727,  0.97531861, -3.31697321, -1.78131759]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 3.67596841,  3.39279032, -0.36431956, -0.89608765,  0.05021822,
          -1.20955729,  0.27782130,  4.57011318,  3.03445768]]])
number of violation:  3
Result: unsafe-pgd in 0.0046 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.88726807,  3.08968401, -1.72415638, -1.09973848, -2.00418711,
         -2.28135252, -3.40510130, -3.75582170,  7.64268732,  2.65055323]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.83909428,  3.73891163, -1.88974285, -1.19380903, -2.13257003,
          -2.29675841, -3.40203762, -3.87594151,  7.28620958,  2.92648363],
         [ 0.83909428,  3.73891163, -1.88974285, -1.19380903, -2.13257003,
          -2.29675841, -3.40203762, -3.87594151,  7.28620958,  2.92648363]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 6.44711542,  3.54729795,  9.17595291,  8.48001862,  9.41877937,
           9.58296776, 10.68824577, 11.16215038,  4.35972548]]])
number of violation:  0
Attack finished in 2.1853 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.88726807,  3.08968401, -1.72415638, -1.09973848, -2.00418711,
         -2.28135252, -3.40510130, -3.75582170,  7.64268732,  2.65055323]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 160, 1, 194] with unstable size 159 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 129, 1, 194] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 113, 1, 194] with unstable size 112 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 187, 1, 194] with unstable size 186 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 24, 1, 194] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [159]; unstable size 159; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 129, 1, 159] with unstable size 128 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 113, 1, 159] with unstable size 112 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 187, 1, 159] with unstable size 186 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 24, 1, 159] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 159] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [128]; unstable size 128; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 113, 1, 128] with unstable size 112 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 187, 1, 128] with unstable size 186 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 24, 1, 128] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 128] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [112]; unstable size 112; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 187, 1, 112] with unstable size 186 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 24, 1, 112] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 112] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [186]; unstable size 186; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 24, 1, 186] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.75903368, 2.07551384, 6.54468489, 6.56172085, 7.37661457, 7.30984259,
         8.90386772, 8.88030148, 2.74454808]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.4930 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052513003349304, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.50195456, -1.60789132,  1.40051961,  1.21135271, -0.27883130,
          1.13160396,  2.97534752, -1.29238439, -1.42988300, -0.60788810]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.37193143, -1.51964784,  1.64637291,  1.15623116, -0.27720237,
           1.13954926,  2.55445099, -1.28408670, -1.36422992, -0.67951280],
         [-1.37193143, -1.51964784,  1.64637291,  1.15623116, -0.27720237,
           1.13954926,  2.55445099, -1.28408670, -1.36422992, -0.67951280]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.92638254, 4.07409859, 0.90807807, 1.39821982, 2.83165336,
          1.41490173, 3.83853769, 3.91868114, 3.23396373]]])
number of violation:  0
Attack finished in 2.1403 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.50195456, -1.60789132,  1.40051961,  1.21135271, -0.27883130,
          1.13160396,  2.97534752, -1.29238439, -1.42988300, -0.60788810]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 148, 1, 178] with unstable size 147 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 134, 1, 178] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 122, 1, 178] with unstable size 121 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 284, 1, 178] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 38, 1, 178] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [147]; unstable size 147; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 134, 1, 147] with unstable size 133 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 122, 1, 147] with unstable size 121 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 284, 1, 147] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 38, 1, 147] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [133]; unstable size 133; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 122, 1, 133] with unstable size 121 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 284, 1, 133] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 38, 1, 133] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [121]; unstable size 121; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 284, 1, 121] with unstable size 283 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 38, 1, 121] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [283]; unstable size 283; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 38, 1, 283] with unstable size 37 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 283] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [37]; unstable size 37; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 37] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.68948984,  1.46686363, -0.49194741,  0.12686467,  1.03082705,
          0.11587691,  1.66319847,  1.54363191,  1.18496799]]) None
best_l after optimization: 10.343305587768555
alpha/beta optimization time: 109.94815874099731
initial alpha-crown bounds: tensor([[ 1.96574831,  1.76061392, -0.28440166,  0.27021194,  1.26223278,
          0.28969431,  1.95605302,  1.74268579,  1.38046741]])
Worst class: (+ rhs) -0.28440165519714355
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 7.59079122543335
##### Instance 93 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.9657483100891113.

Properties batch 1, size 1
Remaining timeout: 7.515780210494995
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.7606139183044434.

Properties batch 2, size 1
Remaining timeout: 7.446954965591431
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.28440166]]) need to verify.
Model prediction is: tensor([-1.50195456, -1.60789132,  1.40051961,  1.21135271, -0.27883130,
         1.13160396,  2.97534752, -1.29238439, -1.42988300, -0.60788810])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.28440166]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 178
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 146
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 128
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 115
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 273
Node /39 input 0: size torch.Size([100]) unstable 36
-----------------
# of unstable neurons: 876
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 33] 
split level 1: [/38, 7] 
split level 2: [/38, 48] 
split level 3: [/38, 99] 
split level 4: [/38, 25] 
split level 5: [/38, 65] 
split level 6: [/38, 86] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 5.817413330078125e-05
Time: prepare 0.0029    bound 0.0298    transfer 0.0001    finalize 0.0036    func 0.0364    
Accumulated time: func 0.0364    prepare 0.0036    bound 0.0298    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0005    decision 0.0655    set_bounds 0.0198    solve 0.0364    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0655    set_bounds 0.0198    solve 0.0364    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.12991070747375488


Properties batch 3, size 1
Remaining timeout: 7.210537910461426
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.27021193504333496.

Properties batch 4, size 1
Remaining timeout: 7.143440008163452
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.262232780456543.

Properties batch 5, size 1
Remaining timeout: 7.076852798461914
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.28969430923461914.

Properties batch 6, size 1
Remaining timeout: 7.009858131408691
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.9560530185699463.

Properties batch 7, size 1
Remaining timeout: 6.943757772445679
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.7426857948303223.

Properties batch 8, size 1
Remaining timeout: 6.877424240112305
##### Instance 93 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.380467414855957.
Result: safe in 113.1890 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-0.72569931, -3.21918440,  2.05824757,  0.88478780,  3.32983351,
          0.75917369,  1.25517797,  0.68654269, -2.15523911, -2.87364244]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-0.64032632, -3.27997160,  2.26689959,  0.94878453,  3.06077552,
           0.77721053,  1.24852133,  0.49814668, -1.98866820, -2.89136934],
         [-0.64032632, -3.27997160,  2.26689959,  0.94878453,  3.06077552,
           0.77721053,  1.24852133,  0.49814668, -1.98866820, -2.89136934]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.70110178, 6.34074688, 0.79387593, 2.11199093, 2.28356504,
          1.81225419, 2.56262898, 5.04944372, 5.95214462]]])
number of violation:  0
Attack finished in 2.0771 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-0.72569931, -3.21918440,  2.05824757,  0.88478780,  3.32983351,
          0.75917369,  1.25517797,  0.68654269, -2.15523911, -2.87364244]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [282]; unstable size 282; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 292, 1, 282] with unstable size 291 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 229, 1, 282] with unstable size 228 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 175, 1, 282] with unstable size 174 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 420, 1, 282] with unstable size 419 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 71, 1, 282] with unstable size 70 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 282] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [291]; unstable size 291; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 229, 1, 291] with unstable size 228 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 175, 1, 291] with unstable size 174 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 420, 1, 291] with unstable size 419 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 71, 1, 291] with unstable size 70 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [228]; unstable size 228; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 175, 1, 228] with unstable size 174 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 420, 1, 228] with unstable size 419 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 71, 1, 228] with unstable size 70 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [174]; unstable size 174; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 420, 1, 174] with unstable size 419 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 71, 1, 174] with unstable size 70 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [419]; unstable size 419; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 71, 1, 419] with unstable size 70 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 419] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [70]; unstable size 70; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 70] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.67555356,  1.14413500, -1.78151596, -0.58716506, -0.65918744,
         -1.17854178, -0.92512417,  0.60880792,  0.86459589]]) None
best_l after optimization: 2.8108999729156494
alpha/beta optimization time: 162.95435905456543
initial alpha-crown bounds: tensor([[ 0.08728614,  2.06946325, -1.21673572, -0.05116642, -0.13543642,
         -0.68556601, -0.39399230,  1.40306532,  1.73398256]])
Worst class: (+ rhs) -1.2167357206344604
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -45.36523747444153
##### Instance 94 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.08728614449501038.

Properties batch 1, size 1
Remaining timeout: -45.43307304382324
##### Instance 94 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.0694632530212402.

Properties batch 2, size 1
Remaining timeout: -45.50024437904358
##### Instance 94 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-1.21673572]]) need to verify.
Model prediction is: tensor([-0.72569931, -3.21918440,  2.05824757,  0.88478780,  3.32983351,
         0.75917369,  1.25517797,  0.68654269, -2.15523911, -2.87364244])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-1.21673572]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 282
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 281
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 212
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 166
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 387
Node /39 input 0: size torch.Size([100]) unstable 69
-----------------
# of unstable neurons: 1397
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 19] 
split level 1: [/38, 53] 
split level 2: [/38, 11] 
split level 3: [/38, 27] 
split level 4: [/38, 59] 
split level 5: [/38, 92] 
split level 6: [/38, 33] 
pruning_in_iteration open status: True
ratio of positive domain = 48 / 128 = 0.375
pruning-in-iteration extra time: 0.03009343147277832
Time: prepare 0.0027    bound 0.9603    transfer 0.0006    finalize 0.0035    func 0.9671    
Accumulated time: func 0.9671    prepare 0.0035    bound 0.9603    transfer 0.0006    finalize 0.0035    
Current worst splitting domains lb-rhs (depth):
-0.59111 (7), -0.57335 (7), -0.54991 (7), -0.54045 (7), -0.52886 (7), -0.51021 (7), -0.50267 (7), -0.46821 (7), -0.46384 (7), -0.45418 (7), -0.42980 (7), -0.42692 (7), -0.42459 (7), -0.42309 (7), -0.40099 (7), -0.39568 (7), -0.39526 (7), -0.39507 (7), -0.38855 (7), -0.38161 (7), 
length of domains: 80
Time: pickout 0.0004    decision 0.0664    set_bounds 0.0236    solve 0.9672    add 0.0031    
Accumulated time: pickout 0.0004    decision 0.0664    set_bounds 0.0236    solve 0.9672    add 0.0031    
Current (lb-rhs): -0.591113269329071
80 domains visited
Time out!!!!!!!!
Result: unknown in 166.6763 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.65843320, -2.92547417,  0.94350368,  1.99547052,  1.01495600,
          2.34356093,  3.51953387, -0.21073245, -2.96600771, -1.05638444]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.64052892, -2.99472904,  0.80269152,  2.11941171,  1.03013968,
           2.59488297,  2.84776998,  0.13540734, -2.98821330, -0.90683782],
         [-2.64052892, -2.99472904,  0.80269152,  2.11941171,  1.03013968,
           2.59488297,  2.84776998,  0.13540734, -2.98821330, -0.90683782]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.48829889, 5.84249878, 2.04507852, 0.72835827, 1.81763029,
          0.25288701, 2.71236300, 5.83598328, 3.75460815]]])
number of violation:  0
Attack finished in 2.0622 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-2.65843320, -2.92547417,  0.94350368,  1.99547052,  1.01495600,
          2.34356093,  3.51953387, -0.21073245, -2.96600771, -1.05638444]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [138]; unstable size 138; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 145, 1, 138] with unstable size 144 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 152, 1, 138] with unstable size 151 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 119, 1, 138] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 334, 1, 138] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 49, 1, 138] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 138] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [144]; unstable size 144; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 152, 1, 144] with unstable size 151 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 119, 1, 144] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 334, 1, 144] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 49, 1, 144] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 144] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [151]; unstable size 151; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 119, 1, 151] with unstable size 118 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 334, 1, 151] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 49, 1, 151] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 151] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [118]; unstable size 118; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 334, 1, 118] with unstable size 333 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 49, 1, 118] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 118] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [333]; unstable size 333; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 49, 1, 333] with unstable size 48 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 333] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [48]; unstable size 48; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 48] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.71319413,  2.98926735,  0.05774498, -0.84023952,  0.13991868,
         -1.45437551, -0.13296223,  2.91510320,  0.95986080]]) None
best_l after optimization: 10.091604232788086
alpha/beta optimization time: 123.54325938224792
initial alpha-crown bounds: tensor([[ 3.07767057,  3.25557804,  0.34370038, -0.57275605,  0.40495533,
         -1.19267130,  0.21319747,  3.24700737,  1.31492233]])
Worst class: (+ rhs) -1.192671298980713
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -5.873981475830078
##### Instance 95 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.0776705741882324.

Properties batch 1, size 1
Remaining timeout: -5.9513678550720215
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.25557804107666.

Properties batch 2, size 1
Remaining timeout: -6.026370286941528
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.3437003791332245.

Properties batch 3, size 1
Remaining timeout: -6.10483193397522
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.57275605]]) need to verify.
Model prediction is: tensor([-2.65843320, -2.92547417,  0.94350368,  1.99547052,  1.01495600,
         2.34356093,  3.51953387, -0.21073245, -2.96600771, -1.05638444])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.57275605]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 138
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 142
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 148
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 114
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 316
Node /39 input 0: size torch.Size([100]) unstable 48
-----------------
# of unstable neurons: 906
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 31] 
split level 1: [/38, 99] 
split level 2: [/38, 86] 
split level 3: [/38, 5] 
split level 4: [/38, 11] 
split level 5: [/38, 45] 
split level 6: [/38, 18] 
pruning_in_iteration open status: True
ratio of positive domain = 103 / 128 = 0.8046875
pruning-in-iteration extra time: 0.024039030075073242
Time: prepare 0.0026    bound 0.8846    transfer 0.0005    finalize 0.0033    func 0.8911    
Accumulated time: func 0.8911    prepare 0.0034    bound 0.8846    transfer 0.0005    finalize 0.0033    
Current worst splitting domains lb-rhs (depth):
-0.18785 (7), -0.18148 (7), -0.17490 (7), -0.16968 (7), -0.13089 (7), -0.12539 (7), -0.11663 (7), -0.11648 (7), -0.11564 (7), -0.10304 (7), -0.10171 (7), -0.09451 (7), -0.08673 (7), -0.08230 (7), -0.07859 (7), -0.07658 (7), -0.06732 (7), -0.04659 (7), -0.04380 (7), -0.04038 (7), 
length of domains: 25
Time: pickout 0.0005    decision 0.1300    set_bounds 0.0250    solve 0.8912    add 0.0018    
Accumulated time: pickout 0.0005    decision 0.1300    set_bounds 0.0250    solve 0.8912    add 0.0018    
Current (lb-rhs): -0.18784856796264648
25 domains visited
Time out!!!!!!!!
Result: unknown in 127.2994 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-1.85347986, -1.63270164,  1.72788978,  1.13818967,  2.14839792,
          0.40516478,  5.01942730, -1.04120469, -3.63789725, -2.27381468]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.71383035, -1.65691566,  1.61850381,  0.99249339,  2.35432005,
           0.42027155,  4.31525421, -0.53872186, -3.57636285, -2.21502733],
         [-1.71383035, -1.65691566,  1.61850381,  0.99249339,  2.35432005,
           0.42027155,  4.31525421, -0.53872186, -3.57636285, -2.21502733]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[6.02908468, 5.97216988, 2.69675040, 3.32276082, 1.96093416,
          3.89498258, 4.85397625, 7.89161682, 6.53028107]]])
number of violation:  0
Attack finished in 2.6751 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[-1.85347986, -1.63270164,  1.72788978,  1.13818967,  2.14839792,
          0.40516478,  5.01942730, -1.04120469, -3.63789725, -2.27381468]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 135, 1, 185] with unstable size 134 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 163, 1, 185] with unstable size 162 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 153, 1, 185] with unstable size 152 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 370, 1, 185] with unstable size 369 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 61, 1, 185] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [134]; unstable size 134; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 163, 1, 134] with unstable size 162 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 153, 1, 134] with unstable size 152 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 370, 1, 134] with unstable size 369 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 61, 1, 134] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 134] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [162]; unstable size 162; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 153, 1, 162] with unstable size 152 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 370, 1, 162] with unstable size 369 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 61, 1, 162] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [152]; unstable size 152; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 370, 1, 152] with unstable size 369 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 61, 1, 152] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [369]; unstable size 369; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 61, 1, 369] with unstable size 60 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 369] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [60]; unstable size 60; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 60] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.59878135,  1.58606720,  0.00964046,  1.15608788, -0.69492269,
          1.33154309,  1.14996505,  4.45915461,  2.81744766]]) None
best_l after optimization: 18.706972122192383
alpha/beta optimization time: 134.83368825912476
initial alpha-crown bounds: tensor([[ 3.11104083,  2.15160108,  0.37352896,  1.47843933, -0.25385833,
          1.75169730,  1.79408741,  4.92118883,  3.37924695]])
Worst class: (+ rhs) -0.2538583278656006
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: -17.88893413543701
##### Instance 96 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.1110408306121826.

Properties batch 1, size 1
Remaining timeout: -17.958340167999268
##### Instance 96 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.1516010761260986.

Properties batch 2, size 1
Remaining timeout: -18.038066864013672
##### Instance 96 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 0.37352895736694336.

Properties batch 3, size 1
Remaining timeout: -18.115355253219604
##### Instance 96 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.4784393310546875.

Properties batch 4, size 1
Remaining timeout: -18.187247276306152
##### Instance 96 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.25385833]]) need to verify.
Model prediction is: tensor([-1.85347986, -1.63270164,  1.72788978,  1.13818967,  2.14839792,
         0.40516478,  5.01942730, -1.04120469, -3.63789725, -2.27381468])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.25385833]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 185
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 128
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 153
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 145
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 353
Node /39 input 0: size torch.Size([100]) unstable 55
-----------------
# of unstable neurons: 1019
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 99] 
split level 1: [/38, 69] 
split level 2: [/38, 15] 
split level 3: [/38, 55] 
split level 4: [/38, 75] 
split level 5: [/38, 20] 
split level 6: [/38, 93] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 5.793571472167969e-05
Time: prepare 0.0025    bound 0.0380    transfer 0.0001    finalize 0.0039    func 0.0445    
Accumulated time: func 0.0445    prepare 0.0033    bound 0.0380    transfer 0.0001    finalize 0.0039    
length of domains: 0
Time: pickout 0.0008    decision 0.0647    set_bounds 0.0189    solve 0.0446    add 0.0001    
Accumulated time: pickout 0.0008    decision 0.0647    set_bounds 0.0189    solve 0.0446    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Time out!!!!!!!!
Result: unknown in 138.4281 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052505552768707, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 3.16182041, -2.64790964,  2.48520970, -0.27350953,  1.18473983,
         -1.01468515, -1.30250692, -2.26754045,  2.57973838, -1.90547478]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 3.00977302, -2.55583668,  2.31955791, -0.28694269,  1.13460875,
          -1.02406204, -1.39451694, -2.24508071,  2.83313918, -1.79075968],
         [ 3.00977302, -2.55583668,  2.31955791, -0.28694269,  1.13460875,
          -1.02406204, -1.39451694, -2.24508071,  2.83313918, -1.79075968]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[5.56560993, 0.69021511, 3.29671574, 1.87516427, 4.03383493,
          4.40429020, 5.25485373, 0.17663407, 4.80053234]]])
number of violation:  0
Attack finished in 2.0321 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 3.16182041, -2.64790964,  2.48520970, -0.27350953,  1.18473983,
         -1.01468515, -1.30250692, -2.26754045,  2.57973838, -1.90547478]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [121]; unstable size 121; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 328, 1, 121] with unstable size 327 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 112, 1, 121] with unstable size 111 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 96, 1, 121] with unstable size 95 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 200, 1, 121] with unstable size 199 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 23, 1, 121] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 121] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [327]; unstable size 327; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 112, 1, 327] with unstable size 111 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 96, 1, 327] with unstable size 95 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 200, 1, 327] with unstable size 199 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 23, 1, 327] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 327] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [111]; unstable size 111; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 96, 1, 111] with unstable size 95 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 200, 1, 111] with unstable size 199 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 23, 1, 111] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 111] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [95]; unstable size 95; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 200, 1, 95] with unstable size 199 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 23, 1, 95] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 95] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [199]; unstable size 199; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 23, 1, 199] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.83399153, -0.08304489,  2.43614674,  1.19835234,  3.13470221,
          3.44743204,  4.39164591, -0.33140388,  4.11427069]]) None
best_l after optimization: 23.659080505371094
alpha/beta optimization time: 80.95389437675476
initial alpha-crown bounds: tensor([[ 4.90389967, -0.03745282,  2.48334455,  1.24146223,  3.18433666,
          3.51220942,  4.43931293, -0.24934438,  4.18131065]])
Worst class: (+ rhs) -0.2493443787097931
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 8, 16, 16]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 16, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 36.72157382965088
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.903899669647217.

Properties batch 1, size 1
Remaining timeout: 36.651307821273804
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.03745282]]) need to verify.
Model prediction is: tensor([ 3.16182041, -2.64790964,  2.48520970, -0.27350953,  1.18473983,
        -1.01468515, -1.30250692, -2.26754045,  2.57973838, -1.90547478])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03745282]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 121
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 326
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 108
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 94
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 190
Node /39 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 860
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 11] 
split level 1: [/38, 34] 
split level 2: [/38, 59] 
split level 3: [/28, 91] 
split level 4: [/28, 99] 
split level 5: [/25, 611] 
split level 6: [/28, 989] 

all verified at 0th iter
pruning_in_iteration open status: False
ratio of positive domain = 128 / 128 = 1.0
pruning-in-iteration extra time: 4.291534423828125e-05
Time: prepare 0.0058    bound 0.0297    transfer 0.0001    finalize 0.0036    func 0.0392    
Accumulated time: func 0.0392    prepare 0.0065    bound 0.0297    transfer 0.0001    finalize 0.0036    
length of domains: 0
Time: pickout 0.0005    decision 0.0668    set_bounds 0.0214    solve 0.0393    add 0.0001    
Accumulated time: pickout 0.0005    decision 0.0668    set_bounds 0.0214    solve 0.0393    add 0.0001    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.1359848976135254


Properties batch 2, size 1
Remaining timeout: 36.40480446815491
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 2.483344554901123.

Properties batch 3, size 1
Remaining timeout: 36.33522367477417
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 1.241462230682373.

Properties batch 4, size 1
Remaining timeout: 36.264662981033325
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.1843366622924805.

Properties batch 5, size 1
Remaining timeout: 36.19604277610779
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 3.512209415435791.

Properties batch 6, size 1
Remaining timeout: 36.12758159637451
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.]) ######
Initial alpha-CROWN verified for spec index tensor([0]) with bound 4.439312934875488.

Properties batch 7, size 1
Remaining timeout: 36.05586552619934
##### Instance 97 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.]) ######
Remaining spec index tensor([0]) with bounds tensor([[-0.24934438]]) need to verify.
Model prediction is: tensor([ 3.16182041, -2.64790964,  2.48520970, -0.27350953,  1.18473983,
        -1.01468515, -1.30250692, -2.26754045,  2.57973838, -1.90547478])
build_with_refined_bounds batch [1/1]
setting alpha for layer /input start_node /40 with alignment adjustment
setting alpha for layer /input.4 start_node /40 with alignment adjustment
setting alpha for layer /input.8 start_node /40 with alignment adjustment
setting alpha for layer /input.12 start_node /40 with alignment adjustment
setting alpha for layer /29 start_node /40 with alignment adjustment
setting alpha for layer /39 start_node /40 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 8, 16, 16]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 16, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24934438]]) tensor([[inf]])
Intermediate layers: /17,/19,/23,/25,/28,/38,/40
Keeping alphas for these layers: ['/40']
Keeping alphas for these layers: ['/40']
Node /input input 0: size torch.Size([8, 16, 16]) unstable 121
Node /input.4 input 0: size torch.Size([16, 8, 8]) unstable 326
Node /input.8 input 0: size torch.Size([16, 8, 8]) unstable 108
Node /input.12 input 0: size torch.Size([16, 8, 8]) unstable 94
Node /29 input 0: size torch.Size([16, 8, 8]) unstable 190
Node /39 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 860
-----------------

BaB round 1
batch: 1
Average branched neurons at iteration 1:  1.0000
splitting decisions: 
split level 0: [/38, 34] 
split level 1: [/38, 65] 
split level 2: [/38, 82] 
split level 3: [/38, 11] 
split level 4: [/28, 97] 
split level 5: [/28, 996] 
split level 6: [/38, 58] 
pruning_in_iteration open status: True
ratio of positive domain = 112 / 128 = 0.875
pruning-in-iteration extra time: 0.014876842498779297
Time: prepare 0.0041    bound 0.5379    transfer 0.0005    finalize 0.0032    func 0.5458    
Accumulated time: func 0.5458    prepare 0.0048    bound 0.5379    transfer 0.0005    finalize 0.0032    
Current worst splitting domains lb-rhs (depth):
-0.09327 (7), -0.09154 (7), -0.07708 (7), -0.07649 (7), -0.07529 (7), -0.07192 (7), -0.06127 (7), -0.06031 (7), -0.05949 (7), -0.05644 (7), -0.05329 (7), -0.04965 (7), -0.03482 (7), -0.03472 (7), -0.02376 (7), -0.02263 (7), 
length of domains: 16
Time: pickout 0.0005    decision 0.0686    set_bounds 0.0211    solve 0.5459    add 0.0017    
Accumulated time: pickout 0.0005    decision 0.0686    set_bounds 0.0211    solve 0.5459    add 0.0017    
Current (lb-rhs): -0.09326809644699097
16 domains visited
Cumulative time: 0.6456263065338135

BaB round 2
batch: 16
Average branched neurons at iteration 2:  1.0000
splitting decisions: 
split level 0: [/28, 106] [/28, 105] [/28, 989] [/28, 105] [/28, 106] [/28, 105] [/28, 989] [/28, 105] [/38, 60] [/38, 60] 
split level 1: [/28, 105] [/28, 819] [/28, 106] [/28, 819] [/28, 105] [/28, 819] [/28, 106] [/28, 819] [/28, 106] [/28, 105] 
split level 2: [/25, 803] [/25, 803] [/25, 803] [/25, 803] [/25, 803] [/25, 803] [/25, 803] [/25, 803] [/28, 105] [/28, 819] 
pruning_in_iteration open status: True
ratio of positive domain = 43 / 128 = 0.3359375
pruning-in-iteration extra time: 0.039423227310180664
Time: prepare 0.0145    bound 0.9368    transfer 0.0006    finalize 0.0037    func 0.9556    
Accumulated time: func 1.5014    prepare 0.0197    bound 1.4747    transfer 0.0012    finalize 0.0069    
Current worst splitting domains lb-rhs (depth):
-0.07408 (10), -0.07237 (10), -0.07198 (10), -0.07024 (10), -0.06496 (10), -0.06414 (10), -0.06232 (10), -0.06212 (10), -0.05610 (10), -0.05539 (10), -0.05471 (10), -0.05322 (10), -0.04777 (10), -0.04771 (10), -0.04733 (10), -0.04689 (10), -0.04629 (10), -0.04469 (10), -0.04304 (10), -0.04240 (10), 
length of domains: 85
Time: pickout 0.0012    decision 0.0693    set_bounds 0.0155    solve 0.9559    add 0.0033    
Accumulated time: pickout 0.0017    decision 0.1379    set_bounds 0.0366    solve 1.5018    add 0.0050    
Current (lb-rhs): -0.07408003509044647
101 domains visited
Cumulative time: 1.692089557647705

BaB round 3
batch: 85
Average branched neurons at iteration 3:  1.0000
splitting decisions: 
split level 0: [/38, 60] [/38, 60] [/38, 60] [/38, 60] [/28, 672] [/28, 486] [/38, 60] [/28, 989] [/28, 672] [/28, 486] 
pruning_in_iteration open status: True
ratio of positive domain = 41 / 170 = 0.24117647058823533
pruning-in-iteration extra time: 0.04268312454223633
Time: prepare 0.0180    bound 1.1706    transfer 0.0012    finalize 0.0063    func 1.1963    
Accumulated time: func 2.6977    prepare 0.0383    bound 2.6453    transfer 0.0024    finalize 0.0133    
Current worst splitting domains lb-rhs (depth):
-0.06660 (11), -0.06491 (11), -0.06443 (11), -0.06278 (11), -0.05690 (11), -0.05623 (11), -0.05456 (11), -0.05424 (11), -0.05201 (11), -0.05172 (11), -0.04930 (11), -0.04897 (11), -0.04844 (11), -0.04809 (11), -0.04806 (11), -0.04802 (11), -0.04559 (11), -0.04515 (11), -0.04513 (11), -0.04508 (11), 
length of domains: 129
Time: pickout 0.0014    decision 0.2079    set_bounds 0.0135    solve 1.1964    add 0.0056    
Accumulated time: pickout 0.0031    decision 0.3458    set_bounds 0.0501    solve 2.6982    add 0.0106    
Current (lb-rhs): -0.06659635901451111
230 domains visited
Cumulative time: 3.11857533454895

BaB round 4
batch: 129
Average branched neurons at iteration 4:  1.0000
splitting decisions: 
split level 0: [/28, 987] [/28, 105] [/28, 105] [/38, 32] [/28, 672] [/28, 105] [/28, 486] [/38, 32] [/28, 672] [/28, 105] 
pruning_in_iteration open status: True
ratio of positive domain = 90 / 258 = 0.34883720930232553
pruning-in-iteration extra time: 0.0677800178527832
Time: prepare 0.0280    bound 1.4846    transfer 0.0010    finalize 0.0074    func 1.5211    
Accumulated time: func 4.2189    prepare 0.0667    bound 4.1299    transfer 0.0034    finalize 0.0207    
Current worst splitting domains lb-rhs (depth):
-0.05973 (12), -0.05791 (12), -0.05768 (12), -0.05596 (12), -0.05189 (12), -0.05095 (12), -0.05094 (12), -0.05029 (12), -0.04853 (12), -0.04829 (12), -0.04694 (12), -0.04605 (12), -0.04516 (12), -0.04506 (12), -0.04431 (12), -0.04298 (12), -0.04221 (12), -0.04213 (12), -0.04159 (12), -0.04156 (12), 
length of domains: 168
Time: pickout 0.0030    decision 0.3091    set_bounds 0.0200    solve 1.5213    add 0.0046    
Accumulated time: pickout 0.0061    decision 0.6548    set_bounds 0.0701    solve 4.2195    add 0.0152    
Current (lb-rhs): -0.05973394215106964
398 domains visited
Cumulative time: 4.978053092956543

BaB round 5
batch: 168
Average branched neurons at iteration 5:  1.0000
splitting decisions: 
split level 0: [/28, 987] [/28, 987] [/38, 32] [/38, 32] [/38, 32] [/28, 989] [/28, 987] [/28, 989] [/25, 36] [/28, 987] 
pruning_in_iteration open status: True
ratio of positive domain = 118 / 336 = 0.35119047619047616
pruning-in-iteration extra time: 0.08466529846191406
Time: prepare 0.0385    bound 1.7576    transfer 0.0016    finalize 0.0100    func 1.8078    
Accumulated time: func 6.0266    prepare 0.1057    bound 5.8875    transfer 0.0049    finalize 0.0307    
Current worst splitting domains lb-rhs (depth):
-0.05479 (13), -0.05275 (13), -0.05274 (13), -0.05107 (13), -0.04692 (13), -0.04678 (13), -0.04608 (13), -0.04573 (13), -0.04557 (13), -0.04525 (13), -0.04338 (13), -0.04324 (13), -0.04194 (13), -0.04066 (13), -0.03948 (13), -0.03874 (13), -0.03796 (13), -0.03736 (13), -0.03713 (13), -0.03691 (13), 
length of domains: 218
Time: pickout 0.0027    decision 0.3796    set_bounds 0.0261    solve 1.8079    add 0.0058    
Accumulated time: pickout 0.0087    decision 1.0345    set_bounds 0.0962    solve 6.0274    add 0.0210    
Current (lb-rhs): -0.05479234457015991
616 domains visited
Cumulative time: 7.202052354812622

BaB round 6
batch: 218
Average branched neurons at iteration 6:  1.0000
splitting decisions: 
split level 0: [/28, 106] [/28, 106] [/28, 987] [/28, 987] [/28, 106] [/38, 32] [/38, 32] [/28, 987] [/28, 106] [/28, 989] 
pruning_in_iteration open status: True
ratio of positive domain = 180 / 436 = 0.4128440366972477
pruning-in-iteration extra time: 0.08892989158630371
Time: prepare 0.0520    bound 2.0095    transfer 0.0017    finalize 0.0129    func 2.0762    
Accumulated time: func 8.1028    prepare 0.1581    bound 7.8970    transfer 0.0066    finalize 0.0435    
Current worst splitting domains lb-rhs (depth):
-0.04983 (14), -0.04789 (14), -0.04770 (14), -0.04601 (14), -0.04202 (14), -0.04110 (14), -0.04099 (14), -0.04078 (14), -0.04071 (14), -0.04070 (14), -0.03917 (14), -0.03911 (14), -0.03844 (14), -0.03838 (14), -0.03731 (14), -0.03592 (14), -0.03362 (14), -0.03320 (14), -0.03302 (14), -0.03298 (14), 
length of domains: 256
Time: pickout 0.0032    decision 0.4930    set_bounds 0.0324    solve 2.0763    add 0.0062    
Accumulated time: pickout 0.0119    decision 1.5274    set_bounds 0.1287    solve 8.1038    add 0.0272    
Current (lb-rhs): -0.04982501268386841
872 domains visited
Cumulative time: 9.816343784332275

BaB round 7
batch: 256
Average branched neurons at iteration 7:  1.0000
splitting decisions: 
split level 0: [/28, 672] [/28, 997] [/28, 997] [/28, 989] [/28, 672] [/28, 987] [/28, 672] [/38, 32] [/38, 32] [/28, 106] 
pruning_in_iteration open status: True
ratio of positive domain = 202 / 512 = 0.39453125
pruning-in-iteration extra time: 0.10792660713195801
Time: prepare 0.0609    bound 2.3887    transfer 0.0018    finalize 0.0164    func 2.4680    
Accumulated time: func 10.5707    prepare 0.2194    bound 10.2857    transfer 0.0084    finalize 0.0600    
Current worst splitting domains lb-rhs (depth):
-0.04480 (15), -0.04286 (15), -0.04226 (15), -0.04065 (15), -0.04031 (15), -0.03933 (15), -0.03854 (15), -0.03753 (15), -0.03730 (15), -0.03618 (15), -0.03573 (15), -0.03571 (15), -0.03571 (15), -0.03563 (15), -0.03391 (15), -0.03345 (15), -0.03336 (15), -0.03323 (15), -0.03229 (15), -0.03165 (15), 
length of domains: 310
Time: pickout 0.0041    decision 0.5637    set_bounds 0.0371    solve 2.4682    add 0.0074    
Accumulated time: pickout 0.0161    decision 2.0911    set_bounds 0.1658    solve 10.5719    add 0.0347    
Current (lb-rhs): -0.044799238443374634
1182 domains visited
Cumulative time: 12.899633646011353

BaB round 8
batch: 310
Average branched neurons at iteration 8:  1.0000
splitting decisions: 
split level 0: [/28, 601] [/28, 601] [/28, 601] [/28, 997] [/38, 32] [/38, 32] [/28, 997] [/28, 997] [/28, 601] [/38, 32] 
pruning_in_iteration open status: True
ratio of positive domain = 350 / 620 = 0.564516129032258
pruning-in-iteration extra time: 0.10563135147094727
Time: prepare 0.0752    bound 2.3121    transfer 0.0025    finalize 0.0193    func 2.4093    
Accumulated time: func 12.9800    prepare 0.2951    bound 12.5978    transfer 0.0109    finalize 0.0793    
Current worst splitting domains lb-rhs (depth):
-0.04007 (16), -0.03801 (16), -0.03754 (16), -0.03562 (16), -0.03557 (16), -0.03456 (16), -0.03359 (16), -0.03252 (16), -0.03165 (16), -0.03120 (16), -0.03105 (16), -0.03068 (16), -0.03061 (16), -0.03016 (16), -0.02884 (16), -0.02865 (16), -0.02830 (16), -0.02825 (16), -0.02789 (16), -0.02665 (16), 
length of domains: 270
Time: pickout 0.0043    decision 0.6798    set_bounds 0.0458    solve 2.4096    add 0.0079    
Accumulated time: pickout 0.0204    decision 2.7709    set_bounds 0.2116    solve 12.9815    add 0.0426    
Current (lb-rhs): -0.04006960988044739
1452 domains visited
Cumulative time: 16.05114459991455

BaB round 9
batch: 270
Average branched neurons at iteration 9:  1.0000
splitting decisions: 
split level 0: [/28, 997] [/28, 997] [/28, 997] [/28, 997] [/38, 32] [/28, 486] [/28, 989] [/28, 989] [/28, 989] [/38, 32] 
pruning_in_iteration open status: True
ratio of positive domain = 269 / 540 = 0.4981481481481481
pruning-in-iteration extra time: 0.09958386421203613
Time: prepare 0.0646    bound 2.1736    transfer 0.0019    finalize 0.0166    func 2.2568    
Accumulated time: func 15.2369    prepare 0.3602    bound 14.7714    transfer 0.0128    finalize 0.0959    
Current worst splitting domains lb-rhs (depth):
-0.03597 (17), -0.03392 (17), -0.03341 (17), -0.03155 (17), -0.03139 (17), -0.03037 (17), -0.02934 (17), -0.02842 (17), -0.02740 (17), -0.02708 (17), -0.02686 (17), -0.02651 (17), -0.02607 (17), -0.02602 (17), -0.02553 (17), -0.02482 (17), -0.02454 (17), -0.02437 (17), -0.02426 (17), -0.02415 (17), 
length of domains: 271
Time: pickout 0.0042    decision 0.5935    set_bounds 0.0410    solve 2.2571    add 0.0077    
Accumulated time: pickout 0.0246    decision 3.3645    set_bounds 0.2526    solve 15.2386    add 0.0503    
Current (lb-rhs): -0.035966575145721436
1723 domains visited
Cumulative time: 18.957793474197388

BaB round 10
batch: 271
Average branched neurons at iteration 10:  1.0000
splitting decisions: 
split level 0: [/28, 672] [/28, 672] [/28, 37] [/28, 37] [/19, 354] [/19, 354] [/28, 672] [/28, 672] [/38, 32] [/28, 997] 
pruning_in_iteration open status: True
ratio of positive domain = 297 / 542 = 0.5479704797047971
pruning-in-iteration extra time: 0.0894618034362793
Time: prepare 0.0645    bound 2.0839    transfer 0.0019    finalize 0.0906    func 2.2410    
Accumulated time: func 17.4779    prepare 0.4252    bound 16.8552    transfer 0.0147    finalize 0.1865    
Current worst splitting domains lb-rhs (depth):
-0.03137 (18), -0.03076 (18), -0.02994 (18), -0.02886 (18), -0.02817 (18), -0.02813 (18), -0.02768 (18), -0.02673 (18), -0.02614 (18), -0.02574 (18), -0.02551 (18), -0.02536 (18), -0.02512 (18), -0.02445 (18), -0.02402 (18), -0.02381 (18), -0.02359 (18), -0.02247 (18), -0.02199 (18), -0.02198 (18), 
length of domains: 245
Time: pickout 0.0038    decision 0.6192    set_bounds 0.0408    solve 2.2413    add 0.0062    
Accumulated time: pickout 0.0284    decision 3.9836    set_bounds 0.2934    solve 17.4799    add 0.0564    
Current (lb-rhs): -0.03137078881263733
1968 domains visited
Cumulative time: 21.872594594955444

BaB round 11
batch: 245
Average branched neurons at iteration 11:  1.0000
splitting decisions: 
split level 0: [/28, 672] [/28, 672] [/28, 486] [/28, 486] [/28, 672] [/28, 486] [/28, 486] [/28, 486] [/19, 354] [/19, 354] 
pruning_in_iteration open status: True
ratio of positive domain = 253 / 490 = 0.5163265306122449
pruning-in-iteration extra time: 0.08698606491088867
Time: prepare 0.0654    bound 1.9846    transfer 0.0018    finalize 0.0156    func 2.0674    
Accumulated time: func 19.5453    prepare 0.4910    bound 18.8398    transfer 0.0165    finalize 0.2020    
Current worst splitting domains lb-rhs (depth):
-0.02807 (19), -0.02737 (19), -0.02656 (19), -0.02547 (19), -0.02477 (19), -0.02472 (19), -0.02419 (19), -0.02341 (19), -0.02281 (19), -0.02241 (19), -0.02230 (19), -0.02210 (19), -0.02199 (19), -0.02178 (19), -0.02136 (19), -0.02105 (19), -0.02028 (19), -0.02027 (19), -0.01972 (19), -0.01950 (19), 
length of domains: 237
Time: pickout 0.0038    decision 0.5514    set_bounds 0.0347    solve 2.0690    add 0.0060    
Accumulated time: pickout 0.0322    decision 4.5351    set_bounds 0.3280    solve 19.5490    add 0.0624    
Current (lb-rhs): -0.028068453073501587
2205 domains visited
Cumulative time: 24.540693998336792

BaB round 12
batch: 237
Average branched neurons at iteration 12:  1.0000
splitting decisions: 
split level 0: [/17, 631] [/19, 354] [/25, 547] [/28, 609] [/28, 609] [/28, 609] [/28, 609] [/28, 609] [/28, 601] [/28, 609] 
pruning_in_iteration open status: True
ratio of positive domain = 254 / 474 = 0.5358649789029536
pruning-in-iteration extra time: 0.08410477638244629
Time: prepare 0.0665    bound 1.9904    transfer 0.0016    finalize 0.0147    func 2.0736    
Accumulated time: func 21.6189    prepare 0.5580    bound 20.8303    transfer 0.0181    finalize 0.2168    
Current worst splitting domains lb-rhs (depth):
-0.02511 (20), -0.02412 (20), -0.02362 (20), -0.02225 (20), -0.02184 (20), -0.02147 (20), -0.02133 (20), -0.02052 (20), -0.01956 (20), -0.01954 (20), -0.01919 (20), -0.01910 (20), -0.01892 (20), -0.01853 (20), -0.01813 (20), -0.01740 (20), -0.01694 (20), -0.01686 (20), -0.01667 (20), -0.01632 (20), 
length of domains: 220
Time: pickout 0.0042    decision 0.5330    set_bounds 0.0323    solve 2.0738    add 0.0064    
Accumulated time: pickout 0.0365    decision 5.0680    set_bounds 0.3603    solve 21.6228    add 0.0688    
Current (lb-rhs): -0.02510923147201538
2425 domains visited
Cumulative time: 27.193617343902588

BaB round 13
batch: 220
Average branched neurons at iteration 13:  1.0000
splitting decisions: 
split level 0: [/19, 354] [/19, 354] [/19, 354] [/28, 601] [/28, 609] [/28, 601] [/28, 601] [/28, 601] [/28, 601] [/28, 601] 
pruning_in_iteration open status: True
ratio of positive domain = 240 / 440 = 0.5454545454545454
pruning-in-iteration extra time: 0.08246231079101562
Time: prepare 0.0607    bound 1.8212    transfer 0.0021    finalize 0.0136    func 1.8979    
Accumulated time: func 23.5168    prepare 0.6192    bound 22.6515    transfer 0.0203    finalize 0.2304    
Current worst splitting domains lb-rhs (depth):
-0.02243 (21), -0.02148 (21), -0.02092 (21), -0.01937 (21), -0.01914 (21), -0.01885 (21), -0.01826 (21), -0.01707 (21), -0.01673 (21), -0.01660 (21), -0.01612 (21), -0.01606 (21), -0.01570 (21), -0.01562 (21), -0.01481 (21), -0.01470 (21), -0.01378 (21), -0.01364 (21), -0.01353 (21), -0.01341 (21), 
length of domains: 200
Time: pickout 0.0035    decision 0.5037    set_bounds 0.0318    solve 1.8981    add 0.0053    
Accumulated time: pickout 0.0400    decision 5.5717    set_bounds 0.3921    solve 23.5209    add 0.0742    
Current (lb-rhs): -0.02242732048034668
2625 domains visited
Cumulative time: 29.63909935951233

BaB round 14
batch: 200
Average branched neurons at iteration 14:  1.0000
splitting decisions: 
split level 0: [/28, 601] [/19, 354] [/28, 37] [/25, 547] [/28, 995] [/23, 347] [/28, 218] [/25, 547] [/28, 37] [/28, 995] 
pruning_in_iteration open status: True
ratio of positive domain = 259 / 400 = 0.6475
pruning-in-iteration extra time: 0.05685710906982422
Time: prepare 0.0560    bound 1.4833    transfer 0.0014    finalize 0.0138    func 1.5546    
Accumulated time: func 25.0714    prepare 0.6757    bound 24.1348    transfer 0.0217    finalize 0.2441    
Current worst splitting domains lb-rhs (depth):
-0.01971 (22), -0.01860 (22), -0.01816 (22), -0.01671 (22), -0.01639 (22), -0.01600 (22), -0.01568 (22), -0.01449 (22), -0.01419 (22), -0.01401 (22), -0.01362 (22), -0.01359 (22), -0.01344 (22), -0.01317 (22), -0.01309 (22), -0.01258 (22), -0.01225 (22), -0.01151 (22), -0.01117 (22), -0.01099 (22), 
length of domains: 141
Time: pickout 0.0032    decision 0.4604    set_bounds 0.0289    solve 1.5549    add 0.0052    
Accumulated time: pickout 0.0432    decision 6.0321    set_bounds 0.4210    solve 25.0757    add 0.0793    
Current (lb-rhs): -0.01971125602722168
2766 domains visited
Cumulative time: 31.69482111930847

BaB round 15
batch: 141
Average branched neurons at iteration 15:  1.0000
splitting decisions: 
split level 0: [/28, 995] [/28, 995] [/28, 218] [/28, 218] [/28, 979] [/28, 995] [/28, 995] [/28, 37] [/28, 995] [/28, 995] 
pruning_in_iteration open status: True
ratio of positive domain = 161 / 282 = 0.5709219858156028
pruning-in-iteration extra time: 0.053517818450927734
Time: prepare 0.0384    bound 1.2252    transfer 0.0012    finalize 0.0091    func 1.2750    
Accumulated time: func 26.3465    prepare 0.7146    bound 25.3600    transfer 0.0229    finalize 0.2533    
Current worst splitting domains lb-rhs (depth):
-0.01655 (23), -0.01599 (23), -0.01498 (23), -0.01377 (23), -0.01314 (23), -0.01311 (23), -0.01246 (23), -0.01124 (23), -0.01085 (23), -0.01080 (23), -0.01078 (23), -0.01075 (23), -0.01067 (23), -0.01047 (23), -0.01033 (23), -0.01014 (23), -0.00995 (23), -0.00991 (23), -0.00988 (23), -0.00984 (23), 
length of domains: 121
Time: pickout 0.0027    decision 0.3269    set_bounds 0.0208    solve 1.2752    add 0.0041    
Accumulated time: pickout 0.0458    decision 6.3590    set_bounds 0.4418    solve 26.3509    add 0.0834    
Current (lb-rhs): -0.016546055674552917
2887 domains visited
Cumulative time: 33.32682824134827

BaB round 16
batch: 121
Average branched neurons at iteration 16:  1.0000
splitting decisions: 
split level 0: [/28, 609] [/28, 37] [/28, 609] [/28, 609] [/23, 347] [/19, 354] [/28, 609] [/28, 609] [/28, 218] [/28, 995] 
pruning_in_iteration open status: True
ratio of positive domain = 127 / 242 = 0.524793388429752
pruning-in-iteration extra time: 0.05220770835876465
Time: prepare 0.0343    bound 1.2181    transfer 0.0009    finalize 0.0077    func 1.2612    
Accumulated time: func 27.6077    prepare 0.7493    bound 26.5782    transfer 0.0238    finalize 0.2609    
Current worst splitting domains lb-rhs (depth):
-0.01266 (24), -0.01237 (24), -0.01219 (24), -0.01184 (24), -0.01104 (24), -0.01087 (24), -0.00985 (24), -0.00984 (24), -0.00938 (24), -0.00928 (24), -0.00924 (24), -0.00923 (24), -0.00904 (24), -0.00814 (24), -0.00767 (24), -0.00748 (24), -0.00731 (24), -0.00721 (24), -0.00720 (24), -0.00716 (24), 
length of domains: 115
Time: pickout 0.0024    decision 0.2954    set_bounds 0.0184    solve 1.2614    add 0.0037    
Accumulated time: pickout 0.0482    decision 6.6544    set_bounds 0.4603    solve 27.6123    add 0.0871    
Current (lb-rhs): -0.012656450271606445
3002 domains visited
Cumulative time: 34.91094636917114

BaB round 17
batch: 115
Average branched neurons at iteration 17:  1.0000
splitting decisions: 
split level 0: [/28, 979] [/28, 979] [/23, 347] [/28, 979] [/19, 354] [/28, 45] [/28, 45] [/23, 347] [/28, 979] [/23, 347] 
pruning_in_iteration open status: True
ratio of positive domain = 157 / 230 = 0.682608695652174
pruning-in-iteration extra time: 0.037671566009521484
Time: prepare 0.0295    bound 0.9570    transfer 0.0008    finalize 0.0079    func 0.9954    
Accumulated time: func 28.6031    prepare 0.7793    bound 27.5351    transfer 0.0246    finalize 0.2688    
Current worst splitting domains lb-rhs (depth):
-0.01017 (25), -0.00994 (25), -0.00967 (25), -0.00940 (25), -0.00851 (25), -0.00838 (25), -0.00735 (25), -0.00735 (25), -0.00683 (25), -0.00674 (25), -0.00666 (25), -0.00656 (25), -0.00545 (25), -0.00535 (25), -0.00523 (25), -0.00499 (25), -0.00492 (25), -0.00472 (25), -0.00462 (25), -0.00460 (25), 
length of domains: 73
Time: pickout 0.0025    decision 0.2789    set_bounds 0.0172    solve 0.9955    add 0.0031    
Accumulated time: pickout 0.0508    decision 6.9332    set_bounds 0.4775    solve 28.6078    add 0.0903    
Current (lb-rhs): -0.010172918438911438
3075 domains visited
Time out!!!!!!!!
Result: unknown in 120.2652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 6.58486843, -2.73365068,  1.52628005,  0.90019357,  0.41411626,
          0.59434444, -0.45342019, -1.03602910, -4.44709396, -1.34972417]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 6.40795279, -2.75647259,  1.64547777,  0.89163452,  0.40360951,
           0.60056311, -0.37685323, -1.00569808, -4.44742298, -1.36290777],
         [ 6.40795279, -2.75647259,  1.64547777,  0.89163452,  0.40360951,
           0.60056311, -0.37685323, -1.00569808, -4.44742298, -1.36290777]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[ 9.16442490,  4.76247501,  5.51631832,  6.00434303,  5.80738974,
           6.78480625,  7.41364861, 10.85537338,  7.77085876]]])
number of violation:  0
Attack finished in 2.2868 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 6.58486843, -2.73365068,  1.52628005,  0.90019357,  0.41411626,
          0.59434444, -0.45342019, -1.03602910, -4.44709396, -1.34972417]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [86]; unstable size 86; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 79, 1, 86] with unstable size 78 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 47, 1, 86] with unstable size 46 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 26, 1, 86] with unstable size 25 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 81, 1, 86] with unstable size 80 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 9, 1, 86] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 86] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [78]; unstable size 78; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 47, 1, 78] with unstable size 46 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 26, 1, 78] with unstable size 25 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 81, 1, 78] with unstable size 80 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 9, 1, 78] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 78] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [46]; unstable size 46; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 26, 1, 46] with unstable size 25 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 81, 1, 46] with unstable size 80 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 9, 1, 46] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 46] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [25]; unstable size 25; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 81, 1, 25] with unstable size 80 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 9, 1, 25] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [80]; unstable size 80; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 9, 1, 80] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 80] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 8.53956223,  4.66361618,  5.18630362,  5.72868109,  5.45212030,
          6.37420940,  7.02150106, 10.25184155,  7.17683458]]) None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 2.5819 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Attack parameters: initialization=uniform, steps=100, restarts=30, alpha=0.008052527904510498, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ 0.14042915, -3.16067076,  0.57832563,  1.12894821,  0.61167592,
          0.60424203, -1.27564561,  3.60321426, -2.67567611,  0.44508749]])
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ 0.08516063, -3.10088873,  0.56584072,  1.25306118,  0.49962014,
           0.68727577, -1.07827413,  3.26433229, -2.56971860,  0.39351928],
         [ 0.08516063, -3.10088873,  0.56584072,  1.25306118,  0.49962014,
           0.68727577, -1.07827413,  3.26433229, -2.56971860,  0.39351928]]])
PGD attack margin (first 2 examles and 10 specs):
 tensor([[[3.17917156, 6.36522102, 2.69849157, 2.01127100, 2.76471210,
          2.57705641, 4.34260654, 5.83405113, 2.87081289]]])
number of violation:  0
Attack finished in 2.2153 seconds.
PGD attack failed
Model: BoundedModule(
  (/input.1): BoundInput(name=/input.1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/9): BoundParams(name=/9, inputs=[], perturbed=False)
  (/10): BoundParams(name=/10, inputs=[], perturbed=False)
  (/11): BoundParams(name=/11, inputs=[], perturbed=False)
  (/12): BoundParams(name=/12, inputs=[], perturbed=False)
  (/13): BoundParams(name=/13, inputs=[], perturbed=False)
  (/14): BoundParams(name=/14, inputs=[], perturbed=False)
  (/15): BoundParams(name=/15, inputs=[], perturbed=False)
  (/16): BoundParams(name=/16, inputs=[], perturbed=False)
  (/17): BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True)
  (/input): BoundRelu(name=/input, inputs=[/17], perturbed=True)
  (/19): BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True)
  (/input.4): BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
  (/21): BoundConv(name=/21, inputs=[/input.4, /5, /6], perturbed=True)
  (/22): BoundConv(name=/22, inputs=[/input, /7, /8], perturbed=True)
  (/23): BoundAdd(name=/23, inputs=[/21, /22], perturbed=True)
  (/input.8): BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
  (/25): BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True)
  (/input.12): BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
  (/27): BoundConv(name=/27, inputs=[/input.12, /11, /12], perturbed=True)
  (/28): BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True)
  (/29): BoundRelu(name=/29, inputs=[/28], perturbed=True)
  (/30): BoundShape(name=/30, inputs=[/29], perturbed=False)
  (/31): BoundConstant(name=/31, value=0)
  (/32): BoundGather(name=/32, inputs=[/30, /31], perturbed=False)
  (/33): BoundConstant(name=/33, value=-1)
  (/34): BoundUnsqueeze(name=/34, inputs=[/32], perturbed=False)
  (/35): BoundUnsqueeze(name=/35, inputs=[/33], perturbed=False)
  (/36): BoundConcat(name=/36, inputs=[/34, /35], perturbed=False)
  (/37): BoundReshape(name=/37, inputs=[/29, /36], perturbed=True)
  (/38): BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True)
  (/39): BoundRelu(name=/39, inputs=[/38], perturbed=True)
  (/40): BoundLinear(name=/40, inputs=[/39, /15, /16], perturbed=True)
)
Original output: tensor([[ 0.14042915, -3.16067076,  0.57832563,  1.12894821,  0.61167592,
          0.60424203, -1.27564561,  3.60321426, -2.67567611,  0.44508749]])
Split layers:
  BoundConv(name=/17, inputs=[/input.1, /1, /2], perturbed=True): [(BoundRelu(name=/input, inputs=[/17], perturbed=True), 0)]
  BoundConv(name=/19, inputs=[/input, /3, /4], perturbed=True): [(BoundRelu(name=/input.4, inputs=[/19], perturbed=True), 0)]
  BoundAdd(name=/23, inputs=[/21, /22], perturbed=True): [(BoundRelu(name=/input.8, inputs=[/23], perturbed=True), 0)]
  BoundConv(name=/25, inputs=[/input.8, /9, /10], perturbed=True): [(BoundRelu(name=/input.12, inputs=[/25], perturbed=True), 0)]
  BoundAdd(name=/28, inputs=[/27, /input.8], perturbed=True): [(BoundRelu(name=/29, inputs=[/28], perturbed=True), 0)]
  BoundLinear(name=/38, inputs=[/37, /13, /14], perturbed=True): [(BoundRelu(name=/39, inputs=[/38], perturbed=True), 0)]
Nonlinear functions:
   BoundRelu(name=/input, inputs=[/17], perturbed=True)
   BoundRelu(name=/input.4, inputs=[/19], perturbed=True)
   BoundRelu(name=/input.8, inputs=[/23], perturbed=True)
   BoundRelu(name=/input.12, inputs=[/25], perturbed=True)
   BoundRelu(name=/29, inputs=[/28], perturbed=True)
   BoundRelu(name=/39, inputs=[/38], perturbed=True)
layer /input using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 8, 16, 16])
layer /input start_node /19 using sparse-spec alpha [2, 182, 1, 199] with unstable size 181 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /23 using sparse-spec alpha [2, 141, 1, 199] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /25 using sparse-spec alpha [2, 124, 1, 199] with unstable size 123 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /28 using sparse-spec alpha [2, 255, 1, 199] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input start_node /38 using sparse-spec alpha [2, 36, 1, 199] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input start_node /40 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /input.4 using sparse-features alpha with shape [181]; unstable size 181; total size 1024 ([1, 16, 8, 8])
layer /input.4 start_node /23 using sparse-spec alpha [2, 141, 1, 181] with unstable size 140 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /25 using sparse-spec alpha [2, 124, 1, 181] with unstable size 123 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /28 using sparse-spec alpha [2, 255, 1, 181] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.4 start_node /38 using sparse-spec alpha [2, 36, 1, 181] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.4 start_node /40 using full alpha [2, 9, 1, 181] with unstable size None total_size 9 output_shape 9
layer /input.8 using sparse-features alpha with shape [140]; unstable size 140; total size 1024 ([1, 16, 8, 8])
layer /input.8 start_node /25 using sparse-spec alpha [2, 124, 1, 140] with unstable size 123 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /28 using sparse-spec alpha [2, 255, 1, 140] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.8 start_node /38 using sparse-spec alpha [2, 36, 1, 140] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.8 start_node /40 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /input.12 using sparse-features alpha with shape [123]; unstable size 123; total size 1024 ([1, 16, 8, 8])
layer /input.12 start_node /28 using sparse-spec alpha [2, 255, 1, 123] with unstable size 254 total_size 1024 output_shape (16, 8, 8)
layer /input.12 start_node /38 using sparse-spec alpha [2, 36, 1, 123] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /input.12 start_node /40 using full alpha [2, 9, 1, 123] with unstable size None total_size 9 output_shape 9
layer /29 using sparse-features alpha with shape [254]; unstable size 254; total size 1024 ([1, 16, 8, 8])
layer /29 start_node /38 using sparse-spec alpha [2, 36, 1, 254] with unstable size 35 total_size 100 output_shape torch.Size([100])
layer /29 start_node /40 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /39 using sparse-features alpha with shape [35]; unstable size 35; total size 100 ([1, 100])
layer /39 start_node /40 using full alpha [2, 9, 1, 35] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.50644255e-01,  2.94951439e+00,  1.00843430e+00,  9.74887609e-01,
          1.49230719e+00,  1.47723699e+00,  2.63995600e+00,  2.66751361e+00,
         -2.65657902e-04]]) None

all verified at 1th iter
best_l after optimization: 14.491569519042969
alpha/beta optimization time: 1.202509880065918
initial alpha-crown bounds: tensor([[0.98841071, 3.01216722, 1.03993797, 0.99987149, 1.51261759, 1.50261331,
         2.67548966, 2.71226645, 0.04819471]])
Worst class: (+ rhs) 0.048194706439971924
verified with init bound!
Result: safe-incomplete in 3.7351 seconds
############# Summary #############
Final verified acc: 40.0% (total 100 examples)
Problem instances count: 100 , total verified (safe/unsat): 40 , total falsified (unsafe/sat): 40 , timeout: 20
mean time for ALL instances (total 100):41.613210307634965, max time: 180.98129844665527
mean time for verified SAFE instances(total 40): 34.032119053602216, max time: 115.16818833351135
mean time for verified (SAFE + UNSAFE) instances (total 80): 17.478996050357818, max time: [93.16485524177551, 8.296567678451538, 2.796034336090088, 110.64736533164978, 4.6188740730285645, 107.52696514129639, 2.269969940185547, 2.6459267139434814, 2.3219738006591797, 2.4746205806732178, 89.6527738571167, 3.082221508026123, 2.917243719100952, 104.88131284713745, 94.9847161769867, 2.444420576095581, 2.405989408493042, 4.638981819152832, 115.16818833351135, 16.419470071792603, 2.356332778930664, 2.4046075344085693, 2.995189905166626, 3.6054015159606934, 2.3700084686279297, 110.50722312927246, 2.392873525619507, 112.63569378852844, 2.4089138507843018, 2.37315034866333, 100.03505659103394, 2.339484453201294, 3.7342073917388916, 3.24875545501709, 110.03638482093811, 2.484027147293091, 2.4930105209350586, 113.1889898777008, 2.5818512439727783, 3.73512864112854]
mean time for verified SAFE + TIMEOUT instances (total 60): 68.73810875018438, max time: [121.4969208240509, 121.55658674240112, 168.85896110534668, 126.28322744369507, 122.52023839950562, 133.51555347442627, 160.35340309143066, 180.98129844665527, 139.3741319179535, 158.47681713104248, 147.12611603736877, 122.31034588813782, 124.11745071411133, 130.0926263332367, 122.33224606513977, 130.93676900863647, 166.67633485794067, 127.29939866065979, 138.42814588546753, 120.26519083976746] 
mean time for verified UNSAFE instances (total 40): 0.9258730471134186, max time: 4.810630559921265
unsafe-pgd (total 40), index: [0, 7, 8, 12, 18, 22, 24, 27, 31, 33, 35, 40, 42, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 65, 67, 68, 69, 70, 74, 76, 78, 81, 83, 85, 87, 91]
safe (total 12), index: [1, 9, 11, 20, 25, 28, 38, 55, 72, 77, 86, 93]
unknown (total 20), index: [2, 3, 5, 14, 17, 26, 30, 32, 36, 43, 64, 66, 71, 80, 88, 89, 94, 95, 96, 97]
safe-incomplete (total 28), index: [4, 6, 10, 13, 15, 16, 19, 21, 23, 29, 34, 37, 39, 41, 44, 45, 50, 54, 60, 73, 75, 79, 82, 84, 90, 92, 98, 99]
